#lang racket
(require redex)

(define-language
  vm
  (e x
     number
     (lam x e)
     (app‚ÇÅ e e)
     (app‚ÇÇ e e)
     (plus‚ÇÅ e e)
     (plus‚ÇÇ e e)
     (lift e)
     (code e)
     (reflect e)
     (lamc x e)
     (ifz‚ÇÅ e e e)
     (fix‚ÇÅ e)
     (fix‚ÇÇ e)
     ;;; reify bound
     (lets x e e)
     (letc x e e)
     (run e)
     (ifz‚ÇÇ e e e)
     )
  (E hole
     (app‚ÇÅ E e) (app‚ÇÅ v E)
     (app‚ÇÇ E e) (app‚ÇÇ v E)
     (plus‚ÇÅ E e) (plus‚ÇÅ v E)
     (plus‚ÇÇ E e) (plus‚ÇÇ v E)
     (lift E)
     (lets x E e)
     (ifz‚ÇÅ E e e) (ifz‚ÇÇ E e e)
     (fix‚ÇÅ E) (fix‚ÇÇ E))
  ;;; extended context, E without hole
  (E+
    (app‚ÇÅ E e) (app‚ÇÅ v E)
    (app‚ÇÇ E e) (app‚ÇÇ v E)
    (plus‚ÇÅ E e) (plus‚ÇÅ v E)
    (plus‚ÇÇ E e) (plus‚ÇÇ v E)
    (lift E)
    (lets x E e)
    (ifz‚ÇÅ E e e) (ifz‚ÇÇ E e e)
    (fix‚ÇÅ E) (fix‚ÇÇ E))
  (M hole
     (app‚ÇÅ M e) (app‚ÇÅ v M)
     (app‚ÇÇ M e) (app‚ÇÇ v M)
     (plus‚ÇÅ M e) (plus‚ÇÅ v M)
     (plus‚ÇÇ M e) (plus‚ÇÇ v M)
     (lift M)
     (lets x M e)
     (ifz‚ÇÅ M e e) (ifz‚ÇÇ M e e)
     (fix‚ÇÅ M) (fix‚ÇÇ M)
     ;;; reify context bound
     (lamc x M) (letc x e M) (run M)
     (ifz‚ÇÇ v M e) (ifz‚ÇÇ v v M))
  (R
    (app‚ÇÅ R e) (app‚ÇÅ v R)
    (app‚ÇÇ R e) (app‚ÇÇ v R)
    (plus‚ÇÅ R e) (plus‚ÇÅ v R)
    (plus‚ÇÇ R e) (plus‚ÇÇ v R)
    (lift R)
    (lets x R e)
    (ifz‚ÇÅ R e e) (ifz‚ÇÇ R e e)
    (fix‚ÇÅ R) (fix‚ÇÇ R)
    ;;; reify context bound
    (lamc x P) (letc x e P) (run P)
    (ifz‚ÇÇ v P e) (ifz‚ÇÇ v v P))
  (P hole
     (app‚ÇÅ R e) (app‚ÇÅ v R)
     (app‚ÇÇ R e) (app‚ÇÇ v R)
     (plus‚ÇÅ R e) (plus‚ÇÅ v R)
     (plus‚ÇÇ R e) (plus‚ÇÇ v R)
     (lift R)
     (lets x R e)
     (ifz‚ÇÅ R e e) (ifz‚ÇÇ R e e)
     (fix‚ÇÅ R) (fix‚ÇÇ R)
     ;;; reify context bound
     (lamc x P) (letc x e P) (run P)
     (ifz‚ÇÇ v P e) (ifz‚ÇÇ v v P))
  (v number (lam x e) (code e))
  (x variable-not-otherwise-mentioned))

(define not-code? (lambda (x) (not ((redex-match vm (code e)) x))))

(define red
  (reduction-relation
    vm
    (--> (in-hole M (lets x v e)) (in-hole M (subst x v e)) "lets")
    (--> (in-hole M (app‚ÇÅ (lam x e) v)) (in-hole M (subst x v e)) "app‚ÇÅ")
    (--> (in-hole M (app‚ÇÇ (code e_1) (code e_2))) (in-hole M (reflect (app‚ÇÅ e_1 e_2))) "app‚ÇÇ")
    (--> (in-hole M (plus‚ÇÅ number_1 number_2)) (in-hole M ,(+ (term number_1) (term number_2))) "plus‚ÇÅ")
    (--> (in-hole M (plus‚ÇÇ (code e_1) (code e_2))) (in-hole M (reflect (plus‚ÇÅ e_1 e_2))) "plus‚ÇÇ")
    (--> (in-hole M (lift number_1)) (in-hole M (code number_1)) "lift_lit")
    (--> (in-hole M (lift (lam x e))) (in-hole M (lamc x (subst x (code x) e))) "lift_lam")
    (--> (in-hole M (lamc x (code e))) (in-hole M (reflect (lam x e))) "lamc")
    (--> (in-hole M (letc x e_1 (code e_2))) (in-hole M (code (lets x e_1 e_2))) "letc_code")
    ;;; extended letc rules
    ;;; letc_value equivalent to:
    ;;; P‚ü¶E‚ü¶letùïî x e v‚üß‚üß --> P‚ü¶letùïî x e E‚ü¶v‚üß‚üß
    ;;; where v != code _
    ;;;       E != hole
    (--> (in-hole P (in-hole E+ (letc x e v))) (in-hole P (letc x e (in-hole E+ v))) "letc_value"
         (side-condition (not-code? (term v))))
    (--> (in-hole M (run (code e))) (in-hole M e) "run")
    (--> (in-hole M (ifz‚ÇÅ 0 e_1 e_2)) (in-hole M e_1) "ifz‚ÇÅ_0")
    (--> (in-hole M (ifz‚ÇÅ number_0 e_1 e_2)) (in-hole M e_2) "ifz‚ÇÅ_n"
         (side-condition (not (= 0 (term number_0)))))
    (--> (in-hole M (ifz‚ÇÇ (code e_1) (code e_2) (code e_3))) (in-hole M (reflect (ifz‚ÇÅ e_1 e_2 e_3))) "ifz‚ÇÇ")
    (--> (in-hole M (fix‚ÇÅ (lam x e))) (in-hole M (subst x (fix‚ÇÅ (lam x e)) e)) "fix‚ÇÅ")
    (--> (in-hole M (fix‚ÇÇ (code e))) (in-hole M (reflect (fix‚ÇÅ e))) "fix‚ÇÇ")
    (--> (in-hole P (in-hole E (reflect e))) (in-hole P (letc x_new e (in-hole E (code x_new)))) "reflect"
         (where x_new ,(variable-not-in (term (P E e)) (term x))))
    ))

(define-metafunction
  vm
  subst : x any any -> any
  [(subst x_1 any_1 (lam x_1 any_2)) (lam x_1 any_2)]
  [(subst x_1 any_1 (lam x_2 any_2))
   (lam x_new (subst x_1 any_1 (subst-var x_2 x_new any_2)))
   (where x_new ,(variable-not-in (term (x_1 any_1 any_2)) (term x_2)))
   ]
  [(subst x_1 any_1 (lets x_1 any_x any_2)) (lets x_1 (subst x_1 any_1 any_x) any_2)]
  [(subst x_1 any_1 (lets x_2 any_x any_2))
   (lets x_new (subst x_1 any_1 any_x) (subst x_1 any_1 (subst-var x_2 x_new any_2)))
   (where x_new ,(variable-not-in (term (x_1 any_1 any_2)) (term x_2)))]
  [(subst x_1 any_1 (letc x_1 any_x any_2)) (letc x_1 (subst x_1 any_1 any_x) any_2)]
  [(subst x_1 any_1 (letc x_2 any_x any_2))
   (letc x_new (subst x_1 any_1 any_x) (subst x_1 any_1 (subst-var x_2 x_new any_2)))
   (where x_new ,(variable-not-in (term (x_1 any_1 any_2)) (term x_2)))]
  [(subst x_1 any_1 x_1) any_1]
  [(subst x_1 any_1 x_2) x_2]
  [(subst x_1 any_1 (any_2 ...))
   ((subst x_1 any_1 any_2) ...)]
  [(subst x_1 any_1 any_2) any_2])

(define-metafunction
  vm
  subst-var : x any any -> any
  [(subst-var x_1 any_1 x_1) any_1]
  [(subst-var x_1 any_1 (any_2 ...))
   ((subst-var x_1 any_1 any_2) ...)]
  [(subst-var x_1 any_1 any_2) any_2])

;;; ifz‚ÇÇ example
(stepper
  red
  (term
    (lets x 0
          (lets y (ifz‚ÇÇ (plus‚ÇÇ (lift 1) (lift 1))
                        (plus‚ÇÇ (lift 2) (lift 2))
                        (plus‚ÇÇ (lift 3) (lift 3)))
                x)
          )))

;;; reflect example
(traces
  red
  (term
    (plus‚ÇÅ
      1
      (lets x (reflect (plus‚ÇÅ 1 1)) 2)))
  )

;;; reflect stuck example
(stepper
  red
  (term
    (plus‚ÇÅ
      1
      (letc x1 (plus‚ÇÅ 1 1) 2)))
  )

;;; sum (-10) + (-9)... + 0
(stepper
  red
  (term
    (app‚ÇÅ
      (fix‚ÇÅ
        (lam sum
             (lam x
                  (ifz‚ÇÅ x
                        0
                        (plus‚ÇÅ
                          x
                          (app‚ÇÅ sum (plus‚ÇÅ x 1)))))
             )
        )
      -10)
    )
  )

;;; staged sum
(stepper
  red
  (term
    (app‚ÇÅ
      (fix‚ÇÅ
        (lam sum
             (lam x
                  (ifz‚ÇÅ x
                        (lift 0)
                        (plus‚ÇÇ
                          (lift x)
                          (app‚ÇÅ sum (plus‚ÇÅ x 1)))))
             )
        )
      -10)
    )
  )

;;; staged sum‚ÇÇ
(stepper
  red
  (term
    (app‚ÇÇ
      (fix‚ÇÇ
        (lift
          (lam sum
               (lift
                 (lam x
                      (ifz‚ÇÇ x
                            (lift 0)
                            (plus‚ÇÇ
                              x
                              (app‚ÇÇ sum (plus‚ÇÇ x (lift 1)))))))
               )
          )
        )
      (lift -10)))
  )

;;; avoid side effects duplication
(stepper
  red
  (term
    (lets f
          (letc x eff
                (lam y (code 1)))
          (plus‚ÇÇ (app‚ÇÅ f 0) (app‚ÇÅ f 0))))
  )

;;; side effects discard
(stepper
  red
  (term
    (lets y
          (letc x eff
                (code 1))
          1))
  )

(stepper
  red
  (term (lets y (code eff) 1)))

;;; reify

(stepper
  red
  (term
    (run
      ;;; reify here!
      (letc x (plus‚ÇÅ 0 1)
            (letc x1 (plus‚ÇÅ x 2)
                  (code x1)))
      ))
  )

(stepper
  red
  (term
    (ifz‚ÇÇ
      (code 0)
      (code 0)
      ;;; reify here!
      (letc x (plus‚ÇÅ 0 1)
            (letc x1 (plus‚ÇÅ x 2)
                  (code x1)))
      ))
  )

