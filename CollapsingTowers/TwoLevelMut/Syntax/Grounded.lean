import CollapsingTowers.TwoLevelMut.Syntax.Transform

@[simp]
def grounded (e : Expr) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar _ => true
  | .lam e => grounded e
  | .lift _ => false
  | .app‚ÇÅ f arg => grounded f ‚àß grounded arg
  | .app‚ÇÇ _ _ => false
  | .lit _ => true
  | .run _ => false
  | .code _ => false
  | .reflect _ => false
  | .lamùïî _ => false
  | .lets b e => grounded b ‚àß grounded e
  | .letsùïî _ _ => false
  | .unit => true
  | .loc _ => true
  | .alloc‚ÇÅ e => grounded e
  | .alloc‚ÇÇ _ => false
  | .load‚ÇÅ e => grounded e
  | .load‚ÇÇ _ => false
  | .store‚ÇÅ l r => grounded l ‚àß grounded r
  | .store‚ÇÇ _ _ => false

lemma grounded.under_erase : ‚àÄ e, grounded ‚Äñe‚Äñ :=
  by
  intros e
  induction e with
  | bvar| fvar| lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma erasable.lift : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.lift e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma erasable.run : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.run e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma erasable.code : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.code e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma erasable.reflect : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.reflect e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma grounded_iff_erase_identity : ‚àÄ e, grounded e ‚Üî ‚Äñe‚Äñ = e :=
  by
  intros e
  induction e with
  | bvar| fvar| app‚ÇÇ| lit| lamùïî| letsùïî| unit| loc => simp
  | lam _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]
  | lift => simp; apply erasable.lift
  | run => simp; apply erasable.run
  | code => simp; apply erasable.code
  | reflect => simp; apply erasable.reflect

lemma grounded.under_opening : ‚àÄ e i x, grounded e ‚Üî grounded ({i ‚Ü¶ x} e) :=
  by
  intros e i x
  induction e generalizing i with
  | fvar| app‚ÇÇ| lit| lamùïî| letsùïî| lift| run| code| reflect| unit| loc| alloc‚ÇÇ| load‚ÇÇ| store‚ÇÇ => simp
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]
    . simp [if_neg HEq]
  | lam _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÅ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ]

lemma grounded.under_subst : ‚àÄ e v x, grounded v ‚Üí grounded e ‚Üí grounded (subst x v e) :=
  by
  intros e v x
  induction e with
  | bvar| app‚ÇÇ| lit| lamùïî| letsùïî| lift| run| code| reflect| unit| loc| alloc‚ÇÇ| load‚ÇÇ| store‚ÇÇ => simp
  | fvar y =>
    intros Hv
    by_cases HEq : x = y
    . simp [if_pos HEq, Hv]
    . simp [if_neg HEq]
  | lam _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÅ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; intros Hv H‚ÇÄ H‚ÇÅ; constructor
    apply IH‚ÇÄ; apply Hv; apply H‚ÇÄ
    apply IH‚ÇÅ; apply Hv; apply H‚ÇÅ

lemma grounded.under_opening_value : ‚àÄ e v i, grounded v ‚Üí grounded e ‚Üí grounded (opening i v e) :=
  by
  intros e v i
  induction e generalizing i with
  | fvar| app‚ÇÇ| lit| lamùïî| letsùïî| lift| run| code| reflect| unit| loc| alloc‚ÇÇ| load‚ÇÇ| store‚ÇÇ => simp
  | bvar j =>
    simp; intros Hv
    by_cases HEq : j = i
    . simp [if_pos HEq, Hv]
    . simp [if_neg HEq]
  | lam _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÅ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; intros Hv H‚ÇÄ H‚ÇÅ; constructor
    apply IH‚ÇÄ; apply Hv; apply H‚ÇÄ
    apply IH‚ÇÅ; apply Hv; apply H‚ÇÅ
