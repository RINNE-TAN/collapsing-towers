import CollapsingTowers.TwoLevelMut.Syntax.Identity

lemma comm.subst_opening : ‚àÄ x y v e i, x ‚â† y ‚Üí lc v ‚Üí subst x v ({i ‚Ü¶ y} e) = ({i ‚Ü¶ y} subst x v e) :=
  by
  intro x y v e i HNe Hlc
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]; omega
    . simp [if_neg HEq]
  | fvar z =>
    by_cases HEq : x = z
    . simp [if_pos HEq]; rw [identity.opening]
      apply lc.inc; apply Hlc; omega
    . simp [if_neg HEq]
  | lit| unit| loc => simp
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.subst_opening_value :
    ‚àÄ x v‚ÇÄ v‚ÇÅ e i, lc_at v‚ÇÄ i ‚Üí subst x v‚ÇÄ (opening i v‚ÇÅ e) = opening i (subst x v‚ÇÄ v‚ÇÅ) (subst x v‚ÇÄ e) :=
  by
  intro x v‚ÇÄ v‚ÇÅ e i Hlc
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]
    . simp [if_neg HEq]
  | fvar y =>
    by_cases HEq : x = y
    . simp [if_pos HEq]; rw [identity.opening]; apply Hlc
    . simp [if_neg HEq]
  | lit| unit| loc => simp
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc
    apply IH‚ÇÅ; apply Hlc
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc
    apply IH‚ÇÅ; apply lc.inc; apply Hlc; omega
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hlc
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH =>
    simp; apply IH; apply lc.inc; apply Hlc; omega

lemma comm.shiftl_opening : ‚àÄ x y e n i, x ‚â§ y ‚Üí (shiftl x n {i ‚Ü¶ y} e) = ({i ‚Ü¶ y + n} shiftl x n e) :=
  by
  intros x y e n i HLe
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . rw [HEq]; simp; omega
    . simp; rw [if_neg HEq]; rw [if_neg HEq]; rfl
  | fvar z =>
    by_cases HLe : x ‚â§ z
    . simp [if_pos HLe]
    . simp [if_neg HLe]
  | lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.shiftr_opening : ‚àÄ x y e i, x < y ‚Üí shiftr x ({i ‚Ü¶ y} e) = {i ‚Ü¶ (y - 1)} (shiftr x e) :=
  by
  intros x y e i HLe
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]; omega
    . simp [if_neg HEq]
  | fvar z =>
    by_cases HLe : x < z
    . simp [if_pos HLe]
    . simp [if_neg HLe]
  | lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.erase_opening : ‚àÄ i x e, ‚Äñ{i ‚Ü¶ x} e‚Äñ = {i ‚Ü¶ x} ‚Äñe‚Äñ :=
  by
  intros i x e
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]
    . simp [if_neg HEq]
  | fvar| lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.erase_closing : ‚àÄ i x e, ‚Äñ{i ‚Ü§ x} e‚Äñ = {i ‚Ü§ x} ‚Äñe‚Äñ :=
  by
  intros i x e
  induction e generalizing i with
  | fvar y =>
    by_cases HEq : x = y
    . simp [if_pos HEq]
    . simp [if_neg HEq]
  | bvar| lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.erase_opening_value : ‚àÄ i v e, ‚Äñopening i v e‚Äñ = opening i ‚Äñv‚Äñ ‚Äñe‚Äñ :=
  by
  intros i v e
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]
    . simp [if_neg HEq]
  | fvar| lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.msubst_opening : ‚àÄ Œ≥ x e i, x ‚â• Œ≥.length ‚Üí mwf Œ≥ ‚Üí msubst Œ≥ ({i ‚Ü¶ x} e) = {i ‚Ü¶ x} (msubst Œ≥ e) :=
  by
  intros Œ≥ x e i HGe HŒ≥
  induction Œ≥ generalizing e
  case nil => rfl
  case cons IH =>
    simp at *
    rw [comm.subst_opening, IH]
    omega; apply HŒ≥.right; omega
    apply lc.inc; apply HŒ≥.left.left; omega

lemma comm.msubst_opening_value :
    ‚àÄ Œ≥ v e i, mwf Œ≥ ‚Üí msubst Œ≥ (opening i v e) = opening i (msubst Œ≥ v) (msubst Œ≥ e) :=
    by
    intros Œ≥ v e i HŒ≥
    induction Œ≥ generalizing e v
    case nil => rfl
    case cons IH =>
      rw [msubst, comm.subst_opening_value, IH]
      rfl; apply HŒ≥.right
      apply lc.inc; apply HŒ≥.left.left; omega

lemma comm.subst_subst : ‚àÄ x y v‚ÇÄ v‚ÇÅ e, x ‚â† y ‚Üí closed v‚ÇÄ ‚Üí closed v‚ÇÅ ‚Üí subst x v‚ÇÄ (subst y v‚ÇÅ e) = subst y v‚ÇÅ (subst x v‚ÇÄ e) :=
  by
  intro x y v‚ÇÄ v‚ÇÅ e HNe Hclose‚ÇÄ Hclose‚ÇÅ
  induction e with
  | bvar| lit| unit| loc => simp
  | fvar z =>
    by_cases HEqx : x = z
    . simp [if_pos HEqx]
      by_cases HEqy : y = z
      . simp [if_pos HEqy]; omega
      . simp [if_neg HEqy, if_pos HEqx]
        rw [identity.subst]
        apply closed.inc; apply Hclose‚ÇÄ; omega
    . simp [if_neg HEqx]
      by_cases HEqy : y = z
      . simp [if_pos HEqy]
        rw [identity.subst]
        apply closed.inc; apply Hclose‚ÇÅ; omega
      . simp [if_neg HEqy, if_neg HEqx]
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]

lemma comm.msubst_subst : ‚àÄ x Œ≥ v e, x ‚â• Œ≥.length ‚Üí closed v ‚Üí mwf Œ≥ ‚Üí subst x v (msubst Œ≥ e) = msubst Œ≥ (subst x v e) :=
  by
  intro x Œ≥ v e HGe Hclose HŒ≥
  induction Œ≥ generalizing e
  case nil => simp
  case cons IH =>
    simp at HGe
    rw [msubst, msubst, IH, comm.subst_subst]
    omega; apply Hclose; apply HŒ≥.left.right
    omega; apply HŒ≥.right
