import CollapsingTowers.TwoLevelMut.Syntax.LocallyNameless

lemma identity.opening : ‚àÄ e v i, lc_at e i ‚Üí (opening i v e) = e :=
  by
  intros e v i Hlc
  induction e generalizing i with
  | fvar| lit| unit| loc => simp
  | bvar => simp at *; omega
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH =>
    simp; apply IH; apply Hlc
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left
    apply IH‚ÇÅ; apply Hlc.right

lemma identity.opening_closing : ‚àÄ i e x, lc_at e i ‚Üí ({i ‚Ü¶ x}{i ‚Ü§ x} e) = e :=
  by
  intros i e x Hlc
  induction e generalizing i with
  | bvar j =>
    simp at *; omega
  | fvar y =>
    by_cases HEq : x = y
    . simp [if_pos HEq]; omega
    . simp [if_neg HEq]
  | lit| unit| loc => rfl
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hlc
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left
    apply IH‚ÇÅ; apply Hlc.right

lemma identity.closing_opening : ‚àÄ i e x, closed_at e x ‚Üí ({i ‚Ü§ x}{i ‚Ü¶ x} e) = e :=
  by
  intros i e x Hclosed
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]; omega
    . simp [if_neg HEq]
  | fvar => simp at *; omega
  | lit| unit| loc => rfl
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right

lemma identity.shiftl :
    ‚àÄ x e n, closed_at e x ‚Üí shiftl x n e = e :=
  by
  intros x e n
  induction e with
  | bvar| lit| unit| loc => simp
  | fvar => simp; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclosed; simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right

lemma identity.shiftr :
    ‚àÄ x e, closed_at e (x + 1) ‚Üí shiftr x e = e :=
  by
  intros x e
  induction e with
  | bvar| lit| unit| loc => simp
  | fvar y => simp; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclosed; simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right

lemma identity.subst : ‚àÄ x e v, closed_at e x ‚Üí subst x v e = e :=
  by
  intros x e v Hclosed
  induction e with
  | bvar| lit| unit| loc => simp
  | fvar => simp at *; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right

lemma identity.msubst : ‚àÄ Œ≥ e, closed e ‚Üí msubst Œ≥ e = e :=
  by
  intro Œ≥ e Hclosed
  induction Œ≥ generalizing e
  case nil => rfl
  case cons IH =>
    simp; rw [IH, identity.subst]
    apply closed.inc; apply Hclosed; omega
    rw [identity.subst]; apply Hclosed
    apply closed.inc; apply Hclosed; omega

lemma identity.erase_codify : ‚àÄ i e, ‚Äñcodify i e‚Äñ = ‚Äñe‚Äñ :=
  by
  intros i e
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]; omega
    . simp [if_neg HEq]
  | fvar| lit| unit| loc => simp
  | lam _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | alloc‚ÇÅ _ IH
  | alloc‚ÇÇ _ IH
  | load‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | run _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]
