import CollapsingTowers.TwoLevelMut.SyntacticSoundness.PresvCtx

theorem preservation.mutable.head :
  ‚àÄ œÉ‚ÇÄ œÉ‚ÇÅ Œì e‚ÇÄ e‚ÇÅ œÑ œÜ,
    head_mutable ‚ü®œÉ‚ÇÄ, e‚ÇÄ‚ü© ‚ü®œÉ‚ÇÅ, e‚ÇÅ‚ü© ‚Üí
    ok œÉ‚ÇÄ ‚Üí
    typing œÉ‚ÇÄ Œì ùüô e‚ÇÄ œÑ œÜ ‚Üí
    ok œÉ‚ÇÅ ‚àß
    typing œÉ‚ÇÅ Œì ùüô e‚ÇÅ œÑ œÜ :=
  by
  intros œÉ‚ÇÄ œÉ‚ÇÅ Œì e‚ÇÄ e‚ÇÅ œÑ œÜ Hmut Hok‚ÇÄ HœÑ
  cases Hmut
  case alloc‚ÇÅ v Hvalue =>
    cases HœÑ
    case alloc‚ÇÅ HœÑe =>
    cases Hvalue <;> try contradiction
    case lit n =>
      constructor
      . apply ok.cons _ _ Hok‚ÇÄ
      . cases HœÑe; apply typing.loc; simp
  case load‚ÇÅ l Hbinds =>
    cases HœÑ
    case load‚ÇÅ HœÑe =>
    constructor
    . apply Hok‚ÇÄ
    . have ‚ü®n, HEq‚ü© := ok.binds _ _ _ Hok‚ÇÄ Hbinds
      rw [‚Üê HEq]
      cases HœÑe; apply typing.lit
  case store‚ÇÅ l v Hvalue Hpatch =>
    cases HœÑ
    case store‚ÇÅ HœÑl HœÑr =>
    cases Hvalue <;> try contradiction
    case lit n =>
      constructor
      . apply ok.patch _ _ _ _ Hpatch Hok‚ÇÄ
      . cases HœÑl; cases HœÑr; apply typing.unit

theorem preservation.mutable :
  ‚àÄ œÉ‚ÇÄ œÉ‚ÇÅ Œì M e‚ÇÄ e‚ÇÅ œÑ œÜ,
    ctxùïÑ Œì.length M ‚Üí
    lc e‚ÇÄ ‚Üí
    head_mutable ‚ü®œÉ‚ÇÄ, e‚ÇÄ‚ü© ‚ü®œÉ‚ÇÅ, e‚ÇÅ‚ü© ‚Üí
    ok œÉ‚ÇÄ ‚Üí
    typing œÉ‚ÇÄ Œì ùüô M‚ü¶e‚ÇÄ‚üß œÑ œÜ ‚Üí
    ok œÉ‚ÇÅ ‚àß
    typing œÉ‚ÇÅ Œì ùüô M‚ü¶e‚ÇÅ‚üß œÑ œÜ :=
  by
  intros œÉ‚ÇÄ œÉ‚ÇÅ Œì M e‚ÇÄ e‚ÇÅ œÑ œÜ HM Hlc Hmut Hok‚ÇÄ HœÑ
  generalize HEqlvl : Œì.length = lvl
  rw [HEqlvl] at HM
  have HLe := head_mutable.store_grow _ _ _ _ Hmut
  induction HM generalizing Œì œÑ œÜ
  case hole => apply preservation.mutable.head _ _ _ _ _ _ _ Hmut Hok‚ÇÄ HœÑ
  case consùîπ B M HB HM IH =>
    have ‚ü®œÑùïñ, œÜ‚ÇÅ, œÜ‚ÇÇ, HEqœÜ, HœÑ, IHœÑB‚ü© := preservation.under_ctxùîπ _ _ _ _ _ _ HB HœÑ
    rw [HEqœÜ]
    have ‚ü®Hok‚ÇÅ, HœÑ‚ü© := IH _ _ _ HœÑ HEqlvl
    have HœÑ := IHœÑB _ ‚¶∞ _ _ HLe HœÑ
    constructor
    . apply Hok‚ÇÅ
    . apply HœÑ
  case cons‚Ñù R M HR HM IH =>
    rw [‚Üê HEqlvl] at HR IH
    have Hlc : lc M‚ü¶e‚ÇÄ‚üß := lc.under_ctxùïÑ _ _ _ _ HM Hlc
    have Hfv : fv M‚ü¶e‚ÇÅ‚üß ‚äÜ fv M‚ü¶e‚ÇÄ‚üß := fv.under_ctxùïÑ _ _ _ _ HM (head_mutable.fv_shrink _ _ _ _ Hok‚ÇÄ Hmut)
    cases HR
    case lamùïî =>
      cases HœÑ
      case lamùïî Hwbt HX Hclosed =>
        rw [identity.opening_closing _ _ _ Hlc] at HX
        cases HX
        case pure HX =>
          have ‚ü®Hok‚ÇÅ, HX‚ü© := IH (_ :: Œì) _ _ HX (by simp)
          constructor
          . apply Hok‚ÇÅ
          . apply typing.lamùïî
            . apply typing_reification.pure
              rw [identity.opening_closing _ _ _ (typing.regular _ _ _ _ _ _ HX)]
              apply HX
            . apply Hwbt
            . rw [‚Üê closed.under_closing]
              apply typing.closed_at_env _ _ _ _ _ _ HX
        case reify HX =>
          have ‚ü®Hok‚ÇÅ, HX‚ü© := IH (_ :: Œì) _ _ HX (by simp)
          constructor
          . apply Hok‚ÇÅ
          . apply typing.lamùïî
            . apply typing_reification.reify
              rw [identity.opening_closing _ _ _ (typing.regular _ _ _ _ _ _ HX)]
              apply HX
            . apply Hwbt
            . rw [‚Üê closed.under_closing]
              apply typing.closed_at_env _ _ _ _ _ _ HX
    case letsùïî =>
      cases HœÑ
      case letsùïî Hwbt Hb HX Hclosed =>
        rw [identity.opening_closing _ _ _ Hlc] at HX
        cases HX
        case pure HX =>
          have ‚ü®Hok‚ÇÅ, HX‚ü© := IH (_ :: Œì) _ _ HX (by simp)
          constructor
          . apply Hok‚ÇÅ
          . apply typing.letsùïî
            . apply typing.weakening.store _ _ _ _ _ _ _ HLe Hb
            . apply typing_reification.pure
              rw [identity.opening_closing _ _ _ (typing.regular _ _ _ _ _ _ HX)]
              apply HX
            . apply Hwbt
            . rw [‚Üê closed.under_closing]
              apply typing.closed_at_env _ _ _ _ _ _ HX
        case reify HX =>
          have ‚ü®Hok‚ÇÅ, HX‚ü© := IH (_ :: Œì) _ _ HX (by simp)
          constructor
          . apply Hok‚ÇÅ
          . apply typing.letsùïî
            . apply typing.weakening.store _ _ _ _ _ _ _ HLe Hb
            . apply typing_reification.reify
              rw [identity.opening_closing _ _ _ (typing.regular _ _ _ _ _ _ HX)]
              apply HX
            . apply Hwbt
            . rw [‚Üê closed.under_closing]
              apply typing.closed_at_env _ _ _ _ _ _ HX
    case run =>
      cases HœÑ
      case run Hclosed HX =>
        cases HX
        case pure HX =>
          have ‚ü®Hok‚ÇÅ, HX‚ü© := IH _ _ _ HX rfl
          constructor
          . apply Hok‚ÇÅ
          . apply typing.run
            . apply typing_reification.pure _ _ _ _ HX
            . rw [closed_iff_fv_empty] at Hclosed
              simp [Hclosed] at Hfv
              rw [closed_iff_fv_empty, Hfv]
        case reify HX =>
          have ‚ü®Hok‚ÇÅ, HX‚ü© := IH _ _ _ HX rfl
          constructor
          . apply Hok‚ÇÅ
          . apply typing.run
            . apply typing_reification.reify _ _ _ _ _ HX
            . rw [closed_iff_fv_empty] at Hclosed
              simp [Hclosed] at Hfv
              rw [closed_iff_fv_empty, Hfv]
