import CollapsingTowers.TwoLevelMut.SyntacticSoundness.Defs
import CollapsingTowers.TwoLevelMut.LogicalEquiv.World

-- (œÉ‚ÇÄ, œÉ‚ÇÅ) : ùì¶ ‚âú ‚àÄ ùì¶(l‚ÇÄ, l‚ÇÅ). œÉ‚ÇÄ(l‚ÇÅ) = œÉ‚ÇÄ(l‚ÇÅ)
@[simp]
def log_equiv_store (ùì¶ : World) (œÉ‚ÇÄ œÉ‚ÇÅ : Store) : Prop :=
  ‚àÄ l‚ÇÄ l‚ÇÅ, ùì¶ l‚ÇÄ l‚ÇÅ ‚Üí
  ‚àÉ n, binds l‚ÇÄ (.lit n) œÉ‚ÇÄ ‚àß binds l‚ÇÅ (.lit n) œÉ‚ÇÅ

mutual
@[simp]
def log_equiv_value : World ‚Üí Expr ‚Üí Expr ‚Üí Ty ‚Üí Prop
  --
  --
  -- ùì•‚ü¶‚Ñï‚üß ‚âú {(ùì¶, n, n) | n ‚àà ‚Ñï}
  | _, .lit n‚ÇÄ, .lit n‚ÇÅ, .nat => n‚ÇÄ = n‚ÇÅ
  --
  --
  -- ùì•‚ü¶œÑùïí ‚Üí œÑùïì‚üß ‚âú {
  --   (ùì¶‚ÇÄ, Œªx.e‚ÇÄ, Œªx.e‚ÇÅ) |
  --   ‚àÄ (ùì¶‚ÇÅ ‚äí ùì¶‚ÇÄ), (ùì¶‚ÇÅ, v‚ÇÄ, v‚ÇÅ) ‚àà ùì•‚ü¶œÑùïí‚üß. (ùì¶‚ÇÅ, Œªx.e‚ÇÄ @ v‚ÇÄ, Œªx.e‚ÇÅ @ v‚ÇÅ) ‚àà ùìî‚ü¶œÑùïì‚üß
  -- }
  | ùì¶‚ÇÄ, .lam e‚ÇÄ, .lam e‚ÇÅ, (.arrow œÑùïí œÑùïì ‚ä•) =>
    wf (.lam e‚ÇÄ) ‚àß
    wf (.lam e‚ÇÅ) ‚àß
    ‚àÄ ùì¶‚ÇÅ v‚ÇÄ v‚ÇÅ,
      (ùì¶‚ÇÅ ‚äí ùì¶‚ÇÄ) ‚Üí
      log_equiv_value ùì¶‚ÇÅ v‚ÇÄ v‚ÇÅ œÑùïí ‚Üí
      log_equiv_expr ùì¶‚ÇÅ (.app‚ÇÅ (.lam e‚ÇÄ) v‚ÇÄ) (.app‚ÇÅ (.lam e‚ÇÅ) v‚ÇÅ) œÑùïì
  --
  --
  -- ùì•‚ü¶unit‚üß ‚âú {(ùì¶, (), ())}
  | _, .unit, .unit, .unit => true
  --
  --
  -- ùì•‚ü¶ref ‚Ñï‚üß ‚âú {(ùì¶, l‚ÇÄ, l‚ÇÅ) | ùì¶(l‚ÇÄ, l‚ÇÅ)}
  | ùì¶, .loc l‚ÇÄ, .loc l‚ÇÅ, .ref .nat => ùì¶ l‚ÇÄ l‚ÇÅ
  | _, _, _, _ => false

-- ùìî‚ü¶œÑ‚üß ‚âú {
--   (ùì¶‚ÇÄ, e‚ÇÄ, e‚ÇÅ) |
--   ‚àÄ (œÉ‚ÇÄ, œÉ‚ÇÅ) : ùì¶‚ÇÄ.
--   ‚àÉ œâ‚ÇÄ, œâ‚ÇÅ, v‚ÇÄ, v‚ÇÅ, (ùì¶‚ÇÅ ‚äí ùì¶‚ÇÄ).
--   ‚ü®œÉ‚ÇÄ, e‚ÇÄ‚ü© ‚áù* ‚ü®œâ‚ÇÄ, v‚ÇÄ‚ü© ‚àß
--   ‚ü®œÉ‚ÇÅ, e‚ÇÅ‚ü© ‚áù* ‚ü®œâ‚ÇÅ, v‚ÇÅ‚ü© ‚àß
--   (œâ‚ÇÄ, œâ‚ÇÅ) : ùì¶‚ÇÅ ‚àß
--   (ùì¶‚ÇÅ, v‚ÇÄ, v‚ÇÅ) ‚àà ùì•‚ü¶œÑ‚üß
-- }
@[simp]
def log_equiv_expr (ùì¶‚ÇÄ : World) (e‚ÇÄ e‚ÇÅ : Expr) (œÑ : Ty) : Prop :=
  ‚àÄ œÉ‚ÇÄ œÉ‚ÇÅ,
    log_equiv_store ùì¶‚ÇÄ œÉ‚ÇÄ œÉ‚ÇÅ ‚Üí
    ‚àÉ ùì¶‚ÇÅ œâ‚ÇÄ œâ‚ÇÅ v‚ÇÄ v‚ÇÅ,
      (ùì¶‚ÇÅ ‚äí ùì¶‚ÇÄ) ‚àß
      (‚ü®œÉ‚ÇÄ, e‚ÇÄ‚ü© ‚áù* ‚ü®œâ‚ÇÄ, v‚ÇÄ‚ü©) ‚àß
      (‚ü®œÉ‚ÇÅ, e‚ÇÅ‚ü© ‚áù* ‚ü®œâ‚ÇÅ, v‚ÇÅ‚ü©) ‚àß
      log_equiv_store ùì¶‚ÇÅ œâ‚ÇÄ œâ‚ÇÅ ‚àß
      log_equiv_value ùì¶‚ÇÅ v‚ÇÄ v‚ÇÅ œÑ
end

inductive log_equiv_env : World ‚Üí Subst ‚Üí Subst ‚Üí TEnv ‚Üí Prop where
  | nil : ‚àÄ ùì¶, log_equiv_env ùì¶ [] [] ‚¶∞
  | cons : ‚àÄ ùì¶ v‚ÇÄ Œ≥‚ÇÄ v‚ÇÅ Œ≥‚ÇÅ œÑ Œì,
    log_equiv_value ùì¶ v‚ÇÄ v‚ÇÅ œÑ ‚Üí
    log_equiv_env ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì ‚Üí
    log_equiv_env ùì¶ (v‚ÇÄ :: Œ≥‚ÇÄ) (v‚ÇÅ :: Œ≥‚ÇÅ) ((œÑ, ùüö) :: Œì)

-- Œì ‚äß e‚ÇÄ ‚âàùëôùëúùëî e‚ÇÅ : œÑ ‚âú
--   Œì ‚ä¢ e‚ÇÄ : œÑ ‚àß
--   Œì ‚ä¢ e‚ÇÅ : œÑ ‚àß
--   ‚àÄ ùì¶, (ùì¶, Œ≥‚ÇÄ, Œ≥‚ÇÅ) ‚àà ùìñ‚ü¶Œì‚üß. (ùì¶, Œ≥‚ÇÄ(e‚ÇÄ), Œ≥‚ÇÅ(e‚ÇÅ)) ‚àà ùìî‚ü¶œÑ‚üß
@[simp]
def log_equiv (Œì : TEnv) (e‚ÇÄ e‚ÇÅ : Expr) (œÑ : Ty) : Prop :=
  typing œµ Œì ùüö e‚ÇÄ œÑ ‚ä• ‚àß
  typing œµ Œì ùüö e‚ÇÅ œÑ ‚ä• ‚àß
  ‚àÄ ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ,
    log_equiv_env ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì ‚Üí
    log_equiv_expr ùì¶ (msubst Œ≥‚ÇÄ e‚ÇÄ) (msubst Œ≥‚ÇÅ e‚ÇÅ) œÑ

lemma log_equiv_env.length :
  ‚àÄ ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì,
    log_equiv_env ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì ‚Üí
    Œ≥‚ÇÄ.length = Œì.length ‚àß
    Œ≥‚ÇÅ.length = Œì.length :=
  by
  intros ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì H
  induction H
  case nil => simp
  case cons IH =>
    constructor
    . simp; apply IH.left
    . simp; apply IH.right

lemma log_equiv_env.binds_log_equiv_value :
  ‚àÄ ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì x œÑ,
    log_equiv_env ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì ‚Üí
    binds x (œÑ, ùüö) Œì ‚Üí
    log_equiv_value ùì¶ (msubst Œ≥‚ÇÄ (.fvar x)) (msubst Œ≥‚ÇÅ (.fvar x)) œÑ :=
  by
  intros ùì¶ Œ≥‚ÇÄ Œ≥‚ÇÅ Œì x œÑ HsemŒì Hbinds
  induction HsemŒì
  case nil => nomatch Hbinds
  case cons v‚ÇÄ Œ≥‚ÇÄ v‚ÇÅ Œ≥‚ÇÅ œÑ Œì Hsem_value HsemŒì IH =>
    have ‚ü®HEq‚ÇÄ, HEq‚ÇÅ‚ü© := log_equiv_env.length _ _ _ _ HsemŒì
    simp [HEq‚ÇÄ, HEq‚ÇÅ]
    by_cases HEqx : Œì.length = x
    . simp [if_pos HEqx]
      simp [if_pos HEqx] at Hbinds
      rw [‚Üê Hbinds, identity.msubst, identity.msubst]
      apply Hsem_value
      admit
      admit
    . simp [if_neg HEqx]
      simp [if_neg HEqx] at Hbinds
      apply IH; apply Hbinds
