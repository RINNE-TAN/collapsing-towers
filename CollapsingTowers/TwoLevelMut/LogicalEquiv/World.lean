import Mathlib.Data.Nat.Basic

abbrev World :=
  ‚Ñï ‚Üí ‚Ñï ‚Üí Prop

@[simp]
def World.dom (ùì¶ : World) : Set ‚Ñï := {x | ‚àÉ y, ùì¶ x y}

@[simp]
def World.range (ùì¶ : World) : Set ‚Ñï := {y | ‚àÉ x, ùì¶ x y}

@[simp]
def World.empty : World :=
  fun _ _ => false

@[simp]
def World.ext (ùì¶ : World) (l‚ÇÄ l‚ÇÅ : ‚Ñï) : World :=
  fun x y => (x = l‚ÇÄ ‚àß y = l‚ÇÅ) ‚à® ùì¶ x y

@[simp]
def World.future (ùì¶‚ÇÄ ùì¶‚ÇÅ : World) : Prop :=
  ‚àÄ x y, ùì¶‚ÇÄ x y ‚Üí ùì¶‚ÇÅ x y

notation:max ùì¶‚ÇÅ " ‚äí " ùì¶‚ÇÄ  => World.future ùì¶‚ÇÄ ùì¶‚ÇÅ

@[simp]
lemma World.future.refl : ‚àÄ ùì¶, ùì¶ ‚äí ùì¶ := by simp

@[simp]
lemma World.future.ext : ‚àÄ ùì¶ l‚ÇÄ l‚ÇÅ, (World.ext ùì¶ l‚ÇÄ l‚ÇÅ) ‚äí ùì¶ :=
  by
  intros ùì¶ l‚ÇÄ l‚ÇÅ x y Hrel
  right; apply Hrel

@[simp]
lemma World.future.trans :
  ‚àÄ ùì¶‚ÇÄ ùì¶‚ÇÅ ùì¶‚ÇÇ,
    (ùì¶‚ÇÇ ‚äí ùì¶‚ÇÅ) ‚Üí
    (ùì¶‚ÇÅ ‚äí ùì¶‚ÇÄ) ‚Üí
    (ùì¶‚ÇÇ ‚äí ùì¶‚ÇÄ) :=
  by
  intros ùì¶‚ÇÄ ùì¶‚ÇÅ ùì¶‚ÇÇ Hfuture‚ÇÅ Hfuture‚ÇÄ x y Hrel‚ÇÄ
  apply Hfuture‚ÇÅ; apply Hfuture‚ÇÄ
  apply Hrel‚ÇÄ

@[simp]
def PartialBijection {Œ± Œ≤} (r : Œ± ‚Üí Œ≤ ‚Üí Prop): Prop :=
  (‚àÄ x y z, r x y ‚Üí r x z ‚Üí y = z) ‚àß
  (‚àÄ x y z, r x z ‚Üí r y z ‚Üí x = y)

lemma PartialBijection.ext :
  ‚àÄ ùì¶ l‚ÇÄ l‚ÇÅ,
    PartialBijection ùì¶ ‚Üí
    l‚ÇÄ ‚àâ World.dom ùì¶ ‚Üí
    l‚ÇÅ ‚àâ World.range ùì¶ ‚Üí
    PartialBijection (World.ext ùì¶ l‚ÇÄ l‚ÇÅ) :=
  by
  intros ùì¶ l‚ÇÄ l‚ÇÅ Hpb Hdom Hrange
  constructor
  . intros x y z Hrel‚ÇÄ Hrel‚ÇÅ
    match Hrel‚ÇÄ, Hrel‚ÇÅ with
    | .inl HEq‚ÇÄ, .inl HEq‚ÇÅ =>
      omega
    | .inl HEq‚ÇÄ, .inr Hrel‚ÇÅ =>
      exfalso; apply Hdom
      rw [HEq‚ÇÄ.left] at Hrel‚ÇÅ
      constructor; apply Hrel‚ÇÅ
    | .inr Hrel‚ÇÄ, .inl HEq‚ÇÅ =>
      exfalso; apply Hdom
      rw [HEq‚ÇÅ.left] at Hrel‚ÇÄ
      constructor; apply Hrel‚ÇÄ
    | .inr Hrel‚ÇÄ, .inr Hrel‚ÇÅ =>
      apply Hpb.left
      apply Hrel‚ÇÄ; apply Hrel‚ÇÅ
  . intros x y z Hrel‚ÇÄ Hrel‚ÇÅ
    match Hrel‚ÇÄ, Hrel‚ÇÅ with
    | .inl HEq‚ÇÄ, .inl HEq‚ÇÅ =>
      omega
    | .inl HEq‚ÇÄ, .inr Hrel‚ÇÅ =>
      exfalso; apply Hrange
      rw [HEq‚ÇÄ.right] at Hrel‚ÇÅ
      constructor; apply Hrel‚ÇÅ
    | .inr Hrel‚ÇÄ, .inl HEq‚ÇÅ =>
      exfalso; apply Hrange
      rw [HEq‚ÇÅ.right] at Hrel‚ÇÄ
      constructor; apply Hrel‚ÇÄ
    | .inr Hrel‚ÇÄ, .inr Hrel‚ÇÅ =>
      apply Hpb.right
      apply Hrel‚ÇÄ; apply Hrel‚ÇÅ
