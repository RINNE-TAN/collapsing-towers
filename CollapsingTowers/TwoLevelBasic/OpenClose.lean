
import Mathlib.Data.Set.Insert
import CollapsingTowers.TwoLevelBasic.Syntax
-- Definitions
@[simp]
def subst (x : ‚Ñï) (v : Expr) : Expr ‚Üí Expr
  | .bvar i => .bvar i
  | .fvar y => if x = y then v else .fvar y
  | .lam e => .lam (subst x v e)
  | .lift e => .lift (subst x v e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (subst x v f) (subst x v arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (subst x v f) (subst x v arg)
  | .lit n => .lit n
  | .run e => .run (subst x v e)
  | .code e => .code (subst x v e)
  | .reflect e => .reflect (subst x v e)
  | .lamùïî e => .lamùïî (subst x v e)
  | .lets b e => .lets (subst x v b) (subst x v e)
  | .letùïî b e => .letùïî (subst x v b) (subst x v e)

-- opening i t1 t2 = [i ‚Üí t1]t2
@[simp]
def opening (i : ‚Ñï) (x : Expr) : Expr ‚Üí Expr
  | .bvar j => if j = i then x else .bvar j
  | .fvar x => .fvar x
  | .lam e => .lam (opening (i + 1) x e)
  | .lift e => .lift (opening i x e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (opening i x f) (opening i x arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (opening i x f) (opening i x arg)
  | .lit n => .lit n
  | .run e => .run (opening i x e)
  | .code e => .code (opening i x e)
  | .reflect e => .reflect (opening i x e)
  | .lamùïî e => .lamùïî (opening (i + 1) x e)
  | .lets b e => .lets (opening i x b) (opening (i + 1) x e)
  | .letùïî b e => .letùïî (opening i x b) (opening (i + 1) x e)

@[simp]
def open‚ÇÄ (x : ‚Ñï) : Expr ‚Üí Expr :=
  opening 0 (.fvar x)

@[simp]
def open_subst (tgt : Expr) (within : Expr) :=
  opening 0 tgt within

@[simp]
def closing (i : ‚Ñï) (x : ‚Ñï) : Expr ‚Üí Expr
  | .bvar j => .bvar j
  | .fvar y => if x == y then .bvar i else .fvar y
  | .lam e => .lam (closing (i + 1) x e)
  | .lift e => .lift (closing i x e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (closing i x f) (closing i x arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (closing i x f) (closing i x arg)
  | .lit n => .lit n
  | .run e => .run (closing i x e)
  | .code e => .code (closing i x e)
  | .reflect e => .reflect (closing i x e)
  | .lamùïî e => .lamùïî (closing (i + 1) x e)
  | .lets b e => .lets (closing i x b) (closing (i + 1) x e)
  | .letùïî b e => .letùïî (closing i x b) (closing (i + 1) x e)

@[simp]
def close‚ÇÄ : ‚Ñï ‚Üí Expr ‚Üí Expr :=
  closing 0

-- closedness condition for free variables
@[simp]
def closed_at (e : Expr) (f : ‚Ñï) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar x => x < f
  | .lam e => closed_at e f
  | .lift e => closed_at e f
  | .app‚ÇÅ e1 e2 => closed_at e1 f ‚àß closed_at e2 f
  | .app‚ÇÇ e1 e2 => closed_at e1 f ‚àß closed_at e2 f
  | .lit _ => true
  | .run e => closed_at e f
  | .code e => closed_at e f
  | .reflect e => closed_at e f
  | .lamùïî e => closed_at e f
  | .lets b e => closed_at b f ‚àß closed_at e f
  | .letùïî b e => closed_at b f ‚àß closed_at e f

@[simp]
def closed e := closed_at e 0

-- closedness condition for bound variables
@[simp]
def lc_at (e : Expr) (b : ‚Ñï) : Prop :=
  match e with
  | .bvar x => x < b
  | .fvar _ => true
  | .lam e => lc_at e (b + 1)
  | .lift e => lc_at e b
  | .app‚ÇÅ e1 e2 => lc_at e1 b ‚àß lc_at e2 b
  | .app‚ÇÇ e1 e2 => lc_at e1 b ‚àß lc_at e2 b
  | .lit _ => true
  | .run e => lc_at e b
  | .code e => lc_at e b
  | .reflect e => lc_at e b
  | .lamùïî e => lc_at e (b + 1)
  | .lets e1 e2 => lc_at e1 b ‚àß lc_at e2 (b + 1)
  | .letùïî e1 e2 => lc_at e1 b ‚àß lc_at e2 (b + 1)

@[simp]
def lc e := lc_at e 0

@[simp]
def mapingùïî (e : Expr) (i : ‚Ñï) : Expr :=
  match e with
  | .bvar j => if j == i then (.code (.bvar i)) else .bvar j
  | .fvar x => .fvar x
  | .lam e => .lam (mapingùïî e (i + 1))
  | .lift e => .lift (mapingùïî e i)
  | .app‚ÇÅ f arg => .app‚ÇÅ (mapingùïî f i) (mapingùïî arg i)
  | .app‚ÇÇ f arg => .app‚ÇÇ (mapingùïî f i) (mapingùïî arg i)
  | .lit n => .lit n
  | .run e => .run (mapingùïî e i)
  | .code e => .code (mapingùïî e i)
  | .reflect e => .reflect (mapingùïî e i)
  | .lamùïî e => .lamùïî (mapingùïî e (i + 1))
  | .lets b e => .lets (mapingùïî b i) (mapingùïî e (i + 1))
  | .letùïî b e => .letùïî (mapingùïî b i) (mapingùïî e (i + 1))

@[simp]
def mapùïî‚ÇÄ (e : Expr) : Expr := mapingùïî e 0

@[simp]
def fv : Expr ‚Üí Set ‚Ñï
  | .bvar _ => ‚àÖ
  | .fvar x => { x }
  | .lam e => fv e
  | .lift e => fv e
  | .app‚ÇÅ f arg => fv f ‚à™ fv arg
  | .app‚ÇÇ f arg => fv f ‚à™ fv arg
  | .lit _ => ‚àÖ
  | .run e => fv e
  | .code e => fv e
  | .reflect e => fv e
  | .lamùïî e => fv e
  | .lets b e => fv b ‚à™ fv e
  | .letùïî b e => fv b ‚à™ fv e

@[simp]
def wf (e : Expr) : Prop := lc e ‚àß closed e

abbrev Subst :=
  List Expr

@[simp]
def multi_subst : Subst ‚Üí Expr ‚Üí Expr
  | [], e => e
  | v :: Œ≥, e => multi_subst Œ≥ (subst Œ≥.length v e)

@[simp]
def multi_wf : Subst ‚Üí Prop
  | [] => true
  | v :: Œ≥ => wf v ‚àß multi_wf Œ≥

-- Properties
lemma subst_intro : ‚àÄ x e v i, closed_at e x ‚Üí subst x v (opening i (.fvar x) e) = opening i v e :=
  by
  intros _ e _ i Hclosed
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [HEq]
    . simp [if_neg HEq]
  | fvar y =>
    simp at *; omega
  | lam _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp

lemma subst_closed_id : ‚àÄ x e v, closed_at e x ‚Üí subst x v e = e :=
  by
  intros x e v He
  induction e with
  | bvar => simp
  | fvar => simp at *; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | lets _ _ IHb IH
  | letùïî _ _ IHb IH =>
    simp; constructor
    apply IHb; apply He.left
    apply IH; apply He.right
  | lit => simp

lemma openSubst_intro : ‚àÄ x e v, closed_at e x ‚Üí subst x v (open‚ÇÄ x e) = open_subst v e :=
  by
  intros _ _ _ Hclosed
  apply subst_intro
  apply Hclosed

lemma lc_inc: ‚àÄ t i j,
    lc_at t i ‚Üí i ‚â§ j ‚Üí
    lc_at t j := by
  intros t i j Hclose HLe
  induction t generalizing i j with
  | bvar => simp at *; omega
  | fvar => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply Hclose; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    apply And.intro
    . apply IH‚ÇÄ; apply Hclose.left; omega
    . apply IH‚ÇÅ; apply Hclose.right; omega
  | lit => simp

lemma closed_inc : ‚àÄ x y e, closed_at e x ‚Üí x ‚â§ y ‚Üí closed_at e y :=
  by
  intros x y e Hclose Hxy
  induction e with
  | bvar j => simp
  | fvar z => simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclose

lemma subst_lc_at : ‚àÄ x e v i, lc_at v i ‚Üí lc_at e i ‚Üí lc_at (subst x v e) i :=
  by
  intros x e v i Hv He
  induction e generalizing i with
  | bvar => apply He
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply lc_inc; apply Hv; omega; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | lets _ _ IHb IH
  | letùïî _ _ IHb IH =>
    constructor
    apply IHb; apply Hv; apply He.left
    apply IH; apply lc_inc; apply Hv; omega; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit => simp

lemma subst_closed_at : ‚àÄ x e v y, closed_at v y ‚Üí closed_at e y ‚Üí closed_at (subst x v e) y :=
  by
  intros x e v y Hv He
  induction e generalizing y with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; apply He
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply Hv; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit => simp

lemma subst_closed_at_dec : ‚àÄ x e v, closed_at v x ‚Üí closed_at e (x + 1) ‚Üí closed_at (subst x v e) x :=
  by
  intros x e v Hv He
  induction e with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [‚Üê HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp at *; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply He
  | lit => simp

lemma open_lc : ‚àÄ i x e, lc_at (opening i (.fvar x) e) i ‚Üî lc_at e (i + 1) :=
  by
  intros i x e
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; constructor
      . omega
      . simp
    . rw [if_neg HEq]; simp; omega
  | fvar => simp
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hlc
      constructor
      apply (IH‚ÇÄ _).mp; apply Hlc.left
      apply (IH‚ÇÅ _).mp; apply Hlc.right
    . intro Hlc
      constructor
      apply (IH‚ÇÄ _).mpr; apply Hlc.left
      apply (IH‚ÇÅ _).mpr; apply Hlc.right

lemma close_closed : ‚àÄ e x i, closed_at e (x + 1) ‚Üî closed_at (closing i x e) x :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp; omega
  | bvar => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hclose; constructor
      apply (IH‚ÇÄ _).mp; apply Hclose.left
      apply (IH‚ÇÅ _).mp; apply Hclose.right
    . intro Hclose; constructor
      apply (IH‚ÇÄ _).mpr; apply Hclose.left
      apply (IH‚ÇÅ _).mpr; apply Hclose.right
  | lit => simp

lemma open_subst_closed : ‚àÄ x e v i, closed_at e x ‚Üí closed_at v x ‚Üí closed_at (opening i v e) x :=
  by
  intros x e v i He Hv
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; apply Hv
    . rw [if_neg HEq]; simp
  | fvar => apply He
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right

lemma open_closed : ‚àÄ e x i, closed_at e x ‚Üí closed_at (opening i (.fvar x) e) (x + 1) :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y => simp; omega
  | bvar j =>
    by_cases HEq : j = i
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit => simp

lemma close_lc : ‚àÄ e x i j, j < i ‚Üí lc_at e i ‚Üí lc_at (closing j x e) i :=
  by
  intros e x i j Hlt
  induction e generalizing i j with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | bvar => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; omega; apply Hclose.left
    apply IH‚ÇÅ; omega; apply Hclose.right
  | lit => simp

lemma lc_opening_id : ‚àÄ e v i, lc_at e i ‚Üí opening i v e = e :=
  by
  intros e v i Hlc
  induction e generalizing i with
  | fvar y => simp
  | bvar j => simp at *; omega
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH =>
    simp; apply IH; apply Hlc
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left
    apply IH‚ÇÅ; apply Hlc.right
  | lit => simp

lemma open_close_id : ‚àÄ i e x, lc_at e i ‚Üí opening i (.fvar x) (closing i x e) = e :=
  by
  intros i e x Hlc
  induction e generalizing i with
  | bvar j =>
    simp
    intro HEq
    rw [HEq] at Hlc
    simp at Hlc
  | fvar y =>
    simp
    by_cases HEq : x = y
    . rw [HEq]; simp
    . rw [if_neg HEq]; simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hlc
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left
    apply IH‚ÇÅ; apply Hlc.right
  | lit => rfl

lemma open_close_id‚ÇÄ : ‚àÄ e x, lc e ‚Üí open‚ÇÄ x (close‚ÇÄ x e) = e := by apply open_close_id

lemma close_open_id : ‚àÄ i e x, closed_at e x ‚Üí closing i x (opening i (.fvar x) e) = e :=
  by
  intros i e x Hclose
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp; rw [if_pos HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | fvar y => simp at *; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclose
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit => rfl

lemma close_open_id‚ÇÄ : ‚àÄ e x, closed_at e x ‚Üí close‚ÇÄ x (open‚ÇÄ x e) = e := by apply close_open_id

lemma subst_opening_comm :
    ‚àÄ x v‚ÇÄ v‚ÇÅ e i, lc_at v‚ÇÄ i ‚Üí subst x v‚ÇÄ (opening i v‚ÇÅ e) = opening i (subst x v‚ÇÄ v‚ÇÅ) (subst x v‚ÇÄ e) :=
  by
  intro x v‚ÇÄ v‚ÇÅ e i Hlc
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp; rw [if_pos HEq]; simp; omega
    . simp; rw [if_neg HEq, if_neg HEq]; simp
  | fvar z =>
    by_cases HEq : x = z
    . simp; rw [if_pos HEq]; rw [lc_opening_id]; apply Hlc
    . simp; rw [if_neg HEq]; simp
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc
    apply IH‚ÇÅ; apply Hlc
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc
    apply IH‚ÇÅ; apply lc_inc; apply Hlc; omega
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hlc
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH =>
    simp; apply IH; apply lc_inc; apply Hlc; omega

lemma subst_open‚ÇÄ_comm : ‚àÄ x y e v, x ‚â† y ‚Üí lc v ‚Üí subst x v (open‚ÇÄ y e) = open‚ÇÄ y (subst x v e) := by
  intros x y e v HNe Hlc
  rw [open‚ÇÄ]; rw [subst_opening_comm]
  simp [if_neg HNe]; apply Hlc

lemma subst_comm : ‚àÄ x y v‚ÇÄ v‚ÇÅ e, x ‚â† y ‚Üí closed v‚ÇÄ ‚Üí closed v‚ÇÅ ‚Üí subst x v‚ÇÄ (subst y v‚ÇÅ e) = subst y v‚ÇÅ (subst x v‚ÇÄ e) :=
  by
  intro x y v‚ÇÄ v‚ÇÅ e HNe Hclose‚ÇÄ Hclose‚ÇÅ
  induction e with
  | bvar j => simp
  | fvar z =>
    by_cases HEqx : x = z
    . simp [if_pos HEqx]
      by_cases HEqy : y = z
      . simp [if_pos HEqy]
        omega
      . simp [if_neg HEqy, if_pos HEqx]
        rw [subst_closed_id]
        apply closed_inc; apply Hclose‚ÇÄ; omega
    . simp [if_neg HEqx]
      by_cases HEqy : y = z
      . simp [if_pos HEqy]
        rw [subst_closed_id]
        apply closed_inc; apply Hclose‚ÇÅ; omega
      . simp [if_neg HEqy, if_neg HEqx]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply IH‚ÇÅ
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH
  | lit => simp

example : mapùïî‚ÇÄ (.app‚ÇÅ (.bvar 0) (.lam (.bvar 1))) = .app‚ÇÅ (.code (.bvar 0)) (.lam (.code (.bvar 1))) := by simp

lemma mapingùïî_intro :
    ‚àÄ x e i, closed_at e x ‚Üí closing i x (subst x (.code (.fvar x)) (opening i (.fvar x) e)) = mapingùïî e i :=
  by
  intros x e i Hclose
  induction e generalizing i with
  | bvar j => by_cases HEq : j = i; rw [HEq]; simp; simp [if_neg HEq]
  | fvar y => simp at *; by_cases HEq : x = y; omega; rw [if_neg HEq]; simp; apply HEq
  | lam _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | run _ IH =>
    simp at *; apply IH; apply Hclose
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at *; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit => simp

lemma mapùïî‚ÇÄ_intro : ‚àÄ x e, closed_at e x ‚Üí close‚ÇÄ x (subst x (.code (.fvar x)) (open‚ÇÄ x e)) = mapùïî‚ÇÄ e :=
  by
  intro _ _ Hclose
  apply mapingùïî_intro
  apply Hclose

lemma mapingùïî_closed : ‚àÄ x e i, closed_at e x ‚Üí closed_at (mapingùïî e i) x :=
  by
  intros x e i He
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; apply He
    . rw [if_neg HEq]; simp
  | fvar => apply He
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right

lemma fv_if_closed_at :
  ‚àÄ x y e,
    closed_at e x ‚Üí
    y ‚â• x ‚Üí
    y ‚àâ fv e :=
  by
  intros x y e Hclose HGe HIn
  induction e with
  | bvar => nomatch HIn
  | fvar z =>
    simp at *
    omega
  | lit => nomatch HIn
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply Hclose; apply HIn
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    cases HIn
    case inl H‚ÇÄ =>
      apply IH‚ÇÄ; apply Hclose.left; apply H‚ÇÄ
    case inr H‚ÇÅ =>
      apply IH‚ÇÅ; apply Hclose.right; apply H‚ÇÅ

lemma fv_opening : ‚àÄ i v e, fv (opening i v e) ‚äÜ fv v ‚à™ fv e :=
  by
  intros i v e
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]
    . rw [if_neg HEq]; simp
  | fvar z => simp
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply Set.Subset.trans; apply IH‚ÇÄ
    apply Set.union_subset_union; rfl; simp
    apply Set.Subset.trans; apply IH‚ÇÅ
    apply Set.union_subset_union; rfl; simp

lemma fv_open‚ÇÄ :
  ‚àÄ x y e,
    x ‚àâ fv e ‚Üí
    x ‚â† y ‚Üí
    x ‚àâ fv (open‚ÇÄ y e) :=
  by
  intros x y e HNotIn HNe HIn
  apply HNotIn
  have H : fv (open‚ÇÄ y e) ‚äÜ { y } ‚à™ fv e := by apply fv_opening
  rw [Set.subset_def] at H
  cases (H x HIn)
  case inl => simp at *; omega
  case inr => assumption

lemma fv_closed_at_dec :
  ‚àÄ e x,
    closed_at e (x + 1) ‚Üí
    x ‚àâ fv e ‚Üí
    closed_at e x :=
  by
  intros e x Hclose HFv
  induction e with
  | bvar j => simp
  | fvar y => simp at *; omega
  | lit => simp
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH =>
    apply IH; apply Hclose; apply HFv
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply Hclose.left; apply HFv.left
    apply IH‚ÇÅ; apply Hclose.right; apply HFv.right

lemma fv_mapingùïî : ‚àÄ e i, fv e = fv (mapingùïî e i) :=
  by
  intros e i
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; rfl
    . rw [if_neg HEq]; rfl
  | fvar => rfl
  | lit => rfl
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH => apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ]

lemma fv_empty_iff_closed : ‚àÄ e, fv e = ‚àÖ ‚Üî closed e :=
  by
  intro e
  induction e with
  | bvar => simp
  | fvar => simp
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro HFv; simp at HFv
      constructor
      apply IH‚ÇÄ.mp; apply HFv.left
      apply IH‚ÇÅ.mp; apply HFv.right
    . intro Hclose
      simp; constructor
      apply IH‚ÇÄ.mpr; apply Hclose.left
      apply IH‚ÇÅ.mpr; apply Hclose.right

lemma fv_closing : ‚àÄ i x e, fv (closing i x e) = fv e \ { x } :=
  by
  intros i x e
  induction e generalizing i with
  | bvar => simp
  | fvar y =>
    simp; by_cases HEq : x = y
    . rw [if_pos HEq]
      rw [HEq]; simp
    . rw [if_neg HEq]
      rw [Set.diff_singleton_eq_self]
      rfl; apply HEq
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ]
    rw [Set.union_diff_distrib]

lemma fv_subset_closed :
  ‚àÄ e‚ÇÄ e‚ÇÅ x,
    fv e‚ÇÅ ‚äÜ fv e‚ÇÄ ‚Üí
    closed_at e‚ÇÄ x ‚Üí
    closed_at e‚ÇÅ x :=
  by
  intros e‚ÇÄ e‚ÇÅ x HFv Hclose
  induction e‚ÇÅ with
  | bvar| lit => simp
  | fvar y =>
    simp at *
    have _ : ¬¨y ‚â• x := by
      intro HGe
      apply fv_if_closed_at; apply Hclose
      apply HGe; apply HFv
    omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply HFv
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply HFv.left
    apply IH‚ÇÅ; apply HFv.right

@[simp]
lemma multi_subst_fvar: ‚àÄ Œ≥ x, x ‚â• Œ≥.length ‚Üí multi_subst Œ≥ (.fvar x) = .fvar x :=
  by
  intros Œ≥ x HGe
  induction Œ≥
  case nil => rfl
  case cons tail IH =>
    simp at HGe
    by_cases HEq : tail.length = x
    . omega
    . simp [if_neg HEq]
      apply IH; omega

@[simp]
lemma multi_subst_app‚ÇÅ : ‚àÄ Œ≥ f arg, multi_subst Œ≥ (.app‚ÇÅ f arg) = .app‚ÇÅ (multi_subst Œ≥ f) (multi_subst Œ≥ arg) :=
  by
  intros Œ≥ f arg
  induction Œ≥ generalizing f arg
  case nil => rfl
  case cons IH => simp [IH]

@[simp]
lemma multi_subst_lam : ‚àÄ Œ≥ e, multi_subst Œ≥ (.lam e) = .lam (multi_subst Œ≥ e) :=
  by
  intros Œ≥ e
  induction Œ≥ generalizing e
  case nil => rfl
  case cons IH => simp [IH]

@[simp]
lemma multi_subst_lit : ‚àÄ Œ≥ n, multi_subst Œ≥ (.lit n) = .lit n :=
  by
  intros Œ≥ n
  induction Œ≥
  case nil => rfl
  case cons IH => simp [IH]

@[simp]
lemma multi_subst_lets : ‚àÄ Œ≥ b e, multi_subst Œ≥ (.lets b e) = .lets (multi_subst Œ≥ b) (multi_subst Œ≥ e) :=
  by
  intros Œ≥ b e
  induction Œ≥ generalizing b e
  case nil => rfl
  case cons IH => simp [IH]

lemma multi_subst_lc_at : ‚àÄ i Œ≥ e, multi_wf Œ≥ ‚Üí lc_at e i ‚Üí lc_at (multi_subst Œ≥ e) i :=
  by
  intros i Œ≥ e HŒ≥ He
  induction Œ≥ generalizing e
  case nil => apply He
  case cons IH =>
    apply IH; apply HŒ≥.right
    apply subst_lc_at; apply lc_inc
    apply HŒ≥.left.left; omega; apply He

lemma multi_subst_comm : ‚àÄ x Œ≥ v e, x ‚â• Œ≥.length ‚Üí closed v ‚Üí  multi_wf Œ≥ ‚Üí subst x v (multi_subst Œ≥ e) = multi_subst Œ≥ (subst x v e) :=
  by
  intro x Œ≥ v e HGe Hclose HŒ≥
  induction Œ≥ generalizing e
  case nil => simp
  case cons IH =>
    simp at HGe
    rw [multi_subst, multi_subst, IH, subst_comm]
    omega; apply Hclose; apply HŒ≥.left.right
    omega; apply HŒ≥.right

lemma multi_subst_closed : ‚àÄ Œ≥ e, multi_wf Œ≥ ‚Üí closed_at e Œ≥.length ‚Üí closed (multi_subst Œ≥ e) :=
  by
  intros Œ≥ e HŒ≥ He
  induction Œ≥ generalizing e
  case nil => apply He
  case cons IH =>
    apply IH; apply HŒ≥.right
    apply subst_closed_at_dec; apply closed_inc; apply HŒ≥.left.right; omega
    apply He

lemma multi_subst_opening_comm :
    ‚àÄ Œ≥ v e i, multi_wf Œ≥ ‚Üí multi_subst Œ≥ (opening i v e) = opening i (multi_subst Œ≥ v) (multi_subst Œ≥ e) :=
    by
    intros Œ≥ v e i HŒ≥
    induction Œ≥ generalizing e v
    case nil => rfl
    case cons IH =>
      rw [multi_subst, subst_opening_comm, IH]
      rfl; apply HŒ≥.right
      apply lc_inc; apply HŒ≥.left.left; omega

lemma multi_subst_open‚ÇÄ_comm :
    ‚àÄ Œ≥ e x, x ‚â• Œ≥.length ‚Üí multi_wf Œ≥ ‚Üí multi_subst Œ≥ (opening 0 (.fvar x) e) = opening 0 (.fvar x) (multi_subst Œ≥ e) :=
  by
  intros Œ≥ e x HGe HŒ≥
  rw [multi_subst_opening_comm, multi_subst_fvar]
  apply HGe; apply HŒ≥

lemma multi_subst_open_subst_comm :
    ‚àÄ Œ≥ v e, multi_wf Œ≥ ‚Üí multi_subst Œ≥ (open_subst v e) = open_subst (multi_subst Œ≥ v) (multi_subst Œ≥ e) :=
  by
  intros Œ≥ v e
  apply multi_subst_opening_comm

lemma multi_subst_closed_id : ‚àÄ Œ≥ e, closed e ‚Üí multi_subst Œ≥ e = e :=
  by
  intro Œ≥ e Hclose
  induction Œ≥ generalizing e
  case nil => rfl
  case cons IH =>
    rw [multi_subst, IH, subst_closed_id]
    apply closed_inc; apply Hclose; omega
    rw [subst_closed_id]; apply Hclose
    apply closed_inc; apply Hclose; omega
