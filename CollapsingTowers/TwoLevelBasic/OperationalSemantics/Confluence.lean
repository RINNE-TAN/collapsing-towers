import CollapsingTowers.TwoLevelBasic.OperationalSemantics.Deterministic

lemma value_ctxùïÑ_impl_ctx_is_hole : ‚àÄ lvl M e, ctxùïÑ lvl M ‚Üí value M‚ü¶e‚üß ‚Üí M = id :=
  by
  intros lvl M e HM Hvalue
  cases HM
  case hole => rfl
  case consùîπ HB _ => exfalso; apply not_value.under_ctxùîπ; apply HB; apply Hvalue
  case cons‚Ñù HR _ => exfalso; apply not_value.under_ctx‚Ñù; apply HR; apply Hvalue

lemma step.value_impl_termination : ‚àÄ v e, value v ‚Üí ¬¨(v ‚áù e) :=
  by
  intros v e Hvalue Hstep
  cases Hstep
  case pure HM _ Hhead =>
    rw [value_ctxùïÑ_impl_ctx_is_hole _ _ _ HM Hvalue] at Hvalue
    cases Hhead <;> nomatch Hvalue
  case reflect P E _ HP HE _ =>
    have HM : ctxùïÑ 0 (P ‚àò E) :=
      by
      apply compose.ctxùïÑ_ctxùîº
      apply rewrite.ctx‚Ñô_ctxùïÑ
      apply HP; apply HE
    rw [ctx_comp P E, value_ctxùïÑ_impl_ctx_is_hole _ _ _ HM Hvalue] at Hvalue
    nomatch Hvalue

lemma stepn.value_impl_termination : ‚àÄ v‚ÇÄ v‚ÇÅ, value v‚ÇÄ ‚Üí (v‚ÇÄ ‚áù* v‚ÇÅ) ‚Üí v‚ÇÄ = v‚ÇÅ :=
  by
  intros v‚ÇÄ v‚ÇÅ Hvalue Hstepn
  cases Hstepn
  case refl => rfl
  case multi Hstep _ =>
    exfalso; apply step.value_impl_termination
    apply Hvalue; apply Hstep

lemma stepn_indexed.value_impl_termination : ‚àÄ k v‚ÇÄ v‚ÇÅ, value v‚ÇÄ ‚Üí (v‚ÇÄ ‚áù ‚ü¶k‚üß v‚ÇÅ) ‚Üí v‚ÇÄ = v‚ÇÅ ‚àß k = 0 :=
  by
  intros k v‚ÇÄ v‚ÇÅ Hvalue Hstepn
  cases Hstepn
  case refl => simp
  case multi Hstep _ =>
    exfalso; apply step.value_impl_termination
    apply Hvalue; apply Hstep

theorem stepn.church_rosser :
  ‚àÄ e l r,
    (e ‚áù* l) ‚Üí
    (e ‚áù* r) ‚Üí
    ‚àÉ v,
      (l ‚áù* v) ‚àß
      (r ‚áù* v) :=
  by
  intros e l r Hstepl Hstepr
  induction Hstepl generalizing r
  case refl =>
    exists r; constructor
    . apply Hstepr
    . apply stepn.refl
  case multi le‚ÇÄ le‚ÇÅ le‚ÇÇ IHstepl IHstepln IH =>
    cases Hstepr
    case refl =>
      exists le‚ÇÇ; constructor
      . apply stepn.refl
      . apply stepn.multi; apply IHstepl; apply IHstepln
    case multi re‚ÇÄ IHstepr IHsteprn =>
      apply IH
      rw [deterministic _ _ _ IHstepl IHstepr]
      apply IHsteprn

theorem stepn_indexed.church_rosser :
  ‚àÄ il ir e l r,
    (e ‚áù ‚ü¶il‚üß l) ‚Üí
    (e ‚áù ‚ü¶ir‚üß r) ‚Üí
    ‚àÉ jl jr v,
      il + jl = ir + jr ‚àß
      (l ‚áù ‚ü¶jl‚üß v) ‚àß
      (r ‚áù ‚ü¶jr‚üß v) :=
  by
  intros il ir e l r Hstepl Hstepr
  induction Hstepl generalizing ir r
  case refl =>
    exists ir, 0, r
    constructor; omega
    constructor; apply Hstepr
    apply stepn_indexed.refl
  case multi il le‚ÇÄ le‚ÇÅ le‚ÇÇ IHstepl IHstepln IH =>
    cases Hstepr
    case refl =>
      exists 0, il + 1, le‚ÇÇ
      constructor; omega
      constructor; apply stepn_indexed.refl
      apply stepn_indexed.multi
      apply IHstepl; apply IHstepln
    case multi ir re‚ÇÄ IHstepr IHsteprn =>
      have IHstepln : (le‚ÇÅ ‚áù ‚ü¶ir‚üßr) :=
        by
        rw [deterministic _ _ _ IHstepl IHstepr]
        apply IHsteprn
      have ‚ü®jl, jr, v, IHEq, IHstep‚ü© := IH _ _ IHstepln
      exists jl, jr, v
      constructor; omega
      apply IHstep

theorem stepn.unique_normal_forms :
  ‚àÄ e v‚ÇÄ v‚ÇÅ,
    (e ‚áù* v‚ÇÄ) ‚Üí
    (e ‚áù* v‚ÇÅ) ‚Üí
    value v‚ÇÄ ‚Üí
    value v‚ÇÅ ‚Üí
    v‚ÇÄ = v‚ÇÅ :=
  by
  intros e v‚ÇÄ v‚ÇÅ Hstep‚ÇÄ Hstep‚ÇÅ Hvalue‚ÇÄ Hvalue‚ÇÅ
  have ‚ü®v, Hstep‚ÇÄ, Hstep‚ÇÅ‚ü© := stepn.church_rosser _ _ _ Hstep‚ÇÄ Hstep‚ÇÅ
  have HEq‚ÇÄ := stepn.value_impl_termination _ _ Hvalue‚ÇÄ Hstep‚ÇÄ
  have HEq‚ÇÅ := stepn.value_impl_termination _ _ Hvalue‚ÇÅ Hstep‚ÇÅ
  rw [HEq‚ÇÄ, HEq‚ÇÅ]

theorem stepn_indexed.unique_normal_forms :
  ‚àÄ il ir e v‚ÇÄ v‚ÇÅ,
    (e ‚áù ‚ü¶il‚üß v‚ÇÄ) ‚Üí
    (e ‚áù ‚ü¶ir‚üß v‚ÇÅ) ‚Üí
    value v‚ÇÄ ‚Üí
    value v‚ÇÅ ‚Üí
    v‚ÇÄ = v‚ÇÅ ‚àß il = ir :=
  by
  intros il ir e v‚ÇÄ v‚ÇÅ Hstep‚ÇÄ Hstep‚ÇÅ Hvalue‚ÇÄ Hvalue‚ÇÅ
  have ‚ü®z‚ÇÄ, z‚ÇÅ, r, HEq, Hstep‚ÇÄ, Hstep‚ÇÅ‚ü© := stepn_indexed.church_rosser _ _ _ _ _ Hstep‚ÇÄ Hstep‚ÇÅ
  have ‚ü®HEqv‚ÇÄ, HEqz‚ÇÄ‚ü©:= stepn_indexed.value_impl_termination _ _ _ Hvalue‚ÇÄ Hstep‚ÇÄ
  have ‚ü®HEqv‚ÇÅ, HEqz‚ÇÅ‚ü©:= stepn_indexed.value_impl_termination _ _ _ Hvalue‚ÇÅ Hstep‚ÇÅ
  simp [HEqv‚ÇÄ, HEqv‚ÇÅ]
  omega
