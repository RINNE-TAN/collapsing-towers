
import Mathlib.Data.Nat.Basic
import CollapsingTowers.TwoLevelPCP.Effect
inductive Stage : Type where
  | stat
  | dyn

inductive BinOp : Type where
  | add
  | mul

@[simp]
def eval : BinOp ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
  | .add => Nat.add
  | .mul => Nat.mul

inductive Ty : Type where
  | nat
  | arrow (œÑùïí : Ty) (œÑùïì : Ty) (œÜ : Effects)
  | fragment (œÑ : Ty)
  | rep (œÑ : Ty)
  | ref (œÑ : Ty)

inductive Expr : Type where
  | bvar (i : ‚Ñï)
  | fvar (x : ‚Ñï)
  | lam‚ÇÅ (e : Expr)
  | app‚ÇÅ (f : Expr) (arg : Expr)
  | app‚ÇÇ (f : Expr) (arg : Expr)
  | lit‚ÇÅ (n : ‚Ñï)
  | binary‚ÇÅ (op : BinOp) (l : Expr) (r : Expr)
  | binary‚ÇÇ (op : BinOp) (l : Expr) (r : Expr)
  | lift (e : Expr)
  | run (e : Expr)
  | code (e : Expr)
  | reflect (e : Expr)
  | lamùïî (e : Expr)
  | lets (b : Expr) (e : Expr)
  | letùïî (b : Expr) (e : Expr)
  | loc (l : ‚Ñï)
  | load‚ÇÅ (e : Expr)
  | alloc‚ÇÅ (e : Expr)
  | store‚ÇÅ (l : Expr) (r : Expr)
  | load‚ÇÇ (e : Expr)
  | alloc‚ÇÇ (e : Expr)
  | store‚ÇÇ (l : Expr) (r : Expr)
  | ifz‚ÇÅ (c : Expr) (l : Expr) (r : Expr)
  | ifz‚ÇÇ (c : Expr) (l : Expr) (r : Expr)
  | fix‚ÇÅ (e : Expr)
