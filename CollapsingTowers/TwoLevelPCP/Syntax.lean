
import Mathlib.Data.Nat.Basic
inductive Stage : Type where
  | fst
  | snd

inductive Ty : Type where
  | nat
  | arrow (œÑùïí : Ty) (œÑùïì : Ty)
  | rep‚ÇÅ (œÑ : Ty)
  | rep‚ÇÇ (œÑ : Ty)

def binding_time : Stage ‚Üí Ty ‚Üí Prop
  | .fst, .nat => true
  | .fst, (.arrow _ _) => true
  | .fst, (.rep‚ÇÅ _) => true
  | .fst, _ => false
  | .snd, .nat => true
  | .snd, (.arrow _ _) => true
  | .snd, _ => false

inductive Expr : Type where
  | bvar (i : ‚Ñï)
  | fvar (x : ‚Ñï)
  | lam‚ÇÅ (e : Expr)
  | app‚ÇÅ (f : Expr) (arg : Expr)
  | app‚ÇÇ (f : Expr) (arg : Expr)
  | lit‚ÇÅ (n : ‚Ñï)
  | plus‚ÇÅ (l : Expr) (r : Expr)
  | plus‚ÇÇ (l : Expr) (r : Expr)
  | lift (e : Expr)
  | code (e : Expr)
  | reflect (e : Expr)
  | lamùïî (e : Expr)
  | lets (b : Expr) (e : Expr)
  | letùïî (b : Expr) (e : Expr)
