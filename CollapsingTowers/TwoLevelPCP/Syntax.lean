
import Mathlib.Data.Nat.Basic
inductive Stage : Type where
  | stat
  | dyn

inductive Ty : Type where
  | nat
  | arrow (œÑùïí : Ty) (œÑùïì : Ty)
  | fragment (œÑ : Ty)
  | rep (œÑ : Ty)

def well_binding_time : Stage ‚Üí Ty ‚Üí Prop
  | .stat, .nat => true
  | .stat, (.arrow _ _) => true
  | .stat, (.fragment _) => true
  | .stat, _ => false
  | .dyn, .nat => true
  | .dyn, (.arrow _ _) => true
  | .dyn, _ => false

inductive Expr : Type where
  | bvar (i : ‚Ñï)
  | fvar (x : ‚Ñï)
  | lam‚ÇÅ (e : Expr)
  | app‚ÇÅ (f : Expr) (arg : Expr)
  | app‚ÇÇ (f : Expr) (arg : Expr)
  | lit‚ÇÅ (n : ‚Ñï)
  | plus‚ÇÅ (l : Expr) (r : Expr)
  | plus‚ÇÇ (l : Expr) (r : Expr)
  | lift (e : Expr)
  | code (e : Expr)
  | reflect (e : Expr)
  | lamùïî (e : Expr)
  | lets (b : Expr) (e : Expr)
  | letùïî (b : Expr) (e : Expr)
