
import CollapsingTowers.TwoLevelPCP.Typing
namespace Power
-- naive power function x‚Åø
-- let (power : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) =
--   Œª(x : ‚Ñï).
--     fix‚ÇÅ (
--       Œª(f : ‚Ñï ‚Üí ‚Ñï).
--       Œª(n : ‚Ñï).
--         ifz‚ÇÅ n
--           then 1
--           else x * f(n-1)
--     )
-- power 47 2
def power : Expr :=
  .fvar 0

def x : Expr :=
  .fvar 1

def f : Expr :=
  .fvar 2

def n : Expr :=
  .fvar 3

def expr‚ÇÄ : Expr :=
  .lets (
    .lam (close‚ÇÄ 1 (
      .fix‚ÇÅ (
        .lam (close‚ÇÄ 2 (
        .lam (close‚ÇÄ 3 (
          .ifz‚ÇÅ n (
            .lit 1) (
            .binary‚ÇÅ .mul x (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))))) (close‚ÇÄ 0 (
  .app‚ÇÅ (.app‚ÇÅ power (.lit 47)) (.lit 2)))

def expr‚ÇÅ : Expr :=
  .app‚ÇÅ (
    .app‚ÇÅ (
      .lam (close‚ÇÄ 1 (
        .fix‚ÇÅ (
          .lam (close‚ÇÄ 2 (
          .lam (close‚ÇÄ 3 (
            .ifz‚ÇÅ n (
              .lit 1) (
              .binary‚ÇÅ .mul x (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))))) (
    .lit 47)) (
  .lit 2)

def expr‚ÇÇ : Expr :=
  .app‚ÇÅ (
    .fix‚ÇÅ (
      .lam (close‚ÇÄ 2 (
      .lam (close‚ÇÄ 3 (
        .ifz‚ÇÅ n (
          .lit 1) (
          .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
  .lit 2)

def expr‚ÇÉ : Expr :=
  .app‚ÇÅ (
    .lam (close‚ÇÄ 3 (
      .ifz‚ÇÅ n (
        .lit 1) (
        .binary‚ÇÅ .mul (
          .lit 2) (
          .app‚ÇÅ (
            .fix‚ÇÅ (
              .lam (close‚ÇÄ 2 (
              .lam (close‚ÇÄ 3 (
                .ifz‚ÇÅ n (
                  .lit 1) (
                  .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
            .binary‚ÇÅ .sub n (.lit 1))))))) (
  .lit 2)

def expr‚ÇÑ : Expr :=
  .ifz‚ÇÅ (.lit 2) (
    .lit 1) (
    .binary‚ÇÅ .mul (
      .lit 47) (
      .app‚ÇÅ (
        .fix‚ÇÅ (
          .lam (close‚ÇÄ 2 (
          .lam (close‚ÇÄ 3 (
            .ifz‚ÇÅ n (
              .lit 1) (
              .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
        .binary‚ÇÅ .sub (.lit 2) (.lit 1))))

def expr‚ÇÖ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .app‚ÇÅ (
      .fix‚ÇÅ (
        .lam (close‚ÇÄ 2 (
        .lam (close‚ÇÄ 3 (
          .ifz‚ÇÅ n (
            .lit 1) (
            .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
      .binary‚ÇÅ .sub (.lit 2) (.lit 1)))

def expr‚ÇÜ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .app‚ÇÅ (
      .lam (close‚ÇÄ 3 (
        .ifz‚ÇÅ n (
          .lit 1) (
          .binary‚ÇÅ .mul (
            .lit 47) (
            .app‚ÇÅ (.fix‚ÇÅ (
              .lam (close‚ÇÄ 2 (
              .lam (close‚ÇÄ 3 (
                .ifz‚ÇÅ n (
                  .lit 1) (
                  .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
            .binary‚ÇÅ .sub n (.lit 1))))))) (
      .binary‚ÇÅ .sub (.lit 2) (.lit 1)))

def expr‚Çá : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .app‚ÇÅ (
      .lam (close‚ÇÄ 3 (
        .ifz‚ÇÅ n (
          .lit 1) (
          .binary‚ÇÅ .mul (
            .lit 47) (
            .app‚ÇÅ (.fix‚ÇÅ (
              .lam (close‚ÇÄ 2 (
              .lam (close‚ÇÄ 3 (
                .ifz‚ÇÅ n (
                  .lit 1) (
                  .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
              .binary‚ÇÅ .sub n (.lit 1))))))) (
      .lit 1))

def expr‚Çà : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .ifz‚ÇÅ (.lit 1) (
      .lit 1) (
      .binary‚ÇÅ .mul (
        .lit 47) (
        .app‚ÇÅ (.fix‚ÇÅ (
          .lam (close‚ÇÄ 2 (
          .lam (close‚ÇÄ 3 (
            .ifz‚ÇÅ n (
              .lit 1) (
              .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
          .binary‚ÇÅ .sub (.lit 1) (.lit 1)))))

def expr‚Çâ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .binary‚ÇÅ .mul (
      .lit 47) (
      .app‚ÇÅ (.fix‚ÇÅ (
        .lam (close‚ÇÄ 2 (
        .lam (close‚ÇÄ 3 (
          .ifz‚ÇÅ n (
            .lit 1) (
            .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
        .binary‚ÇÅ .sub (.lit 1) (.lit 1))))

def exprùï©‚ÇÄ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .binary‚ÇÅ .mul (
      .lit 47) (
      .app‚ÇÅ (
        .lam (close‚ÇÄ 3 (
          .ifz‚ÇÅ n (
            .lit 1) (
            .binary‚ÇÅ .mul (
              .lit 47) (
              .app‚ÇÅ (
                .fix‚ÇÅ (
                  .lam (close‚ÇÄ 2 (
                  .lam (close‚ÇÄ 3 (
                    .ifz‚ÇÅ n (
                      .lit 1) (
                      .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                .binary‚ÇÅ .sub n (.lit 1))))))) (
        .binary‚ÇÅ .sub (.lit 1) (.lit 1))))

def exprùï©‚ÇÅ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .binary‚ÇÅ .mul (
      .lit 47) (
      .app‚ÇÅ (
        .lam (close‚ÇÄ 3 (
          .ifz‚ÇÅ n (
            .lit 1) (
            .binary‚ÇÅ .mul (
              .lit 47) (
              .app‚ÇÅ (
                .fix‚ÇÅ (
                  .lam (close‚ÇÄ 2 (
                  .lam (close‚ÇÄ 3 (
                    .ifz‚ÇÅ n (
                      .lit 1) (
                      .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                .binary‚ÇÅ .sub n (.lit 1))))))) (
        .lit 0)))

def exprùï©‚ÇÇ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .binary‚ÇÅ .mul (
      .lit 47) (
      .ifz‚ÇÅ (.lit 0) (
        .lit 1) (
        .binary‚ÇÅ .mul (
          .lit 47) (
          .app‚ÇÅ (
            .fix‚ÇÅ (
              .lam (close‚ÇÄ 2 (
              .lam (close‚ÇÄ 3 (
                .ifz‚ÇÅ n (
                  .lit 1) (
                  .binary‚ÇÅ .mul (.lit 47) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
            .binary‚ÇÅ .sub (.lit 0) (.lit 1))))))

def exprùï©‚ÇÉ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .binary‚ÇÅ .mul (
      .lit 47) (
      .lit 1))

def exprùï©‚ÇÑ : Expr :=
  .binary‚ÇÅ .mul (
    .lit 47) (
    .lit 47)

def exprùï©‚ÇÖ : Expr := .lit 2209

example : typing_reification [] [] expr‚ÇÄ .nat ‚àÖ :=
  by
  rw [expr‚ÇÄ, power, x, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚ÇÅ .nat ‚àÖ :=
  by
  rw [expr‚ÇÅ, x, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚ÇÇ .nat ‚àÖ :=
  by
  rw [expr‚ÇÇ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚ÇÉ .nat ‚àÖ :=
  by
  rw [expr‚ÇÉ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚ÇÑ .nat ‚àÖ :=
  by
  rw [expr‚ÇÑ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚ÇÖ .nat ‚àÖ :=
  by
  rw [expr‚ÇÖ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚ÇÜ .nat ‚àÖ :=
  by
  rw [expr‚ÇÜ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚Çá .nat ‚àÖ :=
  by
  rw [expr‚Çá, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚Çà .nat ‚àÖ :=
  by
  rw [expr‚Çà, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] expr‚Çâ .nat ‚àÖ :=
  by
  rw [expr‚Çâ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]


example : typing_reification [] [] exprùï©‚ÇÄ .nat ‚àÖ :=
  by
  rw [exprùï©‚ÇÄ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] exprùï©‚ÇÅ .nat ‚àÖ :=
  by
  rw [exprùï©‚ÇÅ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] exprùï©‚ÇÇ .nat ‚àÖ :=
  by
  rw [exprùï©‚ÇÇ, f, n]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] exprùï©‚ÇÉ .nat ‚àÖ :=
  by
  rw [exprùï©‚ÇÉ]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] exprùï©‚ÇÑ .nat ‚àÖ :=
  by
  rw [exprùï©‚ÇÑ]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]

example : typing_reification [] [] exprùï©‚ÇÖ .nat ‚àÖ :=
  by
  rw [exprùï©‚ÇÖ]
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]
end Power
