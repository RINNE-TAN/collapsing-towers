
import CollapsingTowers.TwoLevelPCP.Typing
namespace StagePower
-- stage power function x‚Åø
-- let (power : <‚Ñï> ‚Üí ‚Ñï ‚Üí <‚Ñï>) =
--   Œª(x : <‚Ñï>).
--     fix‚ÇÅ (
--       Œª(f : ‚Ñï ‚Üí <‚Ñï>).
--       Œª(n : ‚Ñï).
--         ifz‚ÇÅ n
--           then (lift 1)
--           else x *‚ÇÇ f(n - 1)
--     ) in
-- lift (
--   Œª(y : <‚Ñï>).
--     power(y)(2)
-- )
-- -->*
-- code (
--   let x‚ÇÑ =
--     Œª(x‚ÇÄ : ‚Ñï).
--       let x‚ÇÅ = 1 in
--       let x‚ÇÇ = x‚ÇÄ * x‚ÇÅ in
--       let x‚ÇÉ = x‚ÇÄ * x‚ÇÇ in
--       x‚ÇÉ
--   in x‚ÇÑ
-- )
def x‚ÇÄ : Expr :=
  .fvar 0

def x‚ÇÅ : Expr :=
  .fvar 1

def x‚ÇÇ : Expr :=
  .fvar 2

def x‚ÇÉ : Expr :=
  .fvar 3

def x‚ÇÑ : Expr :=
  .fvar 4

def power : Expr :=
  .fvar 100

def x : Expr :=
  .fvar 101

def f : Expr :=
  .fvar 102

def n : Expr :=
  .fvar 103

def y : Expr :=
  .fvar 104

def expr‚ÇÄ : Expr :=
  .lets (
    .lam (close‚ÇÄ 101 (
      .fix‚ÇÅ (
        .lam (close‚ÇÄ 102 (
        .lam (close‚ÇÄ 103 (
          .ifz‚ÇÅ n (
            .lift (.lit 1)) (
            .binary‚ÇÇ .mul x (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))))) (close‚ÇÄ 100 (
  .lift (
    .lam (close‚ÇÄ 104 (
    .app‚ÇÅ (.app‚ÇÅ power y) (.lit 2))))))

def expr‚ÇÅ : Expr :=
  .lift (
    .lam (close‚ÇÄ 104 (
    .app‚ÇÅ (
      .app‚ÇÅ (
        .lam (close‚ÇÄ 101 (
          .fix‚ÇÅ (
            .lam (close‚ÇÄ 102 (
            .lam (close‚ÇÄ 103 (
              .ifz‚ÇÅ n (
                .lift (.lit 1)) (
                .binary‚ÇÇ .mul x (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1))))))))))))
        y) (
      .lit 2))))

def expr‚ÇÇ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .app‚ÇÅ (
      .app‚ÇÅ (
        .lam (close‚ÇÄ 101 (
          .fix‚ÇÅ (
            .lam (close‚ÇÄ 102 (
            .lam (close‚ÇÄ 103 (
              .ifz‚ÇÅ n (
                .lift (.lit 1)) (
                .binary‚ÇÇ .mul x (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1))))))))))))
        (.code x‚ÇÄ)) (
      .lit 2)))

def expr‚ÇÉ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .app‚ÇÅ (
      .fix‚ÇÅ (
        .lam (close‚ÇÄ 102 (
        .lam (close‚ÇÄ 103 (
          .ifz‚ÇÅ n (
            .lift (.lit 1)) (
            .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
      .lit 2)))

def expr‚ÇÑ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .app‚ÇÅ (
      .lam (close‚ÇÄ 103 (
        .ifz‚ÇÅ n (
          .lift (.lit 1)) (
          .binary‚ÇÇ .mul (
            .code x‚ÇÄ) (
            .app‚ÇÅ (
              .fix‚ÇÅ (
                .lam (close‚ÇÄ 102 (
                .lam (close‚ÇÄ 103 (
                  .ifz‚ÇÅ n (
                    .lift (.lit 1)) (
                    .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
              .binary‚ÇÅ .sub n (.lit 1))))))) (
      .lit 2)))

def expr‚ÇÖ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .ifz‚ÇÅ (.lit 2) (
      .lift (.lit 1)) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .app‚ÇÅ (
          .fix‚ÇÅ (
            .lam (close‚ÇÄ 102 (
            .lam (close‚ÇÄ 103 (
              .ifz‚ÇÅ n (
                .lift (.lit 1)) (
                .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
          .binary‚ÇÅ .sub (.lit 2) (.lit 1))))))

def expr‚ÇÜ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .app‚ÇÅ (
        .fix‚ÇÅ (
          .lam (close‚ÇÄ 102 (
          .lam (close‚ÇÄ 103 (
            .ifz‚ÇÅ n (
              .lift (.lit 1)) (
              .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
        .binary‚ÇÅ .sub (.lit 2) (.lit 1)))))

def expr‚Çá : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .app‚ÇÅ (
        .lam (close‚ÇÄ 103 (
          .ifz‚ÇÅ n (
            .lift (.lit 1)) (
            .binary‚ÇÇ .mul (
              .code x‚ÇÄ) (
              .app‚ÇÅ (
                .fix‚ÇÅ (
                  .lam (close‚ÇÄ 102 (
                  .lam (close‚ÇÄ 103 (
                    .ifz‚ÇÅ n (
                      .lift (.lit 1)) (
                      .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                .binary‚ÇÅ .sub n (.lit 1))))))) (
        .binary‚ÇÅ .sub (.lit 2) (.lit 1)))))

def expr‚Çà : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .app‚ÇÅ (
        .lam (close‚ÇÄ 103 (
          .ifz‚ÇÅ n (
            .lift (.lit 1)) (
            .binary‚ÇÇ .mul (
              .code x‚ÇÄ) (
              .app‚ÇÅ (
                .fix‚ÇÅ (
                  .lam (close‚ÇÄ 102 (
                  .lam (close‚ÇÄ 103 (
                    .ifz‚ÇÅ n (
                      .lift (.lit 1)) (
                      .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                .binary‚ÇÅ .sub n (.lit 1))))))) (
        .lit 1))))

def expr‚Çâ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .ifz‚ÇÅ (.lit 1) (
        .lift (.lit 1)) (
        .binary‚ÇÇ .mul (
          .code x‚ÇÄ) (
          .app‚ÇÅ (
            .fix‚ÇÅ (
              .lam (close‚ÇÄ 102 (
              .lam (close‚ÇÄ 103 (
                .ifz‚ÇÅ n (
                  .lift (.lit 1)) (
                  .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
            .binary‚ÇÅ .sub (.lit 1) (.lit 1)))))))

def exprùï©‚ÇÄ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .app‚ÇÅ (
          .fix‚ÇÅ (
            .lam (close‚ÇÄ 102 (
            .lam (close‚ÇÄ 103 (
              .ifz‚ÇÅ n (
                .lift (.lit 1)) (
                .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
          .binary‚ÇÅ .sub (.lit 1) (.lit 1))))))

def exprùï©‚ÇÅ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .app‚ÇÅ (
          .lam (close‚ÇÄ 103 (
            .ifz‚ÇÅ n (
              .lift (.lit 1)) (
              .binary‚ÇÇ .mul (
                .code x‚ÇÄ) (
                .app‚ÇÅ (
                  .fix‚ÇÅ (
                    .lam (close‚ÇÄ 102 (
                    .lam (close‚ÇÄ 103 (
                      .ifz‚ÇÅ n (
                        .lift (.lit 1)) (
                        .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                  .binary‚ÇÅ .sub n (.lit 1))))))) (
          .binary‚ÇÅ .sub (.lit 1) (.lit 1))))))

def exprùï©‚ÇÇ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .app‚ÇÅ (
          .lam (close‚ÇÄ 103 (
            .ifz‚ÇÅ n (
              .lift (.lit 1)) (
              .binary‚ÇÇ .mul (
                .code x‚ÇÄ) (
                .app‚ÇÅ (
                  .fix‚ÇÅ (
                    .lam (close‚ÇÄ 102 (
                    .lam (close‚ÇÄ 103 (
                      .ifz‚ÇÅ n (
                        .lift (.lit 1)) (
                        .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                  .binary‚ÇÅ .sub n (.lit 1))))))) (
          .lit 0)))))

def exprùï©‚ÇÉ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
          .ifz‚ÇÅ (.lit 0) (
            .lift (.lit 1)) (
            .binary‚ÇÇ .mul (
              .code x‚ÇÄ) (
              .app‚ÇÅ (
                .fix‚ÇÅ (
                  .lam (close‚ÇÄ 102 (
                  .lam (close‚ÇÄ 103 (
                    .ifz‚ÇÅ n (
                      .lift (.lit 1)) (
                      .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
                .binary‚ÇÅ .sub (.lit 0) (.lit 1))))))))

def exprùï©‚ÇÑ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .lift (.lit 1)))))

def exprùï©‚ÇÖ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .reflect (.lit 1)))))

def exprùï©‚ÇÜ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .code x‚ÇÅ))))))

def exprùï©‚Çá : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .reflect (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ))))))

def exprùï©‚Çà : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
    .binary‚ÇÇ .mul (
      .code x‚ÇÄ) (
      .code x‚ÇÇ)))))))

def exprùï©‚Çâ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
    .reflect (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ)))))))

def exprùï©ùï©‚ÇÄ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
    .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3 (
    .code x‚ÇÉ))))))))

def exprùï©ùï©‚ÇÅ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
    .code (.lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3 x‚ÇÉ))))))))

def exprùï©ùï©‚ÇÇ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .letùïî (.lit 1) (close‚ÇÄ 1 (
    .code (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3
      x‚ÇÉ))))))))

def exprùï©ùï©‚ÇÉ : Expr :=
  .lamùïî (close‚ÇÄ 0 (
    .code (
      .lets (.lit 1) (close‚ÇÄ 1 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3
      x‚ÇÉ))))))))

def exprùï©ùï©‚ÇÑ : Expr :=
  .reflect (
    .lam (close‚ÇÄ 0 (
      .lets (.lit 1) (close‚ÇÄ 1 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3
      x‚ÇÉ))))))))

def exprùï©ùï©‚ÇÖ : Expr :=
  .letùïî (
    .lam (close‚ÇÄ 0 (
      .lets (.lit 1) (close‚ÇÄ 1 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
      .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3
      x‚ÇÉ)))))))) (close‚ÇÄ 4 (
  .code x‚ÇÑ))

def exprùï©ùï©‚ÇÜ : Expr :=
  .code (
    .lets (
      .lam (close‚ÇÄ 0 (
        .lets (.lit 1) (close‚ÇÄ 1 (
        .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
        .lets (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÇ) (close‚ÇÄ 3
        x‚ÇÉ)))))))) (close‚ÇÄ 4 (
    x‚ÇÑ)))

example : step ([], expr‚ÇÄ) ([], expr‚ÇÅ) := by
  apply step_lvl.stepùïÑ id
  repeat constructor

example : step ([], expr‚ÇÅ) ([], expr‚ÇÇ) := by
  apply step_lvl.stepùïÑ id
  repeat constructor

example : step ([], expr‚ÇÇ) ([], expr‚ÇÉ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.app‚ÇÅ X _)))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.consùîπ (fun X => .app‚ÇÅ X _)
  repeat constructor

example : step ([], expr‚ÇÉ) ([], expr‚ÇÑ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.app‚ÇÅ X _)))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.consùîπ (fun X => .app‚ÇÅ X _)
  repeat constructor

example : step ([], expr‚ÇÑ) ([], expr‚ÇÖ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], expr‚ÇÖ) ([], expr‚ÇÜ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], expr‚ÇÜ) ([], expr‚Çá) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ X _))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.consùîπ (fun X => .binary‚ÇÇ .mul (.code x‚ÇÄ) X)
  repeat constructor
  apply ctxùïÑ.consùîπ (fun X => .app‚ÇÅ X _)
  repeat constructor

example : step ([], expr‚Çá) ([], expr‚Çà) := by
  let left : Expr :=
    .lam (close‚ÇÄ 103 (
    .ifz‚ÇÅ n (
      .lift (.lit 1)) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .app‚ÇÅ (
          .fix‚ÇÅ (
            .lam (close‚ÇÄ 102 (
            .lam (close‚ÇÄ 103 (
              .ifz‚ÇÅ n (
                .lift (.lit 1)) (
                .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
          .binary‚ÇÅ .sub n (.lit 1))))))
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ left X))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.consùîπ (fun X => .binary‚ÇÇ .mul (.code x‚ÇÄ) X)
  repeat constructor

example : step ([], expr‚Çà) ([], expr‚Çâ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) X)))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], expr‚Çâ) ([], exprùï©‚ÇÄ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) X)))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©‚ÇÄ) ([], exprùï©‚ÇÅ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ X _)))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor
  apply ctxùïÑ.consùîπ (fun X => .app‚ÇÅ X _)
  repeat constructor

example : step ([], exprùï©‚ÇÅ) ([], exprùï©‚ÇÇ) := by
  let left : Expr :=
    .lam (close‚ÇÄ 103 (
    .ifz‚ÇÅ n (
      .lift (.lit 1)) (
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .app‚ÇÅ (
          .fix‚ÇÅ (
            .lam (close‚ÇÄ 102 (
            .lam (close‚ÇÄ 103 (
              .ifz‚ÇÅ n (
                .lift (.lit 1)) (
                .binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ f (.binary‚ÇÅ .sub n (.lit 1)))))))))) (
          .binary‚ÇÅ .sub n (.lit 1))))))
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.app‚ÇÅ left X)))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©‚ÇÇ) ([], exprùï©‚ÇÉ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.binary‚ÇÇ .mul (.code x‚ÇÄ) X))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©‚ÇÉ) ([], exprùï©‚ÇÑ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.binary‚ÇÇ .mul (.code x‚ÇÄ) X))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©‚ÇÑ) ([], exprùï©‚ÇÖ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 (.binary‚ÇÇ .mul (.code x‚ÇÄ) (.binary‚ÇÇ .mul (.code x‚ÇÄ) X))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©‚ÇÖ) ([], exprùï©‚ÇÜ) := by
  apply step_lvl.reflect
    (fun X => .lamùïî (close‚ÇÄ 0 X))
    (fun X =>
      .binary‚ÇÇ .mul (
        .code x‚ÇÄ) (
        .binary‚ÇÇ .mul (
          .code x‚ÇÄ) (
          X)))
  repeat constructor

example : step ([], exprùï©‚ÇÜ) ([], exprùï©‚Çá) := by
  apply step_lvl.stepùïÑ
    (fun X =>
      .lamùïî (close‚ÇÄ 0 (
        .letùïî (.lit 1) (close‚ÇÄ 1 (
          .binary‚ÇÇ .mul (.code x‚ÇÄ) X)))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.cons‚Ñù (fun X => .letùïî (.lit 1) (close‚ÇÄ 1 X))
  repeat constructor

example : step ([], exprùï©‚Çá) ([], exprùï©‚Çà) := by
  apply step_lvl.reflect
    (fun X => .lamùïî (close‚ÇÄ 0 (.letùïî (.lit 1) (close‚ÇÄ 1 X))))
    (fun X => .binary‚ÇÇ .mul (.code x‚ÇÄ) X)
  apply ctx‚Ñô.cons‚Ñö (fun X => .lamùïî (close‚ÇÄ 0 (.letùïî (.lit 1) (close‚ÇÄ 1 X))))
  apply ctx‚Ñö.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©‚Çà) ([], exprùï©‚Çâ) := by
  apply step_lvl.stepùïÑ
    (fun X =>
      .lamùïî (close‚ÇÄ 0 (
        .letùïî (.lit 1) (close‚ÇÄ 1 (
        .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
        X)))))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.cons‚Ñù (fun X => .letùïî (.lit 1) (close‚ÇÄ 1 X))
  apply ctx‚Ñù.letùïî; constructor
  apply ctxùïÑ.cons‚Ñù (fun X => .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 X))
  repeat constructor

example : step ([], exprùï©‚Çâ) ([], exprùï©ùï©‚ÇÄ) := by
  apply step_lvl.reflect
    (fun X =>
      .lamùïî (close‚ÇÄ 0 (
        .letùïî (.lit 1) (close‚ÇÄ 1 (
        .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2
        X))))))
    id
  apply ctx‚Ñô.cons‚Ñö
    (fun X =>
      .lamùïî (close‚ÇÄ 0 (
        .letùïî (.lit 1) (close‚ÇÄ 1 (
        .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2
        X))))))
  apply ctx‚Ñö.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctx‚Ñö.cons‚Ñù (fun X => .letùïî (.lit 1) (close‚ÇÄ 1 X))
  repeat constructor

example : step ([], exprùï©ùï©‚ÇÄ) ([], exprùï©ùï©‚ÇÅ) := by
  apply step_lvl.stepùïÑ (fun X =>
    .lamùïî (close‚ÇÄ 0 (
      .letùïî (.lit 1) (close‚ÇÄ 1 (
      .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (
      X)))))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.cons‚Ñù (fun X => .letùïî (.lit 1) (close‚ÇÄ 1 X))
  apply ctx‚Ñù.letùïî; constructor
  apply ctxùïÑ.cons‚Ñù (fun X => .letùïî (.binary‚ÇÅ .mul x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 X))
  repeat constructor

example : step ([], exprùï©ùï©‚ÇÅ) ([], exprùï©ùï©‚ÇÇ) := by
  apply step_lvl.stepùïÑ (fun X =>
    .lamùïî (close‚ÇÄ 0 (
      .letùïî (.lit 1) (close‚ÇÄ 1 (
      X)))))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctx‚Ñù.lamùïî
  apply ctxùïÑ.cons‚Ñù (fun X => .letùïî (.lit 1) (close‚ÇÄ 1 X))
  repeat constructor

example : step ([], exprùï©ùï©‚ÇÇ) ([], exprùï©ùï©‚ÇÉ) := by
  apply step_lvl.stepùïÑ (fun X => .lamùïî (close‚ÇÄ 0 X))
  apply ctxùïÑ.cons‚Ñù (fun X => .lamùïî (close‚ÇÄ 0 X))
  repeat constructor

example : step ([], exprùï©ùï©‚ÇÉ) ([], exprùï©ùï©‚ÇÑ) := by
  apply step_lvl.stepùïÑ id
  repeat constructor

example : step ([], exprùï©ùï©‚ÇÑ) ([], exprùï©ùï©‚ÇÖ) := by
  apply step_lvl.reflect id id
  repeat constructor

example : step ([], exprùï©ùï©‚ÇÖ) ([], exprùï©ùï©‚ÇÜ) := by
  apply step_lvl.stepùïÑ id
  repeat constructor

example : typing_reification [] [] expr‚ÇÄ (.rep (.arrow .nat .nat ‚àÖ)) .reify :=
  by
  apply typing_reification.reify; rw [‚Üê union_pure_left .reify]
  apply typing.lets
  apply typing.lam
  apply typing.fix‚ÇÅ
  apply typing.lam
  apply typing.lam _ _ _ _ _ _ .reify; rw [‚Üê union_pure_left .reify]
  apply typing.ifz‚ÇÅ
  . repeat constructor
  . apply typing.lift_lit; apply typing.lit
  . repeat constructor
  repeat constructor

example : typing_reification [] [] exprùï©ùï©‚ÇÜ (.rep (.arrow .nat .nat ‚àÖ)) ‚àÖ :=
  by
  repeat
    first
    | constructor
    | rw [‚Üê union_pure_left ‚àÖ]
end StagePower

namespace StageMutablePower
-- stage mutable power function x‚Åø
-- let ref = alloc‚ÇÇ (lift 1) in
-- let (power : <‚Ñï> ‚Üí ‚Ñï ‚Üí <‚Ñï>) =
--   Œª(x : <‚Ñï>).
--     fix‚ÇÅ (
--       Œª(f : ‚Ñï ‚Üí <‚Ñï>).
--       Œª(n : ‚Ñï).
--         ifz‚ÇÅ n
--           then load‚ÇÇ ref
--           else
--            let _ = store‚ÇÇ ref (x *‚ÇÇ (load‚ÇÇ ref)) in
--            f(n - 1)
--     ) in
-- lift (
--   Œª(y : <‚Ñï>).
--     power(y)(2)
-- )
end StageMutablePower
