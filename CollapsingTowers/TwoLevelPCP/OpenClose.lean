
import CollapsingTowers.TwoLevelPCP.Syntax

-- Definitions
@[simp]
def subst (x : ‚Ñï) (v : Expr) : Expr ‚Üí Expr
  | .bvar i => .bvar i
  | .fvar y => if x = y then v else .fvar y
  | .lam‚ÇÅ e => .lam‚ÇÅ (subst x v e)
  | .lift e => .lift (subst x v e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (subst x v f) (subst x v arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (subst x v f) (subst x v arg)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .plus‚ÇÅ l r => .plus‚ÇÅ (subst x v l) (subst x v r)
  | .plus‚ÇÇ l r => .plus‚ÇÇ (subst x v l) (subst x v r)
  | .run e => .run (subst x v e)
  | .code e => .code (subst x v e)
  | .reflect e => .reflect (subst x v e)
  | .lamùïî e => .lamùïî (subst x v e)
  | .lets b e => .lets (subst x v b) (subst x v e)
  | .letùïî b e => .letùïî (subst x v b) (subst x v e)

-- opening i t1 t2 = [i ‚Üí t1]t2
@[simp]
def opening (i : ‚Ñï) (x : Expr) : Expr ‚Üí Expr
  | .bvar j => if j = i then x else .bvar j
  | .fvar x => .fvar x
  | .lam‚ÇÅ e => .lam‚ÇÅ (opening (i + 1) x e)
  | .lift e => .lift (opening i x e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (opening i x f) (opening i x arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (opening i x f) (opening i x arg)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .plus‚ÇÅ l r => .plus‚ÇÅ (opening i x l) (opening i x r)
  | .plus‚ÇÇ l r => .plus‚ÇÇ (opening i x l) (opening i x r)
  | .run e => .run (opening i x e)
  | .code e => .code (opening i x e)
  | .reflect e => .reflect (opening i x e)
  | .lamùïî e => .lamùïî (opening (i + 1) x e)
  | .lets b e => .lets (opening i x b) (opening (i + 1) x e)
  | .letùïî b e => .letùïî (opening i x b) (opening (i + 1) x e)

@[simp]
def open‚ÇÄ (x : ‚Ñï) : Expr ‚Üí Expr :=
  opening 0 (.fvar x)

@[simp]
def open_subst (tgt : Expr) (within : Expr) :=
  opening 0 tgt within

@[simp]
def closing (i : ‚Ñï) (x : ‚Ñï) : Expr ‚Üí Expr
  | .bvar j => .bvar j
  | .fvar y => if x == y then .bvar i else .fvar y
  | .lam‚ÇÅ e => .lam‚ÇÅ (closing (i + 1) x e)
  | .lift e => .lift (closing i x e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (closing i x f) (closing i x arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (closing i x f) (closing i x arg)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .plus‚ÇÅ l r => .plus‚ÇÅ (closing i x l) (closing i x r)
  | .plus‚ÇÇ l r => .plus‚ÇÇ (closing i x l) (closing i x r)
  | .run e => .run (closing i x e)
  | .code e => .code (closing i x e)
  | .reflect e => .reflect (closing i x e)
  | .lamùïî e => .lamùïî (closing (i + 1) x e)
  | .lets b e => .lets (closing i x b) (closing (i + 1) x e)
  | .letùïî b e => .letùïî (closing i x b) (closing (i + 1) x e)

@[simp]
def close‚ÇÄ : ‚Ñï ‚Üí Expr ‚Üí Expr :=
  closing 0

-- closedness condition for free variables
@[simp]
def closed_at (e : Expr) (f : ‚Ñï) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar x => x < f
  | .lam‚ÇÅ e => closed_at e f
  | .lift e => closed_at e f
  | .app‚ÇÅ e1 e2 => closed_at e1 f ‚àß closed_at e2 f
  | .app‚ÇÇ e1 e2 => closed_at e1 f ‚àß closed_at e2 f
  | .lit‚ÇÅ _ => true
  | .plus‚ÇÅ l r => closed_at l f ‚àß closed_at r f
  | .plus‚ÇÇ l r => closed_at l f ‚àß closed_at r f
  | .run e => closed_at e f
  | .code e => closed_at e f
  | .reflect e => closed_at e f
  | .lamùïî e => closed_at e f
  | .lets b e => closed_at b f ‚àß closed_at e f
  | .letùïî b e => closed_at b f ‚àß closed_at e f

-- closedness condition for bound variables
@[simp]
def closedb_at (e : Expr) (b : ‚Ñï) : Prop :=
  match e with
  | .bvar x => x < b
  | .fvar _ => true
  | .lam‚ÇÅ e => closedb_at e (b + 1)
  | .lift e => closedb_at e b
  | .app‚ÇÅ e1 e2 => closedb_at e1 b ‚àß closedb_at e2 b
  | .app‚ÇÇ e1 e2 => closedb_at e1 b ‚àß closedb_at e2 b
  | .lit‚ÇÅ _ => true
  | .plus‚ÇÅ l r => closedb_at l b ‚àß closedb_at r b
  | .plus‚ÇÇ l r => closedb_at l b ‚àß closedb_at r b
  | .run e => closedb_at e b
  | .code e => closedb_at e b
  | .reflect e => closedb_at e b
  | .lamùïî e => closedb_at e (b + 1)
  | .lets e1 e2 => closedb_at e1 b ‚àß closedb_at e2 (b + 1)
  | .letùïî e1 e2 => closedb_at e1 b ‚àß closedb_at e2 (b + 1)

@[simp]
def lc e := closedb_at e 0

@[simp]
def mapingùïî (e : Expr) (i : ‚Ñï) : Expr :=
  match e with
  | .bvar j => if j == i then (.code (.bvar i)) else .bvar j
  | .fvar x => .fvar x
  | .lam‚ÇÅ e => .lam‚ÇÅ (mapingùïî e (i + 1))
  | .lift e => .lift (mapingùïî e i)
  | .app‚ÇÅ f arg => .app‚ÇÅ (mapingùïî f i) (mapingùïî arg i)
  | .app‚ÇÇ f arg => .app‚ÇÇ (mapingùïî f i) (mapingùïî arg i)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .plus‚ÇÅ l r => .plus‚ÇÅ (mapingùïî l i) (mapingùïî r i)
  | .plus‚ÇÇ l r => .plus‚ÇÇ (mapingùïî l i) (mapingùïî r i)
  | .run e => .run (mapingùïî e i)
  | .code e => .code (mapingùïî e i)
  | .reflect e => .reflect (mapingùïî e i)
  | .lamùïî e => .lamùïî (mapingùïî e (i + 1))
  | .lets b e => .lets (mapingùïî b i) (mapingùïî e (i + 1))
  | .letùïî b e => .letùïî (mapingùïî b i) (mapingùïî e (i + 1))

@[simp]
def mapùïî‚ÇÄ (e : Expr) : Expr := mapingùïî e 0

@[simp]
def fv : Expr ‚Üí Set ‚Ñï
  | .bvar _ => ‚àÖ
  | .fvar x => { x }
  | .lam‚ÇÅ e => fv e
  | .lift e => fv e
  | .app‚ÇÅ f arg => fv f ‚à™ fv arg
  | .app‚ÇÇ f arg => fv f ‚à™ fv arg
  | .lit‚ÇÅ _ => ‚àÖ
  | .plus‚ÇÅ l r => fv l ‚à™ fv r
  | .plus‚ÇÇ l r => fv l ‚à™ fv r
  | .run e => fv e
  | .code e => fv e
  | .reflect e => fv e
  | .lamùïî e => fv e
  | .lets b e => fv b ‚à™ fv e
  | .letùïî b e => fv b ‚à™ fv e

-- Properties
lemma subst_intro : ‚àÄ x e v i, closed_at e x ‚Üí subst x v (opening i (.fvar x) e) = opening i v e :=
  by
  intros _ e _ i Hclosed
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [HEq]
    . simp [if_neg HEq]
  | fvar y =>
    simp at *; omega
  | lam‚ÇÅ _ IHe
  | lift _ IHe
  | code _ IHe
  | reflect _ IHe
  | lamùïî _ IHe
  | run _ IHe =>
    simp; apply IHe; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit‚ÇÅ => simp

lemma subst_closed_id : ‚àÄ x e v, closed_at e x ‚Üí subst x v e = e :=
  by
  intros x e v He
  induction e with
  | bvar => simp
  | fvar => simp at *; omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | lets _ _ IHb IHe
  | letùïî _ _ IHb IHe =>
    simp; constructor
    apply IHb; apply He.left
    apply IHe; apply He.right
  | lit‚ÇÅ => simp

lemma openSubst_intro : ‚àÄ x e v, closed_at e x ‚Üí subst x v (open‚ÇÄ x e) = open_subst v e :=
  by
  intros _ _ _ Hclosed
  apply subst_intro
  apply Hclosed

lemma closedb_inc: ‚àÄ t i j,
    closedb_at t i ‚Üí i ‚â§ j ‚Üí
    closedb_at t j := by
  intros t i j Hclose HLe
  induction t generalizing i j with
  | bvar => simp at *; omega
  | fvar => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply Hclose; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    apply And.intro
    . apply IH‚ÇÄ; apply Hclose.left; omega
    . apply IH‚ÇÅ; apply Hclose.right; omega
  | lit‚ÇÅ => simp

lemma closed_inc : ‚àÄ x y e, closed_at e x ‚Üí x ‚â§ y ‚Üí closed_at e y :=
  by
  intros x y e Hclose Hxy
  induction e with
  | bvar j => simp
  | fvar z => simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclose

lemma subst_closedb_at : ‚àÄ x e v i, closedb_at v i ‚Üí closedb_at e i ‚Üí closedb_at (subst x v e) i :=
  by
  intros x e v i Hv He
  induction e generalizing i with
  | bvar => apply He
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply closedb_inc; apply Hv; omega; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | lets _ _ IHb IHe
  | letùïî _ _ IHb IHe =>
    constructor
    apply IHb; apply Hv; apply He.left
    apply IHe; apply closedb_inc; apply Hv; omega; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit‚ÇÅ => simp

lemma subst_closed_at : ‚àÄ x e v y, closed_at v y ‚Üí closed_at e y ‚Üí closed_at (subst x v e) y :=
  by
  intros x e v y Hv He
  induction e generalizing y with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; apply He
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply Hv; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit‚ÇÅ => simp

lemma subst_closed_at_dec : ‚àÄ x e v, closed_at v x ‚Üí closed_at e (x + 1) ‚Üí closed_at (subst x v e) x :=
  by
  intros x e v Hv He
  induction e with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [‚Üê HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp at *; omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply He
  | lit‚ÇÅ => simp

lemma open_closedb : ‚àÄ t n m,
  closedb_at (opening m (.fvar n) t) m ‚Üí
  closedb_at t (m + 1) := by
  intros t; induction t <;> intros n m h <;> simp
  case bvar x =>
    by_cases hx: (x = m)
    . omega
    . by_cases hx': (x < m)
      . omega;
      . simp at h; rw [if_neg hx] at h; simp at h; omega
  case lam‚ÇÅ t ih =>
    apply ih n (m + 1); simp at h; assumption
  case code _ ih
     | reflect _ ih
     | lamùïî _ ih
     | lift _ ih
     | run _ ih =>
    simp at *; apply ih; apply h
  case app‚ÇÅ t1 t2 ih1 ih2
     | app‚ÇÇ t1 t2 ih1 ih2
     | plus‚ÇÅ _ _ ih1 ih2
     | plus‚ÇÇ _ _ ih1 ih2 =>
    apply And.intro; apply ih1 n m h.1; apply ih2 n m h.2
  case lets _ _ ih1 ih2
     | letùïî _ _ ih1 ih2 =>
    apply And.intro; apply ih1 n m h.1; apply ih2 n (m + 1) h.2

lemma open_closedb': ‚àÄ t n m,
    closedb_at t (m + 1) ‚Üí closedb_at (opening m (.fvar n) t) m := by
  intros t; induction t <;> intros n m h <;> simp
  case bvar x =>
    by_cases hx: (x = m)
    . simp [hx]
    . rw [if_neg hx]; simp at h; simp; omega
  case lam‚ÇÅ t ih =>
    apply ih n (m + 1); simp at h; assumption
  case code _ ih
     | reflect _ ih
     | lamùïî _ ih
     | lift _ ih
     | run _ ih =>
    simp at *; apply ih; apply h
  case app‚ÇÅ t1 t2 ih1 ih2
     | app‚ÇÇ t1 t2 ih1 ih2
     | plus‚ÇÅ _ _ ih1 ih2
     | plus‚ÇÇ _ _ ih1 ih2 =>
    apply And.intro; apply ih1 n m h.1; apply ih2 n m h.2
  case lets _ _ ih1 ih2
     | letùïî _ _ ih1 ih2 =>
    apply And.intro; apply ih1 n m h.1; apply ih2 n (m + 1) h.2

theorem close_closed : ‚àÄ e x i, closed_at e (x + 1) ‚Üí closed_at (closing i x e) x :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp; omega
  | bvar => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ => simp

theorem open_subst_closed : ‚àÄ x e v i, closed_at e x ‚Üí closed_at v x ‚Üí closed_at (opening i v e) x :=
  by
  intros x e v i He Hv
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; apply Hv
    . rw [if_neg HEq]; simp
  | fvar => apply He
  | lit‚ÇÅ => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right

theorem open_closed : ‚àÄ e x i, closed_at e x ‚Üí closed_at (opening i (.fvar x) e) (x + 1) :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y => simp; omega
  | bvar j =>
    by_cases HEq : j = i
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ => simp

theorem close_closedb : ‚àÄ e x i j, j < i ‚Üí closedb_at e i ‚Üí closedb_at (closing j x e) i :=
  by
  intros e x i j Hlt
  induction e generalizing i j with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | bvar => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; omega; apply Hclose.left
    apply IH‚ÇÅ; omega; apply Hclose.right
  | lit‚ÇÅ => simp

lemma closedb_opening_id: ‚àÄ t1 t2 n,
  closedb_at t1 n ‚Üí opening n t2 t1 = t1 := by
  intros t1; induction t1 <;> intros t2 n h <;> simp
  case bvar x => intro xn; simp at h; omega
  case lam‚ÇÅ t ih
     | lift t ih =>
    simp at h; apply ih; assumption
  case code _ ih
     | reflect _ ih
     | lamùïî _ ih
     | run _ ih =>
    simp at *; apply ih; apply h
  case app‚ÇÅ t1 t2 ih1 ih2
     | app‚ÇÇ t1 t2 ih1 ih2
     | plus‚ÇÅ _ _ ih1 ih2
     | plus‚ÇÇ _ _ ih1 ih2
     | lets _ _ ih1 ih2
     | letùïî _ _ ih1 ih2 =>
    apply And.intro; apply ih1; apply h.1; apply ih2; apply h.2

lemma open_close_id : ‚àÄ i e x, closedb_at e i ‚Üí opening i (.fvar x) (closing i x e) = e :=
  by
  intros i e x Hlc
  induction e generalizing i with
  | bvar j =>
    simp
    intro HEq
    rw [HEq] at Hlc
    simp at Hlc
  | fvar y =>
    simp
    by_cases HEq : x = y
    . rw [HEq]; simp
    . rw [if_neg HEq]; simp
  | lam‚ÇÅ _ IHe
  | lift _ IHe
  | lamùïî _ IHe
  | code _ IHe
  | reflect _ IHe
  | run _ IHe =>
    simp; apply IHe; apply Hlc
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left
    apply IH‚ÇÅ; apply Hlc.right
  | lit‚ÇÅ => rfl

lemma open_close_id‚ÇÄ : ‚àÄ e x, lc e ‚Üí open‚ÇÄ x (close‚ÇÄ x e) = e := by apply open_close_id

lemma close_open_id : ‚àÄ i e x, closed_at e x ‚Üí closing i x (opening i (.fvar x) e) = e :=
  by
  intros i e x Hclose
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp; rw [if_pos HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | fvar y => simp at *; omega
  | lam‚ÇÅ _ IHe
  | lift _ IHe
  | lamùïî _ IHe
  | code _ IHe
  | reflect _ IHe
  | run _ IHe =>
    simp; apply IHe; apply Hclose
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ => rfl

lemma close_open_id‚ÇÄ : ‚àÄ e x, closed_at e x ‚Üí close‚ÇÄ x (open‚ÇÄ x e) = e := by apply close_open_id

lemma subst_opening_comm :
    ‚àÄ x y e v i, x ‚â† y ‚Üí closedb_at v i ‚Üí subst x v (opening i (.fvar y) e) = opening i (.fvar y) (subst x v e) :=
  by
  intro x y e v i HNe Hclosedb
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp; rw [if_pos HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | fvar z =>
    by_cases HEq : x = z
    . simp; rw [if_pos HEq]; rw [closedb_opening_id]; apply Hclosedb
    . simp; rw [if_neg HEq]; simp
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb
    apply IH‚ÇÅ; apply Hclosedb
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb
    apply IH‚ÇÅ; apply closedb_inc; apply Hclosedb; omega
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosedb
  | lit‚ÇÅ => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    simp; apply IH; apply closedb_inc; apply Hclosedb; omega

lemma subst_open‚ÇÄ_comm : ‚àÄ x y e v, x ‚â† y ‚Üí lc v ‚Üí subst x v (open‚ÇÄ y e) = open‚ÇÄ y (subst x v e) := by
  intros x y e v; apply subst_opening_comm

example : mapùïî‚ÇÄ (.app‚ÇÅ (.bvar 0) (.lam‚ÇÅ (.bvar 1))) = .app‚ÇÅ (.code (.bvar 0)) (.lam‚ÇÅ (.code (.bvar 1))) := by simp

theorem mapingùïî_intro :
    ‚àÄ x e i, closed_at e x ‚Üí closing i x (subst x (.code (.fvar x)) (opening i (.fvar x) e)) = mapingùïî e i :=
  by
  intros x e i Hclosed
  induction e generalizing i with
  | bvar j => by_cases HEq : j = i; rw [HEq]; simp; simp [if_neg HEq]
  | fvar y => simp at *; by_cases HEq : x = y; omega; rw [if_neg HEq]; simp; apply HEq
  | lam‚ÇÅ _ ih
  | lift _ ih
  | code _ ih
  | reflect _ ih
  | lamùïî _ ih
  | run _ ih =>
    simp at *; apply ih; apply Hclosed
  | app‚ÇÅ _ _ ih1 ih2
  | app‚ÇÇ _ _ ih1 ih2
  | plus‚ÇÅ _ _ ih1 ih2
  | plus‚ÇÇ _ _ ih1 ih2
  | lets _ _ ih1 ih2
  | letùïî _ _ ih1 ih2 =>
    simp at *; constructor; apply ih1; apply Hclosed.left; apply ih2; apply Hclosed.right
  | lit‚ÇÅ => simp

theorem mapùïî‚ÇÄ_intro : ‚àÄ x e, closed_at e x ‚Üí close‚ÇÄ x (subst x (.code (.fvar x)) (open‚ÇÄ x e)) = mapùïî‚ÇÄ e :=
  by
  intro _ _ Hclose
  apply mapingùïî_intro
  apply Hclose

theorem mapingùïî_closed : ‚àÄ x e i, closed_at e x ‚Üí closed_at (mapingùïî e i) x :=
  by
  intros x e i He
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; apply He
    . rw [if_neg HEq]; simp
  | fvar => apply He
  | lit‚ÇÅ => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | plus‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
