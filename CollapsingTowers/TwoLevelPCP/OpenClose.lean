
import Mathlib.Data.Set.Insert
import CollapsingTowers.TwoLevelPCP.Syntax
-- Definitions
@[simp]
def subst (x : ‚Ñï) (v : Expr) : Expr ‚Üí Expr
  | .bvar i => .bvar i
  | .fvar y => if x = y then v else .fvar y
  | .lam‚ÇÅ e => .lam‚ÇÅ (subst x v e)
  | .lift e => .lift (subst x v e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (subst x v f) (subst x v arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (subst x v f) (subst x v arg)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .binary‚ÇÅ op l r => .binary‚ÇÅ op (subst x v l) (subst x v r)
  | .binary‚ÇÇ op l r => .binary‚ÇÇ op (subst x v l) (subst x v r)
  | .run e => .run (subst x v e)
  | .code e => .code (subst x v e)
  | .reflect e => .reflect (subst x v e)
  | .lamùïî e => .lamùïî (subst x v e)
  | .lets b e => .lets (subst x v b) (subst x v e)
  | .letùïî b e => .letùïî (subst x v b) (subst x v e)
  | .loc l => .loc l
  | .load‚ÇÅ e => .load‚ÇÅ (subst x v e)
  | .alloc‚ÇÅ e => .alloc‚ÇÅ (subst x v e)
  | .store‚ÇÅ l r => .store‚ÇÅ (subst x v l) (subst x v r)
  | .load‚ÇÇ e => .load‚ÇÇ (subst x v e)
  | .alloc‚ÇÇ e => .alloc‚ÇÇ (subst x v e)
  | .store‚ÇÇ l r => .store‚ÇÇ (subst x v l) (subst x v r)
  | .ifz‚ÇÅ c l r => .ifz‚ÇÅ (subst x v c) (subst x v l) (subst x v r)
  | .ifz‚ÇÇ c l r => .ifz‚ÇÇ (subst x v c) (subst x v l) (subst x v r)

-- opening i t1 t2 = [i ‚Üí t1]t2
@[simp]
def opening (i : ‚Ñï) (x : Expr) : Expr ‚Üí Expr
  | .bvar j => if j = i then x else .bvar j
  | .fvar x => .fvar x
  | .lam‚ÇÅ e => .lam‚ÇÅ (opening (i + 1) x e)
  | .lift e => .lift (opening i x e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (opening i x f) (opening i x arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (opening i x f) (opening i x arg)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .binary‚ÇÅ op l r => .binary‚ÇÅ op (opening i x l) (opening i x r)
  | .binary‚ÇÇ op l r => .binary‚ÇÇ op (opening i x l) (opening i x r)
  | .run e => .run (opening i x e)
  | .code e => .code (opening i x e)
  | .reflect e => .reflect (opening i x e)
  | .lamùïî e => .lamùïî (opening (i + 1) x e)
  | .lets b e => .lets (opening i x b) (opening (i + 1) x e)
  | .letùïî b e => .letùïî (opening i x b) (opening (i + 1) x e)
  | .loc l => .loc l
  | .load‚ÇÅ e => .load‚ÇÅ (opening i x e)
  | .alloc‚ÇÅ e => .alloc‚ÇÅ (opening i x e)
  | .store‚ÇÅ l r => .store‚ÇÅ (opening i x l) (opening i x r)
  | .load‚ÇÇ e => .load‚ÇÇ (opening i x e)
  | .alloc‚ÇÇ e => .alloc‚ÇÇ (opening i x e)
  | .store‚ÇÇ l r => .store‚ÇÇ (opening i x l) (opening i x r)
  | .ifz‚ÇÅ c l r => .ifz‚ÇÅ (opening i x c)  (opening i x l) (opening i x r)
  | .ifz‚ÇÇ c l r => .ifz‚ÇÇ (opening i x c)  (opening i x l) (opening i x r)

@[simp]
def open‚ÇÄ (x : ‚Ñï) : Expr ‚Üí Expr :=
  opening 0 (.fvar x)

@[simp]
def open_subst (tgt : Expr) (within : Expr) :=
  opening 0 tgt within

@[simp]
def closing (i : ‚Ñï) (x : ‚Ñï) : Expr ‚Üí Expr
  | .bvar j => .bvar j
  | .fvar y => if x == y then .bvar i else .fvar y
  | .lam‚ÇÅ e => .lam‚ÇÅ (closing (i + 1) x e)
  | .lift e => .lift (closing i x e)
  | .app‚ÇÅ f arg => .app‚ÇÅ (closing i x f) (closing i x arg)
  | .app‚ÇÇ f arg => .app‚ÇÇ (closing i x f) (closing i x arg)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .binary‚ÇÅ op l r => .binary‚ÇÅ op (closing i x l) (closing i x r)
  | .binary‚ÇÇ op l r => .binary‚ÇÇ op (closing i x l) (closing i x r)
  | .run e => .run (closing i x e)
  | .code e => .code (closing i x e)
  | .reflect e => .reflect (closing i x e)
  | .lamùïî e => .lamùïî (closing (i + 1) x e)
  | .lets b e => .lets (closing i x b) (closing (i + 1) x e)
  | .letùïî b e => .letùïî (closing i x b) (closing (i + 1) x e)
  | .loc l => .loc l
  | .load‚ÇÅ e => .load‚ÇÅ (closing i x e)
  | .alloc‚ÇÅ e => .alloc‚ÇÅ (closing i x e)
  | .store‚ÇÅ l r => .store‚ÇÅ (closing i x l) (closing i x r)
  | .load‚ÇÇ e => .load‚ÇÇ (closing i x e)
  | .alloc‚ÇÇ e => .alloc‚ÇÇ (closing i x e)
  | .store‚ÇÇ l r => .store‚ÇÇ (closing i x l) (closing i x r)
  | .ifz‚ÇÅ c l r => .ifz‚ÇÅ (closing i x c) (closing i x l) (closing i x r)
  | .ifz‚ÇÇ c l r => .ifz‚ÇÇ (closing i x c) (closing i x l) (closing i x r)

@[simp]
def close‚ÇÄ : ‚Ñï ‚Üí Expr ‚Üí Expr :=
  closing 0

-- closedness condition for free variables
@[simp]
def closed_at (e : Expr) (f : ‚Ñï) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar x => x < f
  | .lam‚ÇÅ e => closed_at e f
  | .lift e => closed_at e f
  | .app‚ÇÅ e1 e2 => closed_at e1 f ‚àß closed_at e2 f
  | .app‚ÇÇ e1 e2 => closed_at e1 f ‚àß closed_at e2 f
  | .lit‚ÇÅ _ => true
  | .binary‚ÇÅ _ l r => closed_at l f ‚àß closed_at r f
  | .binary‚ÇÇ _ l r => closed_at l f ‚àß closed_at r f
  | .run e => closed_at e f
  | .code e => closed_at e f
  | .reflect e => closed_at e f
  | .lamùïî e => closed_at e f
  | .lets b e => closed_at b f ‚àß closed_at e f
  | .letùïî b e => closed_at b f ‚àß closed_at e f
  | .loc _ => true
  | .load‚ÇÅ e => closed_at e f
  | .alloc‚ÇÅ e => closed_at e f
  | .store‚ÇÅ l r => closed_at l f ‚àß closed_at r f
  | .load‚ÇÇ e => closed_at e f
  | .alloc‚ÇÇ e => closed_at e f
  | .store‚ÇÇ l r => closed_at l f ‚àß closed_at r f
  | .ifz‚ÇÅ c l r => closed_at c f ‚àß closed_at l f ‚àß closed_at r f
  | .ifz‚ÇÇ c l r => closed_at c f ‚àß closed_at l f ‚àß closed_at r f

-- closedness condition for bound variables
@[simp]
def closedb_at (e : Expr) (b : ‚Ñï) : Prop :=
  match e with
  | .bvar x => x < b
  | .fvar _ => true
  | .lam‚ÇÅ e => closedb_at e (b + 1)
  | .lift e => closedb_at e b
  | .app‚ÇÅ e1 e2 => closedb_at e1 b ‚àß closedb_at e2 b
  | .app‚ÇÇ e1 e2 => closedb_at e1 b ‚àß closedb_at e2 b
  | .lit‚ÇÅ _ => true
  | .binary‚ÇÅ _ l r => closedb_at l b ‚àß closedb_at r b
  | .binary‚ÇÇ _ l r => closedb_at l b ‚àß closedb_at r b
  | .run e => closedb_at e b
  | .code e => closedb_at e b
  | .reflect e => closedb_at e b
  | .lamùïî e => closedb_at e (b + 1)
  | .lets e1 e2 => closedb_at e1 b ‚àß closedb_at e2 (b + 1)
  | .letùïî e1 e2 => closedb_at e1 b ‚àß closedb_at e2 (b + 1)
  | .loc _ => true
  | .load‚ÇÅ e => closedb_at e b
  | .alloc‚ÇÅ e => closedb_at e b
  | .store‚ÇÅ l r => closedb_at l b ‚àß closedb_at r b
  | .load‚ÇÇ e => closedb_at e b
  | .alloc‚ÇÇ e => closedb_at e b
  | .store‚ÇÇ l r => closedb_at l b ‚àß closedb_at r b
  | .ifz‚ÇÅ c l r => closedb_at c b ‚àß closedb_at l b ‚àß closedb_at r b
  | .ifz‚ÇÇ c l r => closedb_at c b ‚àß closedb_at l b ‚àß closedb_at r b

@[simp]
def lc e := closedb_at e 0

@[simp]
def mapingùïî (e : Expr) (i : ‚Ñï) : Expr :=
  match e with
  | .bvar j => if j == i then (.code (.bvar i)) else .bvar j
  | .fvar x => .fvar x
  | .lam‚ÇÅ e => .lam‚ÇÅ (mapingùïî e (i + 1))
  | .lift e => .lift (mapingùïî e i)
  | .app‚ÇÅ f arg => .app‚ÇÅ (mapingùïî f i) (mapingùïî arg i)
  | .app‚ÇÇ f arg => .app‚ÇÇ (mapingùïî f i) (mapingùïî arg i)
  | .lit‚ÇÅ n => .lit‚ÇÅ n
  | .binary‚ÇÅ op l r => .binary‚ÇÅ op (mapingùïî l i) (mapingùïî r i)
  | .binary‚ÇÇ op l r => .binary‚ÇÇ op (mapingùïî l i) (mapingùïî r i)
  | .run e => .run (mapingùïî e i)
  | .code e => .code (mapingùïî e i)
  | .reflect e => .reflect (mapingùïî e i)
  | .lamùïî e => .lamùïî (mapingùïî e (i + 1))
  | .lets b e => .lets (mapingùïî b i) (mapingùïî e (i + 1))
  | .letùïî b e => .letùïî (mapingùïî b i) (mapingùïî e (i + 1))
  | .loc l => .loc l
  | .load‚ÇÅ e => .load‚ÇÅ (mapingùïî e i)
  | .alloc‚ÇÅ e => .alloc‚ÇÅ (mapingùïî e i)
  | .store‚ÇÅ l r => .store‚ÇÅ (mapingùïî l i) (mapingùïî r i)
  | .load‚ÇÇ e => .load‚ÇÇ (mapingùïî e i)
  | .alloc‚ÇÇ e => .alloc‚ÇÇ (mapingùïî e i)
  | .store‚ÇÇ l r => .store‚ÇÇ (mapingùïî l i) (mapingùïî r i)
  | .ifz‚ÇÅ c l r => .ifz‚ÇÅ (mapingùïî c i) (mapingùïî l i) (mapingùïî r i)
  | .ifz‚ÇÇ c l r => .ifz‚ÇÇ (mapingùïî c i) (mapingùïî l i) (mapingùïî r i)

@[simp]
def mapùïî‚ÇÄ (e : Expr) : Expr := mapingùïî e 0

@[simp]
def fv : Expr ‚Üí Set ‚Ñï
  | .bvar _ => ‚àÖ
  | .fvar x => { x }
  | .lam‚ÇÅ e => fv e
  | .lift e => fv e
  | .app‚ÇÅ f arg => fv f ‚à™ fv arg
  | .app‚ÇÇ f arg => fv f ‚à™ fv arg
  | .lit‚ÇÅ _ => ‚àÖ
  | .binary‚ÇÅ _ l r => fv l ‚à™ fv r
  | .binary‚ÇÇ _ l r => fv l ‚à™ fv r
  | .run e => fv e
  | .code e => fv e
  | .reflect e => fv e
  | .lamùïî e => fv e
  | .lets b e => fv b ‚à™ fv e
  | .letùïî b e => fv b ‚à™ fv e
  | .loc _ => ‚àÖ
  | .load‚ÇÅ e => fv e
  | .alloc‚ÇÅ e => fv e
  | .store‚ÇÅ l r => fv l ‚à™ fv r
  | .load‚ÇÇ e => fv e
  | .alloc‚ÇÇ e => fv e
  | .store‚ÇÇ l r => fv l ‚à™ fv r
  | .ifz‚ÇÅ c l r => fv c ‚à™ fv l ‚à™ fv r
  | .ifz‚ÇÇ c l r => fv c ‚à™ fv l ‚à™ fv r

-- Properties
lemma subst_intro : ‚àÄ x e v i, closed_at e x ‚Üí subst x v (opening i (.fvar x) e) = opening i v e :=
  by
  intros _ e _ i Hclosed
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [HEq]
    . simp [if_neg HEq]
  | fvar y =>
    simp at *; omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right

lemma subst_closed_id : ‚àÄ x e v, closed_at e x ‚Üí subst x v e = e :=
  by
  intros x e v He
  induction e with
  | bvar => simp
  | fvar => simp at *; omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | lets _ _ IHb IH
  | letùïî _ _ IHb IH =>
    simp; constructor
    apply IHb; apply He.left
    apply IH; apply He.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left; constructor
    apply IH‚ÇÅ; apply He.right.left
    apply IH‚ÇÇ; apply He.right.right

lemma openSubst_intro : ‚àÄ x e v, closed_at e x ‚Üí subst x v (open‚ÇÄ x e) = open_subst v e :=
  by
  intros _ _ _ Hclosed
  apply subst_intro
  apply Hclosed

lemma closedb_inc: ‚àÄ t i j,
    closedb_at t i ‚Üí i ‚â§ j ‚Üí
    closedb_at t j := by
  intros t i j Hclose HLe
  induction t generalizing i j with
  | bvar => simp at *; omega
  | fvar => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; apply Hclose; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    apply And.intro
    . apply IH‚ÇÄ; apply Hclose.left; omega
    . apply IH‚ÇÅ; apply Hclose.right; omega
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left; omega; constructor
    apply IH‚ÇÅ; apply Hclose.right.left; omega
    apply IH‚ÇÇ; apply Hclose.right.right; omega

lemma closed_inc : ‚àÄ x y e, closed_at e x ‚Üí x ‚â§ y ‚Üí closed_at e y :=
  by
  intros x y e Hclose Hxy
  induction e with
  | bvar j => simp
  | fvar z => simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hclose
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left; constructor
    apply IH‚ÇÅ; apply Hclose.right.left
    apply IH‚ÇÇ; apply Hclose.right.right

lemma subst_closedb_at : ‚àÄ x e v i, closedb_at v i ‚Üí closedb_at e i ‚Üí closedb_at (subst x v e) i :=
  by
  intros x e v i Hv He
  induction e generalizing i with
  | bvar => apply He
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply closedb_inc; apply Hv; omega; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | lets _ _ IHb IH
  | letùïî _ _ IHb IH =>
    constructor
    apply IHb; apply Hv; apply He.left
    apply IH; apply closedb_inc; apply Hv; omega; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hv; apply He.left; constructor
    apply IH‚ÇÅ; apply Hv; apply He.right.left
    apply IH‚ÇÇ; apply Hv; apply He.right.right

lemma subst_closed_at : ‚àÄ x e v y, closed_at v y ‚Üí closed_at e y ‚Üí closed_at (subst x v e) y :=
  by
  intros x e v y Hv He
  induction e generalizing y with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; apply He
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply Hv; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hv; apply He.left; constructor
    apply IH‚ÇÅ; apply Hv; apply He.right.left
    apply IH‚ÇÇ; apply Hv; apply He.right.right

lemma subst_closed_at_dec : ‚àÄ x e v, closed_at v x ‚Üí closed_at e (x + 1) ‚Üí closed_at (subst x v e) x :=
  by
  intros x e v Hv He
  induction e with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [‚Üê HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp at *; omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply He
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left; constructor
    apply IH‚ÇÅ; apply He.right.left
    apply IH‚ÇÇ; apply He.right.right

lemma open_closedb : ‚àÄ i x e, closedb_at (opening i (.fvar x) e) i ‚Üî closedb_at e (i + 1) :=
  by
  intros i x e
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; constructor
      . omega
      . simp
    . rw [if_neg HEq]; simp; omega
  | fvar => simp
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hclosedb
      constructor
      apply (IH‚ÇÄ _).mp; apply Hclosedb.left
      apply (IH‚ÇÅ _).mp; apply Hclosedb.right
    . intro Hclosedb
      constructor
      apply (IH‚ÇÄ _).mpr; apply Hclosedb.left
      apply (IH‚ÇÅ _).mpr; apply Hclosedb.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    . intro Hclosedb
      constructor
      apply (IH‚ÇÄ _).mp; apply Hclosedb.left; constructor
      apply (IH‚ÇÅ _).mp; apply Hclosedb.right.left
      apply (IH‚ÇÇ _).mp; apply Hclosedb.right.right
    . intro Hclosedb
      constructor
      apply (IH‚ÇÄ _).mpr; apply Hclosedb.left; constructor
      apply (IH‚ÇÅ _).mpr; apply Hclosedb.right.left
      apply (IH‚ÇÇ _).mpr; apply Hclosedb.right.right

lemma close_closed : ‚àÄ e x i, closed_at e (x + 1) ‚Üî closed_at (closing i x e) x :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp; omega
  | bvar => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hclose; constructor
      apply (IH‚ÇÄ _).mp; apply Hclose.left
      apply (IH‚ÇÅ _).mp; apply Hclose.right
    . intro Hclose; constructor
      apply (IH‚ÇÄ _).mpr; apply Hclose.left
      apply (IH‚ÇÅ _).mpr; apply Hclose.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    . intro Hclose
      constructor
      apply (IH‚ÇÄ _).mp; apply Hclose.left; constructor
      apply (IH‚ÇÅ _).mp; apply Hclose.right.left
      apply (IH‚ÇÇ _).mp; apply Hclose.right.right
    . intro Hclose
      constructor
      apply (IH‚ÇÄ _).mpr; apply Hclose.left; constructor
      apply (IH‚ÇÅ _).mpr; apply Hclose.right.left
      apply (IH‚ÇÇ _).mpr; apply Hclose.right.right

lemma open_subst_closed : ‚àÄ x e v i, closed_at e x ‚Üí closed_at v x ‚Üí closed_at (opening i v e) x :=
  by
  intros x e v i He Hv
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; apply Hv
    . rw [if_neg HEq]; simp
  | fvar => apply He
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left; constructor
    apply IH‚ÇÅ; apply He.right.left
    apply IH‚ÇÇ; apply He.right.right

lemma open_closed : ‚àÄ e x i, closed_at e x ‚Üí closed_at (opening i (.fvar x) e) (x + 1) :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y => simp; omega
  | bvar j =>
    by_cases HEq : j = i
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; apply Hclose.left; constructor
    apply IH‚ÇÅ; apply Hclose.right.left
    apply IH‚ÇÇ; apply Hclose.right.right

lemma close_closedb : ‚àÄ e x i j, j < i ‚Üí closedb_at e i ‚Üí closedb_at (closing j x e) i :=
  by
  intros e x i j Hlt
  induction e generalizing i j with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | bvar => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; omega; apply Hclose.left
    apply IH‚ÇÅ; omega; apply Hclose.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    intro Hclose; constructor
    apply IH‚ÇÄ; omega; apply Hclose.left; constructor
    apply IH‚ÇÅ; omega; apply Hclose.right.left
    apply IH‚ÇÇ; omega; apply Hclose.right.right

lemma closedb_opening_id : ‚àÄ e v i, closedb_at e i ‚Üí opening i v e = e :=
  by
  intros e v i Hclosedb
  induction e generalizing i with
  | fvar y => simp
  | bvar j => simp at *; omega
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam‚ÇÅ _ IH
  | lamùïî _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hclosedb
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb.left
    apply IH‚ÇÅ; apply Hclosedb.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb.left; constructor
    apply IH‚ÇÅ; apply Hclosedb.right.left
    apply IH‚ÇÇ; apply Hclosedb.right.right

lemma open_close_id : ‚àÄ i e x, closedb_at e i ‚Üí opening i (.fvar x) (closing i x e) = e :=
  by
  intros i e x Hlc
  induction e generalizing i with
  | bvar j =>
    simp
    intro HEq
    rw [HEq] at Hlc
    simp at Hlc
  | fvar y =>
    simp
    by_cases HEq : x = y
    . rw [HEq]; simp
    . rw [if_neg HEq]; simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hlc
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left
    apply IH‚ÇÅ; apply Hlc.right
  | lit‚ÇÅ| loc => rfl
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hlc.left; constructor
    apply IH‚ÇÅ; apply Hlc.right.left
    apply IH‚ÇÇ; apply Hlc.right.right

lemma open_close_id‚ÇÄ : ‚àÄ e x, lc e ‚Üí open‚ÇÄ x (close‚ÇÄ x e) = e := by apply open_close_id

lemma close_open_id : ‚àÄ i e x, closed_at e x ‚Üí closing i x (opening i (.fvar x) e) = e :=
  by
  intros i e x Hclose
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp; rw [if_pos HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | fvar y => simp at *; omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hclose
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ| loc => rfl
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left; constructor
    apply IH‚ÇÅ; apply Hclose.right.left
    apply IH‚ÇÇ; apply Hclose.right.right

lemma close_open_id‚ÇÄ : ‚àÄ e x, closed_at e x ‚Üí close‚ÇÄ x (open‚ÇÄ x e) = e := by apply close_open_id

lemma subst_opening_comm :
    ‚àÄ x y e v i, x ‚â† y ‚Üí closedb_at v i ‚Üí subst x v (opening i (.fvar y) e) = opening i (.fvar y) (subst x v e) :=
  by
  intro x y e v i HNe Hclosedb
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp; rw [if_pos HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | fvar z =>
    by_cases HEq : x = z
    . simp; rw [if_pos HEq]; rw [closedb_opening_id]; apply Hclosedb
    . simp; rw [if_neg HEq]; simp
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb
    apply IH‚ÇÅ; apply Hclosedb
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb
    apply IH‚ÇÅ; apply closedb_inc; apply Hclosedb; omega
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp; apply IH; apply Hclosedb
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH =>
    simp; apply IH; apply closedb_inc; apply Hclosedb; omega
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosedb; constructor
    apply IH‚ÇÅ; apply Hclosedb
    apply IH‚ÇÇ; apply Hclosedb

lemma subst_open‚ÇÄ_comm : ‚àÄ x y e v, x ‚â† y ‚Üí lc v ‚Üí subst x v (open‚ÇÄ y e) = open‚ÇÄ y (subst x v e) := by
  intros x y e v; apply subst_opening_comm

example : mapùïî‚ÇÄ (.app‚ÇÅ (.bvar 0) (.lam‚ÇÅ (.bvar 1))) = .app‚ÇÅ (.code (.bvar 0)) (.lam‚ÇÅ (.code (.bvar 1))) := by simp

lemma mapingùïî_intro :
    ‚àÄ x e i, closed_at e x ‚Üí closing i x (subst x (.code (.fvar x)) (opening i (.fvar x) e)) = mapingùïî e i :=
  by
  intros x e i Hclose
  induction e generalizing i with
  | bvar j => by_cases HEq : j = i; rw [HEq]; simp; simp [if_neg HEq]
  | fvar y => simp at *; by_cases HEq : x = y; omega; rw [if_neg HEq]; simp; apply HEq
  | lam‚ÇÅ _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    simp at *; apply IH; apply Hclose
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at *; constructor
    apply IH‚ÇÄ; apply Hclose.left
    apply IH‚ÇÅ; apply Hclose.right
  | lit‚ÇÅ| loc => simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclose.left; constructor
    apply IH‚ÇÅ; apply Hclose.right.left
    apply IH‚ÇÇ; apply Hclose.right.right

lemma mapùïî‚ÇÄ_intro : ‚àÄ x e, closed_at e x ‚Üí close‚ÇÄ x (subst x (.code (.fvar x)) (open‚ÇÄ x e)) = mapùïî‚ÇÄ e :=
  by
  intro _ _ Hclose
  apply mapingùïî_intro
  apply Hclose

lemma mapingùïî_closed : ‚àÄ x e i, closed_at e x ‚Üí closed_at (mapingùïî e i) x :=
  by
  intros x e i He
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; apply He
    . rw [if_neg HEq]; simp
  | fvar => apply He
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply He.left; constructor
    apply IH‚ÇÅ; apply He.right.left
    apply IH‚ÇÇ; apply He.right.right

lemma fv_if_closed_at :
  ‚àÄ x y e,
    closed_at e x ‚Üí
    y ‚â• x ‚Üí
    y ‚àâ fv e :=
  by
  intros x y e Hclose HGe HIn
  induction e with
  | bvar => nomatch HIn
  | fvar z =>
    simp at *
    omega
  | lit‚ÇÅ| loc => nomatch HIn
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; apply Hclose; apply HIn
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    cases HIn
    case inl H‚ÇÄ =>
      apply IH‚ÇÄ; apply Hclose.left; apply H‚ÇÄ
    case inr H‚ÇÅ =>
      apply IH‚ÇÅ; apply Hclose.right; apply H‚ÇÅ
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    cases HIn
    case inl HIn =>
      cases HIn
      case inl H‚ÇÄ =>
        apply IH‚ÇÄ; apply Hclose.left; apply H‚ÇÄ
      case inr H‚ÇÅ =>
        apply IH‚ÇÅ; apply Hclose.right.left; apply H‚ÇÅ
    case inr H‚ÇÇ =>
      apply IH‚ÇÇ; apply Hclose.right.right; apply H‚ÇÇ

lemma fv_opening : ‚àÄ i v e, fv (opening i v e) ‚äÜ fv v ‚à™ fv e :=
  by
  intros i v e
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]
    . rw [if_neg HEq]; simp
  | fvar z => simp
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply Set.Subset.trans; apply IH‚ÇÄ
    apply Set.union_subset_union; rfl; simp
    apply Set.Subset.trans; apply IH‚ÇÅ
    apply Set.union_subset_union; rfl; simp
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor; constructor
    apply Set.Subset.trans; apply IH‚ÇÄ
    apply Set.union_subset_union; rfl
    rw [Set.union_assoc]; simp
    apply Set.Subset.trans; apply IH‚ÇÅ
    apply Set.union_subset_union; rfl
    rw [Set.union_assoc, Set.union_comm, Set.union_assoc]; simp
    apply Set.Subset.trans; apply IH‚ÇÇ
    apply Set.union_subset_union; rfl
    simp

lemma fv_open‚ÇÄ :
  ‚àÄ x y e,
    x ‚àâ fv e ‚Üí
    x ‚â† y ‚Üí
    x ‚àâ fv (open‚ÇÄ y e) :=
  by
  intros x y e HNotIn HNe HIn
  apply HNotIn
  have H : fv (open‚ÇÄ y e) ‚äÜ { y } ‚à™ fv e := by apply fv_opening
  rw [Set.subset_def] at H
  cases (H x HIn)
  case inl => simp at *; omega
  case inr => assumption

lemma fv_closed_at_dec :
  ‚àÄ e x,
    closed_at e (x + 1) ‚Üí
    x ‚àâ fv e ‚Üí
    closed_at e x :=
  by
  intros e x Hclose HFv
  induction e with
  | bvar j => simp
  | fvar y => simp at *; omega
  | lit‚ÇÅ| loc => simp
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam‚ÇÅ _ IH
  | lamùïî _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; apply Hclose; apply HFv
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply Hclose.left; apply HFv.left
    apply IH‚ÇÅ; apply Hclose.right; apply HFv.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply Hclose.left; apply HFv.left.left; constructor
    apply IH‚ÇÅ; apply Hclose.right.left; apply HFv.left.right
    apply IH‚ÇÇ; apply Hclose.right.right; apply HFv.right

lemma fv_mapingùïî : ‚àÄ e i, fv e = fv (mapingùïî e i) :=
  by
  intros e i
  induction e generalizing i with
  | bvar j =>
    simp; by_cases HEq : j = i
    . rw [if_pos HEq]; rfl
    . rw [if_neg HEq]; rfl
  | fvar => rfl
  | lit‚ÇÅ| loc => rfl
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH => apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ]
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ, IH‚ÇÇ]

lemma fv_empty_iff_closed : ‚àÄ e, fv e = ‚àÖ ‚Üî closed_at e 0 :=
  by
  intro e
  induction e with
  | bvar => simp
  | fvar => simp
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro HFv; simp at HFv
      constructor
      apply IH‚ÇÄ.mp; apply HFv.left
      apply IH‚ÇÅ.mp; apply HFv.right
    . intro Hclose
      simp; constructor
      apply IH‚ÇÄ.mpr; apply Hclose.left
      apply IH‚ÇÅ.mpr; apply Hclose.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    . intro HFv; simp at HFv
      constructor
      apply IH‚ÇÄ.mp; apply HFv.left.left; constructor
      apply IH‚ÇÅ.mp; apply HFv.left.right
      apply IH‚ÇÇ.mp; apply HFv.right
    . intro Hclose
      simp; constructor; constructor
      apply IH‚ÇÄ.mpr; apply Hclose.left
      apply IH‚ÇÅ.mpr; apply Hclose.right.left
      apply IH‚ÇÇ.mpr; apply Hclose.right.right

lemma fv_closing : ‚àÄ i x e, fv (closing i x e) = fv e \ { x } :=
  by
  intros i x e
  induction e generalizing i with
  | bvar => simp
  | fvar y =>
    simp; by_cases HEq : x = y
    . rw [if_pos HEq]
      rw [HEq]; simp
    . rw [if_neg HEq]
      rw [Set.diff_singleton_eq_self]
      rfl; apply HEq
  | lit‚ÇÅ| loc => simp
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ]
    rw [Set.union_diff_distrib]
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; rw [IH‚ÇÄ, IH‚ÇÅ, IH‚ÇÇ]
    rw [Set.union_diff_distrib]
    rw [Set.union_diff_distrib]

lemma fv_subset_closed :
  ‚àÄ e‚ÇÄ e‚ÇÅ x,
    fv e‚ÇÅ ‚äÜ fv e‚ÇÄ ‚Üí
    closed_at e‚ÇÄ x ‚Üí
    closed_at e‚ÇÅ x :=
  by
  intros e‚ÇÄ e‚ÇÅ x HFv Hclose
  induction e‚ÇÅ with
  | bvar| lit‚ÇÅ| loc => simp
  | fvar y =>
    simp at *
    have _ : ¬¨y ‚â• x := by
      intro HGe
      apply fv_if_closed_at; apply Hclose
      apply HGe; apply HFv
    omega
  | lam‚ÇÅ _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | load‚ÇÅ _ IH
  | alloc‚ÇÅ _ IH
  | load‚ÇÇ _ IH
  | alloc‚ÇÇ _ IH =>
    apply IH; apply HFv
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letùïî _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | store‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply HFv.left
    apply IH‚ÇÅ; apply HFv.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply HFv.left.left; constructor
    apply IH‚ÇÅ; apply HFv.left.right
    apply IH‚ÇÇ; apply HFv.right
