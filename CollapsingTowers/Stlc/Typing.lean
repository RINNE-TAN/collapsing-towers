
import Mathlib.Data.Finset.Basic
import Mathlib.Data.Fintype.EquivFin
import CollapsingTowers.Stlc.Basic
import CollapsingTowers.Stlc.OpenClose
import CollapsingTowers.Stlc.SmallStep
import CollapsingTowers.Stlc.Context
inductive hasTy : TyCtx -> Expr -> Ty -> Prop
  | hasTy_var : ok Œì -> lookup Œì x = some œÑ -> hasTy Œì (.fvar x) œÑ
  |
  hasTy_lam :
    (L : Finset ‚Ñï) -> (‚àÄ x, x ‚àâ L -> hasTy ((x, œÑ‚ÇÄ) :: Œì) (open‚ÇÄ (.fvar x) e) œÑ‚ÇÅ) -> hasTy Œì (.lam e) (.ty_fun œÑ‚ÇÄ œÑ‚ÇÅ)
  | hasTy_app : hasTy Œì f (.ty_fun œÑ‚ÇÄ œÑ‚ÇÅ) -> hasTy Œì arg œÑ‚ÇÄ -> hasTy Œì (.app f arg) œÑ‚ÇÅ
  | hasTy_unit : hasTy Œì .unit .ty_unit

@[simp]
def stuck (e‚ÇÄ : Expr) : Prop :=
  ¬¨(‚àÉ e‚ÇÅ, step e‚ÇÄ e‚ÇÅ) /\ ¬¨value e‚ÇÄ

theorem hasTy_mono : hasTy Œì e œÑ -> Œì = Œ¶ ++ Œî -> ok (Œ¶ ++ Œ® ++ Œî) -> hasTy (Œ¶ ++ Œ® ++ Œî) e œÑ :=
  by
  intro HhasTy HEqŒì Hok
  induction HhasTy generalizing Œ¶ with
  | hasTy_var HokLocal Hlookup =>
    constructor
    apply Hok
    apply lookup_extend
    rw [‚Üê HEqŒì]
    apply Hlookup
    apply Hok
  | hasTy_lam L _ IHe =>
    apply hasTy.hasTy_lam (L ‚à™ context_terms (Œ¶ ++ Œ® ++ Œî))
    intro fresh Hfresh
    simp at Hfresh
    rw [‚Üê List.cons_append, ‚Üê List.cons_append]
    apply IHe
    apply Hfresh.left
    simp
    apply HEqŒì
    constructor
    apply Hok
    intro HInŒì
    apply Hfresh.right
    apply context_terms_iff_in_list.mpr
    simp at HInŒì
    apply HInŒì
  | hasTy_app _ _ IHf IHarg =>
    constructor
    apply IHf
    apply HEqŒì
    apply Hok
    apply IHarg
    apply HEqŒì
    apply Hok
  | hasTy_unit => constructor

theorem pick_fresh (e : Expr) (L : Finset ‚Ñï) : ‚àÉ x, x ‚àâ (L ‚à™ fv e) := by apply Infinite.exists_not_mem_finset (L ‚à™ fv e)

theorem typing_regular : hasTy Œì e œÑ -> lc e := by
  intro HhasTyE
  induction HhasTyE with
  | hasTy_var => constructor
  | hasTy_lam L _ IHe =>
    constructor
    intro fresh
    intro Hfresh
    apply IHe
    apply Hfresh
  | hasTy_app _ _ IHf IHarg =>
    constructor
    apply IHf
    apply IHarg
  | hasTy_unit => constructor

theorem typing_subst_strengthened :
    hasTy Œì e œÑ‚ÇÅ -> Œì = Œî ++ (z, œÑ‚ÇÄ) :: Œ¶ -> hasTy Œ¶ v œÑ‚ÇÄ -> hasTy (Œî ++ Œ¶) (subst z v e) œÑ‚ÇÅ :=
  by
  intro HhasTyE HEqŒì HhasTyV
  induction HhasTyE generalizing Œî with
  | @hasTy_var Œì x œÑ HokŒì Hlookup =>
    if HEqx : z = x then
      rw [‚Üê HEqx]
      rw [‚Üê HEqx] at Hlookup
      have HlookupEq : lookup Œì z = some œÑ‚ÇÄ := by
        rw [HEqŒì]
        rw [‚Üê List.nil_append Œî]
        apply lookup_extend
        simp
        simp
        rw [‚Üê HEqŒì]
        apply HokŒì
      rw [List.append_cons] at HEqŒì
      rw [HEqŒì] at HokŒì
      rw [Hlookup] at HlookupEq
      simp at HlookupEq
      rw [HlookupEq]
      simp
      rw [‚Üê List.append_nil Œî]
      apply @hasTy_mono (Œî ++ Œ¶)
      rw [‚Üê List.nil_append Œî]
      apply hasTy_mono
      apply HhasTyV
      rfl
      simp
      apply ok_shrink
      apply HokŒì
      rfl
      simp
      apply ok_shrink
      apply HokŒì
    else
      simp
      rw [if_neg HEqx]
      rw [List.append_cons] at HEqŒì
      rw [HEqŒì] at HokŒì
      rw [HEqŒì] at Hlookup
      constructor
      apply ok_shrink
      apply HokŒì
      apply lookup_shrink
      apply Hlookup
      intro HEq
      apply HEqx
      rw [HEq]
  | hasTy_app _ _ IHf IHarg =>
    simp
    constructor
    apply IHf
    apply HEqŒì
    apply IHarg
    apply HEqŒì
  | @hasTy_lam œÑ‚ÇÅ _ e _ L _ IHe =>
    simp
    apply hasTy.hasTy_lam (L ‚à™ { z })
    intro fresh Hfresh
    simp at *
    rw [‚Üê subst_open_var]
    rw [‚Üê List.nil_append ((fresh, œÑ‚ÇÅ) :: (Œî ++ Œ¶)), List.append_cons, List.nil_append, ‚Üê List.append_assoc]
    apply IHe
    apply Hfresh.left
    rw [HEqŒì]
    simp
    intro HEqfresh
    apply Hfresh.right
    rw [HEqfresh]
    apply typing_regular
    apply HhasTyV
  | hasTy_unit => constructor

theorem typing_subst : hasTy ((z, œÑ‚ÇÄ) :: Œ¶) e œÑ‚ÇÅ -> hasTy Œ¶ v œÑ‚ÇÄ -> hasTy Œ¶ (subst z v e) œÑ‚ÇÅ :=
  by
  intro HhasTyE HhasTyV
  rw [‚Üê List.nil_append Œ¶]
  apply typing_subst_strengthened
  apply HhasTyE
  rfl
  apply HhasTyV

theorem typing_ctxùîπ : ctxùîπ B -> (‚àÄ œÑ‚ÇÄ, hasTy [] e‚ÇÄ œÑ‚ÇÄ -> hasTy [] e‚ÇÅ œÑ‚ÇÄ) -> hasTy [] (B e‚ÇÄ) œÑ‚ÇÅ -> hasTy [] (B e‚ÇÅ) œÑ‚ÇÅ :=
  by
  intro HB HhasTyHead HhasTyB
  induction HB with
  | ctxùîπ_appL Hlc =>
    cases HhasTyB with
    | hasTy_app HhasTyF HhasTyArg =>
      constructor
      apply HhasTyHead
      apply HhasTyF
      apply HhasTyArg
  | ctxùîπ_appR HValue =>
    cases HhasTyB with
    | hasTy_app HhasTyF HhasTyArg =>
      simp at *
      constructor
      apply HhasTyF
      apply HhasTyHead
      apply HhasTyArg

theorem preservation : step e‚ÇÄ e‚ÇÅ -> hasTy [] e‚ÇÄ œÑ -> hasTy [] e‚ÇÅ œÑ :=
  by
  intro Hstep
  cases Hstep with
  | @step_appŒ≤ _ e v HM Hlc HV =>
    clear Hlc
    induction HM generalizing œÑ with
    | ctxùïÑ_hole =>
      intro HhasTyApp
      cases HhasTyApp with
      | hasTy_app HhasTyLam hasTyV =>
        cases HhasTyLam with
        | hasTy_lam L HhasTyE =>
          obtain ‚ü®fresh, Hfresh‚ü© := pick_fresh e L
          simp at Hfresh
          have HEq : subst fresh v (open‚ÇÄ (Expr.fvar fresh) e) = open‚ÇÄ v e := subst_intro Hfresh.right
          rw [‚Üê HEq]
          apply typing_subst (HhasTyE fresh Hfresh.left) hasTyV
    | ctxùïÑ_ùîπ HB _ IHHasTyM =>
      simp at *
      apply typing_ctxùîπ
      apply HB
      apply IHHasTyM

theorem multi_preservation : multi e‚ÇÄ e‚ÇÅ -> hasTy [] e‚ÇÄ œÑ -> hasTy [] e‚ÇÅ œÑ :=
  by
  intro Hmulti HhasTye‚ÇÄ
  induction Hmulti with
  | multi_stop => apply HhasTye‚ÇÄ
  | multi_step Hstep _ IHHasTy =>
    apply IHHasTy
    apply preservation
    apply Hstep
    apply HhasTye‚ÇÄ

theorem progress : hasTy [] e‚ÇÄ œÑ -> value e‚ÇÄ \/ ‚àÉ e‚ÇÅ, step e‚ÇÄ e‚ÇÅ :=
  by
  generalize HEqŒì : [] = Œì
  intro HhasTye‚ÇÄ
  induction HhasTye‚ÇÄ with
  | hasTy_var Hok Hlookup =>
    rw [‚Üê HEqŒì] at Hlookup
    contradiction
  | hasTy_lam L HhasTyE =>
    left
    constructor
    constructor
    intro fresh Hfresh
    apply typing_regular
    apply HhasTyE fresh Hfresh
  | @hasTy_app _ f‚ÇÄ _ _ arg‚ÇÄ HhasTyF HhasTyArg IHf IHarg =>
    right
    cases IHf HEqŒì with
    | inl HvalueF =>
      cases IHarg HEqŒì with
      | inl HvalueArg =>
        cases HvalueF with
        | value_lam Hlc =>
          constructor
          apply (step.step_appŒ≤ ctxùïÑ.ctxùïÑ_hole)
          apply Hlc
          apply HvalueArg
        | value_unit => nomatch HhasTyF
      | inr HstepArg =>
        obtain ‚ü®arg‚ÇÅ, HstepArg‚ü© := HstepArg
        constructor
        apply step_in_ctxùîπ (ctxùîπ.ctxùîπ_appR _)
        apply HstepArg
        apply HvalueF
    | inr HstepF =>
      cases IHarg HEqŒì with
      | inl HvalueArg =>
        obtain ‚ü®f‚ÇÅ, HstepF‚ü© := HstepF
        constructor
        apply step_in_ctxùîπ (ctxùîπ.ctxùîπ_appL _)
        apply HstepF
        apply value_lc
        apply HvalueArg
      | inr =>
        obtain ‚ü®f‚ÇÅ, HstepF‚ü© := HstepF
        constructor
        apply step_in_ctxùîπ (ctxùîπ.ctxùîπ_appL _)
        apply HstepF
        apply typing_regular
        apply HhasTyArg
  | hasTy_unit =>
    left
    constructor

theorem soundness : multi e‚ÇÄ e‚ÇÅ -> hasTy [] e‚ÇÄ œÑ -> ¬¨stuck e‚ÇÅ :=
  by
  intro Hmulti HhasTye‚ÇÄ
  simp
  intro HNstep
  cases progress (multi_preservation Hmulti HhasTye‚ÇÄ) with
  | inl HV => apply HV
  | inr Hstep =>
    obtain ‚ü®e‚ÇÇ, Hstep‚ü© := Hstep
    have HNstep := HNstep e‚ÇÇ
    contradiction
