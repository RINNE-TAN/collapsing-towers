
import Mathlib.Data.Finset.Basic
import CollapsingTowers.TwoLevel.Syntax
import CollapsingTowers.TwoLevel.OpenClose
import CollapsingTowers.TwoLevel.Neutral
import CollapsingTowers.TwoLevel.Env
import CollapsingTowers.TwoLevel.SmallStep
import CollapsingTowers.TwoLevel.Typing

namespace Example1

/-- Example 1:
lam‚ÇÇ x. x +‚ÇÇ (x +‚ÇÇ x)
‚Üí‚ãÜ
code {
  lets f = lam‚ÇÅ x.
    lets y = x + x in
    lets z = x + y in z
  in f
}
-/
def x‚ÇÄ : Expr :=
  .fvar 0

def x‚ÇÅ : Expr :=
  .fvar 1

def x‚ÇÇ : Expr :=
  .fvar 2

def x‚ÇÉ : Expr :=
  .fvar 3

def expr‚ÇÄ : Expr :=
  .lam‚ÇÇ (.lam‚ÇÅ (close‚ÇÄ 0 (.plus‚ÇÇ x‚ÇÄ (.plus‚ÇÇ x‚ÇÄ x‚ÇÄ))))

def expr‚ÇÅ : Expr :=
  .lamùïî (close‚ÇÄ 0 (.plus‚ÇÇ (.code x‚ÇÄ) (.plus‚ÇÇ (.code x‚ÇÄ) (.code x‚ÇÄ))))

def expr‚ÇÇ : Expr :=
  .lamùïî (close‚ÇÄ 0 (.plus‚ÇÇ (.code x‚ÇÄ) (.reflect (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ))))

def expr‚ÇÉ : Expr :=
  .lamùïî (close‚ÇÄ 0 (.letùïî (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.plus‚ÇÇ (.code x‚ÇÄ) (.code x‚ÇÅ)))))

def expr‚ÇÑ : Expr :=
  .lamùïî (close‚ÇÄ 0 (.letùïî (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.reflect (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ)))))

def expr‚ÇÖ : Expr :=
  .lamùïî (close‚ÇÄ 0 (.letùïî (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.letùïî (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 (.code x‚ÇÇ))))))

def expr‚ÇÜ : Expr :=
  .lamùïî (close‚ÇÄ 0 (.letùïî (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.code (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 x‚ÇÇ))))))

def expr‚Çá : Expr :=
  .lamùïî (close‚ÇÄ 0 (.code (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 x‚ÇÇ))))))

def expr‚Çà : Expr :=
  .reflect (.lam‚ÇÅ (close‚ÇÄ 0 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 x‚ÇÇ))))))

def expr‚Çâ : Expr :=
  .letùïî (.lam‚ÇÅ (close‚ÇÄ 0 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 x‚ÇÇ))))))
    (close‚ÇÄ 3 (.code x‚ÇÉ))

def exprùï© : Expr :=
  .code
    (.lets (.lam‚ÇÅ (close‚ÇÄ 0 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÄ) (close‚ÇÄ 1 (.lets (.plus‚ÇÅ x‚ÇÄ x‚ÇÅ) (close‚ÇÄ 2 x‚ÇÇ)))))) (close‚ÇÄ 3 x‚ÇÉ))

example : step expr‚ÇÄ expr‚ÇÅ := by
  apply step_lvl.stepùïÑ _ _ _ ctxùïÑ.hole
  repeat constructor

example : step expr‚ÇÅ expr‚ÇÇ := by
  apply step_lvl.stepùïÑ _ _ _ (ctxùïÑ.cons‚Ñù _ _ ctx‚Ñù.lamùïî (ctxùïÑ.consùîπ _ _ (ctxùîπ.plusr‚ÇÇ _ _) ctxùïÑ.hole))
  repeat constructor

example : step expr‚ÇÇ expr‚ÇÉ := by
  apply step_lvl.reflect _ _ _ (ctx‚Ñô‚Ñö.cons‚Ñù _ _ ctx‚Ñù.lamùïî ctx‚Ñô‚Ñö.hole) (ctxùîº.consùîπ _ _ (ctxùîπ.plusr‚ÇÇ _ _) ctxùîº.hole)
  repeat constructor

example : step expr‚ÇÉ expr‚ÇÑ := by
  apply step_lvl.stepùïÑ _ _ _ (ctxùïÑ.cons‚Ñù _ _ ctx‚Ñù.lamùïî (ctxùïÑ.cons‚Ñù _ _ (ctx‚Ñù.letùïî _ _) ctxùïÑ.hole))
  repeat constructor

example : step expr‚ÇÑ expr‚ÇÖ := by
  apply step_lvl.reflect _ _ _ (ctx‚Ñô‚Ñö.cons‚Ñù _ _ ctx‚Ñù.lamùïî (ctx‚Ñô‚Ñö.cons‚Ñù _ _ (ctx‚Ñù.letùïî _ _) ctx‚Ñô‚Ñö.hole)) ctxùîº.hole
  repeat constructor

example : step expr‚ÇÖ expr‚ÇÜ := by
  apply step_lvl.stepùïÑ _ _ _ (ctxùïÑ.cons‚Ñù _ _ ctx‚Ñù.lamùïî (ctxùïÑ.cons‚Ñù _ _ (ctx‚Ñù.letùïî _ _) ctxùïÑ.hole))
  repeat constructor

example : step expr‚ÇÜ expr‚Çá := by
  apply step_lvl.stepùïÑ _ _ _ (ctxùïÑ.cons‚Ñù _ _ ctx‚Ñù.lamùïî ctxùïÑ.hole)
  repeat constructor

example : step expr‚Çá expr‚Çà := by
  simp; apply step_lvl.stepùïÑ _ _ _ ctxùïÑ.hole
  repeat constructor

example : step expr‚Çà expr‚Çâ := by
  apply step_lvl.reflect _ _ _ ctx‚Ñô‚Ñö.hole ctxùîº.hole
  repeat constructor

example : step expr‚Çâ exprùï© := by
  apply step_lvl.stepùïÑ _ _ _ ctxùïÑ.hole
  repeat constructor

example : typing [] expr‚ÇÄ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÄ, x‚ÇÄ]
  repeat constructor

example : typing [] expr‚ÇÅ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÅ, x‚ÇÄ]
  repeat constructor

example : typing [] expr‚ÇÇ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÇ, x‚ÇÄ]
  repeat constructor

example : typing [] expr‚ÇÉ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÉ, x‚ÇÄ, x‚ÇÅ]
  repeat constructor

example : typing [] expr‚ÇÑ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÑ, x‚ÇÄ, x‚ÇÅ]
  repeat constructor

example : typing [] expr‚ÇÖ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÖ, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] expr‚ÇÜ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÜ, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] expr‚Çá (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚Çá, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] expr‚Çà (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚Çà, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] expr‚Çâ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚Çâ, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] exprùï© (.rep (.arrow .nat .nat)) :=
  by
  rw [exprùï©, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

end Example1

namespace Example2

/-- Example 2:
  app‚ÇÇ (Œª‚ÇÇ (Œª‚ÇÅ x. x)) (lit‚ÇÇ (lit‚ÇÅ 0))
‚Üí‚ãÜ
code {
  lets x1 = (Œª‚ÇÅ x. x) in
  lets x2 = app‚ÇÅ x1 (lit‚ÇÅ 0) in
  x2
}
-/

@[simp] def f : Expr := (.lam‚ÇÇ (.lam‚ÇÅ (.bvar 0)))
@[simp] def i : Expr := (.lit‚ÇÇ (.lit‚ÇÅ 0))

@[simp] def e1 : Expr := (.app‚ÇÇ f i)
@[simp] def e2 : Expr := (.app‚ÇÇ (.lamùïî (.code (.bvar 0))) i)
@[simp] def e3 : Expr := (.app‚ÇÇ (.reflect (.lam‚ÇÅ (.bvar 0))) i)
@[simp] def e4 : Expr := (.letùïî (.lam‚ÇÅ (.bvar 0)) (.app‚ÇÇ (.code (.bvar 0)) i))
@[simp] def e4' : Expr := (.letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.app‚ÇÇ (.code (.fvar 0)) i)))
@[simp] def e5 : Expr :=
  (.letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.app‚ÇÇ (.code (.fvar 0)) (.code (.lit‚ÇÅ 0)))))
@[simp] def e6 : Expr :=
  (.letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.reflect (.app‚ÇÅ (.fvar 0) (.lit‚ÇÅ 0)))))
@[simp] def e7 : Expr :=
  (.letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.letùïî (.app‚ÇÅ (.fvar 0) (.lit‚ÇÅ 0)) (.code (.bvar 0)))))
@[simp] def e7' : Expr :=
  (.letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.letùïî (.app‚ÇÅ (.fvar 0) (.lit‚ÇÅ 0)) (close‚ÇÄ 1 (.code (.fvar 1))))))
@[simp] def e8 : Expr :=
  (.letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.code (.lets (.app‚ÇÅ (.fvar 0) (.lit‚ÇÅ 0)) (.bvar 0)))))
@[simp] def e9 : Expr :=
  (.code (.lets (.lam‚ÇÅ (.bvar 0)) (.lets (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 0)) (.bvar 0))))

example : step e1 e2 := by
  simp; apply step_lvl.stepùïÑ _ _ _ (ctxùïÑ.consùîπ _ _ (ctxùîπ.appl‚ÇÇ _ _) ctxùïÑ.hole)
  repeat constructor

example : step e2 e3 := by
  simp; apply step_lvl.stepùïÑ _ _ _ (ctxùïÑ.consùîπ _ _ (ctxùîπ.appl‚ÇÇ _ _) ctxùïÑ.hole)
  repeat constructor

example : step e3 e4 := by
  apply step_lvl.reflect _ _ _ ctx‚Ñô‚Ñö.hole
    (ctxùîº.consùîπ (fun x => .app‚ÇÇ x i) id (ctxùîπ.appl‚ÇÇ _ (by aesop)) ctxùîº.hole) (by aesop)

example : e4 = e4' := by simp

example : step e4' e5 := by
  apply step_lvl.stepùïÑ (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 (.app‚ÇÇ (.code (.fvar 0)) x)))
  apply ctxùïÑ.cons‚Ñù (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x))
  constructor; aesop; apply ctxùïÑ.consùîπ; apply ctxùîπ.appr‚ÇÇ; repeat constructor

example : step e5 e6 := by
  apply step_lvl.stepùïÑ (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x))
  apply ctxùïÑ.cons‚Ñù (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x))
  constructor; aesop; repeat constructor

example : step e6 e7 := by
  apply step_lvl.reflect (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x)) id
  apply ctx‚Ñô‚Ñö.cons‚Ñù (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x))
  constructor; aesop; repeat constructor

example : e7 = e7' := by simp

example : step e7' e8 := by
  apply step_lvl.stepùïÑ (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x))
  apply ctxùïÑ.cons‚Ñù (fun x => .letùïî (.lam‚ÇÅ (.bvar 0)) (close‚ÇÄ 0 x))
  constructor; aesop; repeat constructor

example : step e8 e9 := by
  apply step_lvl.stepùïÑ id; repeat constructor

end Example2

namespace Example3

/--
  lets f = {
    letc y = code 42
    in lam‚ÇÅ (code 1)
  } in
  f(0) +‚ÇÇ f(0)
--/


@[simp] def e1 : Expr :=
  (.lets
    (.letùïî (.code (.lit‚ÇÅ 42))
      (.lam‚ÇÅ /-int‚Üírep(int)-/ (.code (.lit‚ÇÅ 1))))
    (.plus‚ÇÇ (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 0)) (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 1))))
@[simp] def e2 : Expr :=
  (.lets
    (.lam‚ÇÅ (.letùïî (.code (.lit‚ÇÅ 42)) (.code (.lit‚ÇÅ 1))))
    (.plus‚ÇÇ (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 0)) (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 1))))

example : step e1 e2 := by
  apply step_lvl.stepùïÑ (fun x => .lets x (.plus‚ÇÇ (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 0)) (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 1))))
  apply ctxùïÑ.consùîπ (fun x => .lets x (.plus‚ÇÇ (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 0)) (.app‚ÇÅ (.bvar 0) (.lit‚ÇÅ 1))))
  repeat constructor

end Example3
