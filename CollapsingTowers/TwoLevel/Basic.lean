
import Mathlib.Data.Nat.Basic
inductive Ty : Type where
  | nat
  | arrow (œÑùïí : Ty) (œÑùïì : Ty)
  | rep (œÑ : Ty)

@[simp]
def wf‚ÇÅ : Ty -> Prop
  | .nat => true
  | .arrow œÑùïí œÑùïì => wf‚ÇÅ œÑùïí /\ wf‚ÇÅ œÑùïì
  | .rep _ => false

@[simp]
def wf‚ÇÇ : Ty -> Prop
  | .nat => false
  | .arrow œÑùïí œÑùïì => wf‚ÇÇ œÑùïí \/ wf‚ÇÇ œÑùïì
  | .rep œÑ => wf‚ÇÅ œÑ

@[simp]
def wf (œÑ : Ty) : Prop :=
  wf‚ÇÅ œÑ \/ wf‚ÇÇ œÑ

inductive Expr : Type where
  | bvar (i : ‚Ñï)
  | fvar (x : ‚Ñï)
  | lam‚ÇÅ (e : Expr)
  | lam‚ÇÇ (e : Expr)
  | app‚ÇÅ (f : Expr) (arg : Expr)
  | app‚ÇÇ (f : Expr) (arg : Expr)
  | lit‚ÇÅ (n : ‚Ñï)
  | lit‚ÇÇ (n : ‚Ñï)
  | plus‚ÇÅ (l : Expr) (r : Expr)
  | plus‚ÇÇ (l : Expr) (r : Expr)
  | code (e : Expr)
  | reflect (e : Expr)
  | lamùïî (e : Expr)
  | lets (b : Expr) (e : Expr)
  | letùïî (b : Expr) (e : Expr)

abbrev TEnv :=
  List Ty

abbrev VEnv :=
  List Expr
