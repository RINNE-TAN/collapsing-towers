
import CollapsingTowers.TwoLevel.Basic
import CollapsingTowers.TwoLevel.OpenClose
import CollapsingTowers.TwoLevel.SmallStep
import CollapsingTowers.TwoLevel.Env
@[simp]
def binds (x : ‚Ñï) (œÑ : Ty) (Œì : TEnv) :=
  indexr x Œì = some œÑ

inductive typing : TEnv -> Expr -> Ty -> Prop where
  | fvar : ‚àÄ Œì x œÑ,
    binds x œÑ Œì ->
    typing Œì (.fvar x) œÑ
  | lam‚ÇÅ : ‚àÄ Œì e œÑùïí œÑùïì,
    typing (œÑùïí :: Œì) (open‚ÇÄ Œì.length e) œÑùïì ->
    closed_at e Œì.length ->
    typing Œì (.lam‚ÇÅ e) (.arrow œÑùïí œÑùïì)
  | lam‚ÇÇ : ‚àÄ Œì e œÑùïí œÑùïì,
    typing (.rep œÑùïí :: Œì) (open‚ÇÄ Œì.length e) (.rep œÑùïì) ->
    closed_at e Œì.length ->
    typing Œì (.lam‚ÇÇ e) (.rep (.arrow œÑùïí œÑùïì))
  | app‚ÇÅ : ‚àÄ Œì f arg œÑùïí œÑùïì,
    typing Œì f (.arrow œÑùïí œÑùïì) ->
    typing Œì arg œÑùïí ->
    typing Œì (.app‚ÇÅ f arg) œÑùïì
  | app‚ÇÇ : ‚àÄ Œì f arg œÑùïí œÑùïì,
    typing Œì f (.rep (.arrow œÑùïí œÑùïì)) ->
    typing Œì arg (.rep œÑùïí) ->
    typing Œì (.app‚ÇÇ f arg) (.rep œÑùïì)
  | plus‚ÇÅ : ‚àÄ Œì l r,
    typing Œì l .nat ->
    typing Œì r .nat ->
    typing Œì (.plus‚ÇÅ l r) .nat
  | plus‚ÇÇ : ‚àÄ Œì l r,
    typing Œì l (.rep .nat) ->
    typing Œì r (.rep .nat) ->
    typing Œì (.plus‚ÇÇ l r) (.rep .nat)
  | lit‚ÇÅ : ‚àÄ Œì n,
    typing Œì (.lit‚ÇÅ n) .nat
  | lit‚ÇÇ : ‚àÄ Œì n,
    typing Œì (.lit‚ÇÇ n) (.rep .nat)
  | code : ‚àÄ Œì e œÑ,
    typing Œì e œÑ ->
    typing Œì (.code e) (.rep œÑ)
  | reflect : ‚àÄ Œì e œÑ,
    typing Œì e œÑ ->
    typing Œì (.reflect e) (.rep œÑ)
  | lamùïî : ‚àÄ Œì e œÑùïí œÑùïì,
    typing (œÑùïí :: Œì) (open‚ÇÄ Œì.length e) (.rep œÑùïì) ->
    Œì.length ‚àâ fv e ->
    typing Œì (.lamùïî e) (.rep (.arrow œÑùïí œÑùïì))
  | lets : ‚àÄ Œì b e œÑùïí œÑùïì,
    typing Œì b œÑùïí ->
    typing (œÑùïí :: Œì) (open‚ÇÄ Œì.length e) œÑùïì ->
    closed_at e Œì.length ->
    typing Œì (.lets b e) œÑùïì
  | letùïî : ‚àÄ Œì b e œÑùïí œÑùïì,
    typing Œì b œÑùïí ->
    typing (œÑùïí :: Œì) (open‚ÇÄ Œì.length e) (.rep œÑùïì) ->
    closed_at e Œì.length ->
    typing Œì (.letùïî b e) (.rep œÑùïì)

example : typing [] expr‚ÇÄ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÄ, x‚ÇÄ]
  repeat constructor

example : typing [] expr‚ÇÅ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÅ, x‚ÇÄ]
  repeat constructor
  repeat simp

example : typing [] expr‚ÇÇ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÇ, x‚ÇÄ]
  repeat constructor
  repeat simp

example : typing [] expr‚ÇÉ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÉ, x‚ÇÄ, x‚ÇÅ]
  repeat constructor
  repeat simp

example : typing [] expr‚ÇÑ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÑ, x‚ÇÄ, x‚ÇÅ]
  repeat constructor
  repeat simp

example : typing [] expr‚ÇÖ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÖ, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor
  repeat simp

example : typing [] expr‚ÇÜ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚ÇÜ, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor
  repeat simp

example : typing [] expr‚Çá (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚Çá, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor
  repeat simp

example : typing [] expr‚Çà (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚Çà, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] expr‚Çâ (.rep (.arrow .nat .nat)) :=
  by
  rw [expr‚Çâ, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor

example : typing [] exprùï© (.rep (.arrow .nat .nat)) :=
  by
  rw [exprùï©, x‚ÇÄ, x‚ÇÅ, x‚ÇÇ]
  repeat constructor
