import CollapsingTowers.TwoLevelRec.OperationalSemantics.SmallStep

lemma step.congruence_under_ctxùîπ.grounded : ‚àÄ B e‚ÇÄ e‚ÇÅ, ctxùîπ B ‚Üí grounded e‚ÇÄ ‚Üí (e‚ÇÄ ‚áù e‚ÇÅ) ‚Üí (B‚ü¶e‚ÇÄ‚üß ‚áù B‚ü¶e‚ÇÅ‚üß) :=
  by
  intros B e‚ÇÄ e‚ÇÅ HB HG Hstep
  cases Hstep
  case pure M _ _ HM Hlc Hhead =>
    rw [ctx_comp B M]
    apply step_lvl.pure
    apply ctxùïÑ.consùîπ; apply HB; apply HM
    apply Hlc; apply Hhead
  case reflect M E _ HP HE _ =>
    have HM := rewrite.ctx‚Ñô_ctxùïÑ _ _ HP
    have HG := grounded.under_ctxùïÑ _ _ _ HM HG
    have HG := grounded.under_ctxùîº _ _ HE HG
    simp at HG

lemma stepn.congruence_under_ctxùîπ.grounded : ‚àÄ B e‚ÇÄ e‚ÇÅ, ctxùîπ B ‚Üí grounded e‚ÇÄ ‚Üí (e‚ÇÄ ‚áù* e‚ÇÅ) ‚Üí (B‚ü¶e‚ÇÄ‚üß ‚áù* B‚ü¶e‚ÇÅ‚üß) :=
  by
  intros B e‚ÇÄ e‚ÇÅ HB HG Hstepn
  induction Hstepn
  case refl => apply stepn.refl
  case multi H _ IH =>
    apply stepn.multi
    apply step.congruence_under_ctxùîπ.grounded
    apply HB; apply HG; apply H
    apply IH; admit

lemma step.congruence_under_ctxùîπ : ‚àÄ lvl B e‚ÇÄ e‚ÇÅ, ctxùîπ B ‚Üí step_lvl lvl e‚ÇÄ e‚ÇÅ ‚Üí ‚àÉ e‚ÇÇ, step_lvl lvl B‚ü¶e‚ÇÄ‚üß e‚ÇÇ :=
  by
  intros lvl B e‚ÇÄ e‚ÇÅ HB Hstep
  cases Hstep with
  | pure M _ _ HM Hlc Hhead =>
    rw [ctx_comp B M]
    constructor; apply step_lvl.pure
    apply ctxùïÑ.consùîπ; apply HB; apply HM
    apply Hlc; apply Hhead
  | reflect P E _ HP HE Hlc =>
    cases HP
    case hole =>
      constructor
      rw [ctx_swap B, ctx_comp B E]
      apply step_lvl.reflect
      apply ctx‚Ñô.hole; apply ctxùîº.consùîπ
      apply HB; apply HE; apply Hlc
    case cons‚Ñö HQ =>
      constructor
      rw [ctx_comp B P]
      apply step_lvl.reflect
      apply ctx‚Ñô.cons‚Ñö; apply ctx‚Ñö.consùîπ
      apply HB; apply HQ; apply HE; apply Hlc

lemma step.congruence_under_ctx‚Ñù : ‚àÄ intro lvl R e‚ÇÄ e‚ÇÅ, ctx‚Ñù intro lvl R ‚Üí step_lvl (lvl + intro) e‚ÇÄ e‚ÇÅ ‚Üí step_lvl lvl R‚ü¶e‚ÇÄ‚üß R‚ü¶e‚ÇÅ‚üß :=
  by
  intros intro lvl R e‚ÇÄ e‚ÇÅ HR Hstep
  cases Hstep with
  | pure M _ _ HM Hlc Hhead =>
    repeat rw [ctx_comp R M]
    apply step_lvl.pure
    apply ctxùïÑ.cons‚Ñù; apply HR; apply HM
    apply Hlc; apply Hhead
  | reflect P _ _ HP HE Hlc =>
    cases HP
    case hole =>
      apply step_lvl.reflect
      apply ctx‚Ñô.cons‚Ñö; apply ctx‚Ñö.hole‚Ñù
      apply HR; apply HE; apply Hlc
    case cons‚Ñö HQ =>
      rw [ctx_comp R P]
      apply step_lvl.reflect
      apply ctx‚Ñô.cons‚Ñö; apply ctx‚Ñö.cons‚Ñù
      apply HR; apply HQ; apply HE; apply Hlc
