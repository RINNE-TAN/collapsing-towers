import CollapsingTowers.TwoLevelRec.OperationalSemantics.Confluence
import CollapsingTowers.TwoLevelRec.OperationalSemantics.Congruence

-- B‚ü¶e‚ÇÄ‚üß ‚áù r
-- ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- B‚ü¶e‚ÇÄ‚üß ‚áù B‚ü¶e‚ÇÅ‚üß ‚àß e‚ÇÄ ‚áù e‚ÇÅ
lemma step.refine :
  ‚àÄ B‚ÇÄ e‚ÇÄ r,
    ctxùîπ B‚ÇÄ ‚Üí
    ¬¨value e‚ÇÄ ‚Üí
    grounded B‚ÇÄ‚ü¶e‚ÇÄ‚üß  ‚Üí
    (B‚ÇÄ‚ü¶e‚ÇÄ‚üß ‚áù r) ‚Üí
    ‚àÉ e‚ÇÅ, B‚ÇÄ‚ü¶e‚ÇÅ‚üß = r ‚àß (e‚ÇÄ ‚áù e‚ÇÅ) :=
  by
  intros B‚ÇÄ e‚ÇÄ r HB‚ÇÄ HNv HG
  generalize HEqe : B‚ÇÄ‚ü¶e‚ÇÄ‚üß = E‚ÇÄ
  intros Hstep
  cases Hstep
  case pure M e‚ÇÅ e‚ÇÇ HM Hlc Hhead =>
    have Hstepable := head_impl_head_stepable _ _ Hlc Hhead
    cases HM
    case hole =>
      exfalso
      apply Hstepable.HAtomicùîπ
      apply HB‚ÇÄ; apply HNv
      symm; apply HEqe
    case consùîπ B‚ÇÅ M HB‚ÇÅ HM =>
      have HNvM‚ÇÅ := not_value.under_ctxùïÑ _ _ _ Hstepable.HNv HM
      have ‚ü®HEqM, HEqB‚ü© := deterministic.under_ctxùîπ _ _ _ _ HB‚ÇÄ HB‚ÇÅ HEqe HNv HNvM‚ÇÅ
      exists M‚ü¶e‚ÇÇ‚üß
      constructor; simp [HEqB]
      rw [HEqM]; apply step_lvl.pure
      apply HM; apply Hlc; apply Hhead
    case cons‚Ñù HR HM =>
      exfalso
      apply deterministic.under_ctxùîπ_ctx‚Ñù
      apply HB‚ÇÄ; apply HR; apply HEqe
      apply HNv; apply not_value.under_ctxùïÑ
      apply Hstepable.HNv; apply HM
  case reflect M E _ HP HE _ =>
    rw [HEqe] at HG
    have HM := rewrite.ctx‚Ñô_ctxùïÑ _ _ HP
    have HG := grounded.decompose_ctxùïÑ _ _ _ HM HG
    have HG := grounded.decompose_ctxùîº _ _ HE HG
    simp at HG

-- B‚ü¶e‚üß ‚áù‚Çñ v
-- ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- k = i + j ‚àß e ‚áù·µ¢ vùïñ ‚àß B‚ü¶vùïñ‚üß ‚áù‚±º v
lemma stepn_indexed.refine :
  ‚àÄ B e‚ÇÄ v k,
    ctxùîπ B ‚Üí
    value v ‚Üí
    grounded B‚ü¶e‚ÇÄ‚üß  ‚Üí
    (B‚ü¶e‚ÇÄ‚üß ‚áù ‚ü¶k‚üß v) ‚Üí
    ‚àÉ i j vùïñ,
      i + j = k ‚àß
      value vùïñ ‚àß
      (e‚ÇÄ ‚áù ‚ü¶i‚üß vùïñ) ‚àß
      (B‚ü¶vùïñ‚üß ‚áù ‚ü¶j‚üß v) :=
  by
  intros B e‚ÇÄ v k HB
  generalize HEqe‚ÇÄ : B‚ü¶e‚ÇÄ‚üß = E
  intros Hvalue HG‚ÇÄ Hstep
  induction Hstep generalizing e‚ÇÄ
  case refl =>
    exfalso; apply not_value.under_ctxùîπ
    apply HB; rw [HEqe‚ÇÄ]; apply Hvalue
  case multi k im‚ÇÄ im‚ÇÅ im‚ÇÇ Hstep Hstepn IH =>
    rw [‚Üê HEqe‚ÇÄ] at Hstep
    match value.decidable e‚ÇÄ with
    | isTrue Hvalue =>
      exists 0, k + 1, e‚ÇÄ
      constructor; omega
      constructor; apply Hvalue
      constructor; apply stepn_indexed.refl
      apply stepn_indexed.multi; apply Hstep; apply Hstepn
    | isFalse HNv =>
      rw [‚Üê HEqe‚ÇÄ] at HG‚ÇÄ
      have ‚ü®e‚ÇÅ, HEqe‚ÇÅ, Hstep‚ÇÄ‚ü© := step.refine _ _ _ HB HNv HG‚ÇÄ Hstep
      have HG‚ÇÅ := grounded.under_step _ _ Hstep HG‚ÇÄ
      have ‚ü®i, j, vùïñ, HEqk, Hvalue, Hstep‚ÇÅ, Hstep‚ÇÇ‚ü© := IH _ HEqe‚ÇÅ Hvalue HG‚ÇÅ
      exists i + 1, j, vùïñ
      constructor; omega
      constructor; apply Hvalue
      constructor; apply stepn_indexed.multi
      apply Hstep‚ÇÄ; apply Hstep‚ÇÅ; apply Hstep‚ÇÇ

lemma stepn_indexed.refine.lam :
  ‚àÄ e arg v j,
    value (.lam e) ‚Üí value arg ‚Üí value v ‚Üí
    ((.app‚ÇÅ (.lam e) arg) ‚áù ‚ü¶j‚üß v) ‚Üí
    ‚àÉ i,
      i + 1 = j ‚àß
      ((opening 0 arg e) ‚áù ‚ü¶i‚üß v) :=
  by
  intros e arg v j HvalueFun HvalueArg Hvalue Hstep
  have HstepHead : (.app‚ÇÅ (.lam e) arg) ‚áù ‚ü¶1‚üß (opening 0 arg e) :=
    by
    apply stepn_indexed.multi _ _ _ _ _ (stepn_indexed.refl _)
    apply step_lvl.pure id; apply ctxùïÑ.hole
    constructor; apply lc.value; apply HvalueFun; apply lc.value; apply HvalueArg
    apply head.app‚ÇÅ; apply HvalueArg
  have ‚ü®z, i, r, HEqIndex, Hstepl, Hstepr‚ü© := stepn_indexed.church_rosser _ _ _ _ _ Hstep HstepHead
  have ‚ü®HEqv, Hz‚ü© := stepn_indexed.value_impl_termination _ _ _ Hvalue Hstepl
  exists i
  constructor; omega
  rw [HEqv]; apply Hstepr

lemma stepn_indexed.refine.app‚ÇÅ :
  ‚àÄ f arg v j,
    value v ‚Üí
    grounded (.app‚ÇÅ f arg) ‚Üí
    ((.app‚ÇÅ f arg) ‚áù ‚ü¶j‚üß v) ‚Üí
    ‚àÉ i‚ÇÄ i‚ÇÅ i‚ÇÇ f·µ• arg·µ•,
      i‚ÇÄ + i‚ÇÅ + i‚ÇÇ = j ‚àß
      value f·µ• ‚àß value arg·µ• ‚àß
      (f ‚áù ‚ü¶i‚ÇÄ‚üß f·µ•) ‚àß (arg ‚áù ‚ü¶i‚ÇÅ‚üß arg·µ•) ‚àß ((.app‚ÇÅ f·µ• arg·µ•) ‚áù ‚ü¶i‚ÇÇ‚üß v) :=
  by
  intros f arg v j Hvalue HG‚ÇÄ Hstep
  have ‚ü®HGFun, HGArg‚ü© := HG‚ÇÄ
  have Hlc := lc.under_stepn_indexed _ _ _ Hstep (lc.value _ Hvalue)
  have ‚ü®i‚ÇÄ, k, f·µ•, HEqj, HvalueFun, Hstep‚ÇÄ, Hstep‚ü© := stepn_indexed.refine _ _ _ _ (ctxùîπ.appl‚ÇÅ _ Hlc.right) Hvalue HG‚ÇÄ Hstep
  have HGFun·µ• := grounded.under_stepn _ _ (stepn_indexed_impl_stepn _ _ _ Hstep‚ÇÄ) HGFun
  have HG‚ÇÅ : grounded (.app‚ÇÅ f·µ• arg) := by constructor; apply HGFun·µ•; apply HGArg
  have ‚ü®i‚ÇÅ, i‚ÇÇ, arg·µ•, HEqj, HvalueArg, Hstep‚ÇÅ, Hstep‚ÇÇ‚ü© := stepn_indexed.refine _ _ _ _ (ctxùîπ.appr‚ÇÅ _ HvalueFun) Hvalue HG‚ÇÅ Hstep
  exists i‚ÇÄ, i‚ÇÅ, i‚ÇÇ, f·µ•, arg·µ•
  constructor; omega
  constructor; apply HvalueFun
  constructor; apply HvalueArg
  constructor; apply Hstep‚ÇÄ
  constructor; apply Hstep‚ÇÅ
  apply Hstep‚ÇÇ

lemma stepn_indexed.refine.lets :
  ‚àÄ b e v j,
    value v ‚Üí
    grounded (.lets b e) ‚Üí
    ((.lets b e) ‚áù ‚ü¶j‚üß v) ‚Üí
    ‚àÉ i‚ÇÄ i‚ÇÅ b·µ•,
      i‚ÇÄ + 1 + i‚ÇÅ = j ‚àß
      value b·µ• ‚àß
      (b ‚áù ‚ü¶i‚ÇÄ‚üß b·µ•) ‚àß ((opening 0 b·µ• e) ‚áù ‚ü¶i‚ÇÅ‚üß v) :=
  by
  intros b e v j Hvalue HG Hstep
  have Hlc := lc.under_stepn_indexed _ _ _ Hstep (lc.value _ Hvalue)
  have ‚ü®i‚ÇÄ, k, b·µ•, HEqj, HvalueBind, Hstep‚ÇÄ, Hstep‚ü© := stepn_indexed.refine _ _ _ _ (ctxùîπ.lets _ Hlc.right) Hvalue HG Hstep
  have HstepHead : (.lets b·µ• e) ‚áù ‚ü¶1‚üß (opening 0 b·µ• e) :=
    by
    apply stepn_indexed.multi _ _ _ _ _ (stepn_indexed.refl _)
    apply step_lvl.pure id; apply ctxùïÑ.hole
    constructor; apply lc.value; apply HvalueBind; apply Hlc.right
    apply head.lets; apply HvalueBind
  have ‚ü®z, i‚ÇÅ, r, HEqIndex, Hstepl, Hstepr‚ü© := stepn_indexed.church_rosser _ _ _ _ _ Hstep HstepHead
  have ‚ü®HEqv, Hz‚ü© := stepn_indexed.value_impl_termination _ _ _ Hvalue Hstepl
  exists i‚ÇÄ, i‚ÇÅ, b·µ•
  constructor; omega
  constructor; apply HvalueBind
  constructor; apply Hstep‚ÇÄ
  rw [HEqv]; apply Hstepr

lemma stepn_indexed.refine.fix‚ÇÅ :
  ‚àÄ f v j,
    value v ‚Üí
    grounded (.fix‚ÇÅ f) ‚Üí
    ((.fix‚ÇÅ f) ‚áù ‚ü¶j‚üß v) ‚Üí
    ‚àÉ i f·µ•,
      i + 1 = j ‚àß
      value f·µ• ‚àß
      (f ‚áù ‚ü¶i‚üß f·µ•) ‚àß v = .lam (.app‚ÇÅ (.app‚ÇÅ f·µ• (.fix‚ÇÅ f·µ•)) (.bvar 0))  :=
  by
  intros f v j Hvalue‚ÇÄ HG Hstep
  have ‚ü®i‚ÇÄ, k, f·µ•, HEqj, HvalueFun, Hstep‚ÇÄ, Hstep‚ü© := stepn_indexed.refine _ _ _ _ ctxùîπ.fix‚ÇÅ Hvalue‚ÇÄ HG Hstep
  have HstepHead : (.fix‚ÇÅ f·µ•) ‚áù ‚ü¶1‚üß .lam (.app‚ÇÅ (.app‚ÇÅ f·µ• (.fix‚ÇÅ f·µ•)) (.bvar 0)) :=
    by
    apply stepn_indexed.multi _ _ _ _ _ (stepn_indexed.refl _)
    apply step_lvl.pure id; apply ctxùïÑ.hole
    simp; apply lc.value; apply HvalueFun
    apply head.fix‚ÇÅ; apply HvalueFun
  have Hvalue‚ÇÅ : value (.lam (.app‚ÇÅ (.app‚ÇÅ f·µ• (.fix‚ÇÅ f·µ•)) (.bvar 0))) :=
    by
    apply value.lam; simp; apply lc.inc
    apply lc.value; apply HvalueFun; omega
  have ‚ü®z‚ÇÄ, z‚ÇÅ, r, HEqIndex, Hstepl, Hstepr‚ü© := stepn_indexed.church_rosser _ _ _ _ _ Hstep HstepHead
  have ‚ü®HEqv‚ÇÄ, Hz‚ÇÄ‚ü© := stepn_indexed.value_impl_termination _ _ _ Hvalue‚ÇÄ Hstepl
  have ‚ü®HEqv‚ÇÅ, Hz‚ÇÅ‚ü© := stepn_indexed.value_impl_termination _ _ _ Hvalue‚ÇÅ Hstepr
  exists i‚ÇÄ, f·µ•
  constructor; omega
  constructor; apply HvalueFun
  constructor; apply Hstep‚ÇÄ
  rw [HEqv‚ÇÄ, HEqv‚ÇÅ]

lemma stepn_indexed.refine.fix‚ÇÅ.induction :
  ‚àÄ f arg v j,
    value f ‚Üí value arg ‚Üí value v ‚Üí
    grounded (.fix‚ÇÅ f) ‚Üí
    ((.app‚ÇÅ (.lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0))) arg) ‚áù ‚ü¶j‚üß v) ‚Üí
    ‚àÉ i,
      i + 2 = j ‚àß
      (.app‚ÇÅ (.app‚ÇÅ f (.lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0)))) arg) ‚áù ‚ü¶i‚üß v :=
  by
  intros f arg v j HvalueFun HvalueArg Hvalue HG Hstep
  have HstepHead‚ÇÄ : (.app‚ÇÅ (.lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0))) arg) ‚áù (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) arg) :=
    by
    apply step_lvl.pure id; apply ctxùïÑ.hole
    simp; constructor
    apply lc.inc; apply lc.value; apply HvalueFun; omega
    apply lc.value; apply HvalueArg
    have HEqSubst‚ÇÄ : .app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) arg = opening 0 arg (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0)) :=
      by
      simp; rw [identity.opening]
      apply lc.inc; apply lc.value; apply HvalueFun; omega
    rw [HEqSubst‚ÇÄ]; apply head.app‚ÇÅ; apply HvalueArg
  have HstepHead‚ÇÅ : (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) arg) ‚áù (.app‚ÇÅ (.app‚ÇÅ f (.lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0)))) arg) :=
    by
    apply step.grounded.congruence_under_ctxùîπ _ _ _ (ctxùîπ.appl‚ÇÅ _ (lc.value _ HvalueArg)) (by simp; apply HG)
    apply step.grounded.congruence_under_ctxùîπ _ _ _ (ctxùîπ.appr‚ÇÅ _ HvalueFun) (by simp; apply HG)
    apply step_lvl.pure id; apply ctxùïÑ.hole
    simp; apply lc.value; apply HvalueFun
    apply head.fix‚ÇÅ; apply HvalueFun
  have HstepHead : (.app‚ÇÅ (.lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0))) arg) ‚áù ‚ü¶2‚üß (.app‚ÇÅ (.app‚ÇÅ f (.lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0)))) arg) :=
    by
    apply stepn_indexed.multi; apply HstepHead‚ÇÄ
    apply stepn_indexed.multi; apply HstepHead‚ÇÅ
    apply stepn_indexed.refl
  have ‚ü®z, i, r, HEqIndex, Hstepl, Hstepr‚ü© := stepn_indexed.church_rosser _ _ _ _ _ Hstep HstepHead
  have ‚ü®HEqv, Hz‚ü© := stepn_indexed.value_impl_termination _ _ _ Hvalue Hstepl
  exists i
  constructor; omega
  rw [HEqv]; apply Hstepr
