import CollapsingTowers.TwoLevelRec.Syntax.LocallyNameless

lemma intro.mapingùïî : ‚àÄ x e i, closed_at e x ‚Üí ({i ‚Ü§ x} subst x (.code (.fvar x)) ({i ‚Ü¶ x} e)) = codify i e :=
  by
  intros x e i Hclosed
  induction e generalizing i with
  | bvar j => by_cases HEq : j = i; rw [HEq]; simp; simp [if_neg HEq]
  | fvar y => simp at *; by_cases HEq : x = y; omega; rw [if_neg HEq]; simp; apply HEq
  | lit => simp
  | lam _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    simp; apply IH; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right

lemma intro.subst : ‚àÄ x e v i, closed_at e x ‚Üí subst x v (opening i (.fvar x) e) = opening i v e :=
  by
  intros _ e _ i Hclosed
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [HEq]
    . simp [if_neg HEq]
  | fvar => simp at *; omega
  | lit => simp
  | lam _ IH
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | lamùïî _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    simp; apply IH; apply Hclosed
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right
