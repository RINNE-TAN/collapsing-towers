import CollapsingTowers.TwoLevelRec.Syntax.Transform
import CollapsingTowers.TwoLevelRec.Syntax.Fv

-- closedness condition for free variables
@[simp]
def closed_at (e : Expr) (x : ‚Ñï) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar y => y < x
  | .lam e => closed_at e x
  | .lift e => closed_at e x
  | .app‚ÇÅ f arg => closed_at f x ‚àß closed_at arg x
  | .app‚ÇÇ f arg => closed_at f x ‚àß closed_at arg x
  | .binary‚ÇÅ _ l r => closed_at l x ‚àß closed_at r x
  | .binary‚ÇÇ _ l r => closed_at l x ‚àß closed_at r x
  | .lit _ => true
  | .run e => closed_at e x
  | .code e => closed_at e x
  | .reflect e => closed_at e x
  | .lamùïî e => closed_at e x
  | .lets b e => closed_at b x ‚àß closed_at e x
  | .letsùïî b e => closed_at b x ‚àß closed_at e x
  | .fix‚ÇÅ e => closed_at e x
  | .fix‚ÇÇ e => closed_at e x
  | .ifz‚ÇÅ c l r => closed_at c x ‚àß closed_at l x ‚àß closed_at r x
  | .ifz‚ÇÇ c l r => closed_at c x ‚àß closed_at l x ‚àß closed_at r x

@[simp]
def closed e := closed_at e 0

-- closedness condition for bound variables
@[simp]
def lc_at (e : Expr) (i : ‚Ñï) : Prop :=
  match e with
  | .bvar j => j < i
  | .fvar _ => true
  | .lam e => lc_at e (i + 1)
  | .lift e => lc_at e i
  | .app‚ÇÅ f arg => lc_at f i ‚àß lc_at arg i
  | .app‚ÇÇ f arg => lc_at f i ‚àß lc_at arg i
  | .binary‚ÇÅ _ l r => lc_at l i ‚àß lc_at r i
  | .binary‚ÇÇ _ l r => lc_at l i ‚àß lc_at r i
  | .lit _ => true
  | .run e => lc_at e i
  | .code e => lc_at e i
  | .reflect e => lc_at e i
  | .lamùïî e => lc_at e (i + 1)
  | .lets b e => lc_at b i ‚àß lc_at e (i + 1)
  | .letsùïî b e => lc_at b i ‚àß lc_at e (i + 1)
  | .fix‚ÇÅ e => lc_at e i
  | .fix‚ÇÇ e => lc_at e i
  | .ifz‚ÇÅ c l r => lc_at c i ‚àß lc_at l i ‚àß lc_at r i
  | .ifz‚ÇÇ c l r => lc_at c i ‚àß lc_at l i ‚àß lc_at r i

@[simp]
def lc e := lc_at e 0

@[simp]
def wf_at (e : Expr) (x : ‚Ñï) : Prop := lc e ‚àß closed_at e x

@[simp]
def wf (e : Expr) : Prop := wf_at e 0

@[simp]
def mwf : Subst ‚Üí Prop
  | [] => true
  | v :: Œ≥ => wf v ‚àß mwf Œ≥

lemma closed.inc : ‚àÄ x y e, closed_at e x ‚Üí x ‚â§ y ‚Üí closed_at e y :=
  by
  intros x y e Hclosed Hxy
  induction e with
  | bvar| lit => simp
  | fvar => simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hclosed
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right

lemma closed.dec.not_in_fv : ‚àÄ e x, closed_at e (x + 1) ‚Üí x ‚àâ fv e ‚Üí closed_at e x :=
  by
  intros e x Hclosed HFv
  induction e with
  | bvar| lit => simp
  | fvar y => simp at *; omega
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hclosed; apply HFv
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply Hclosed.left; apply HFv.left
    apply IH‚ÇÅ; apply Hclosed.right; apply HFv.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply Hclosed.left; apply HFv.left.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left; apply HFv.left.right
    apply IH‚ÇÇ; apply Hclosed.right.right; apply HFv.right

lemma closed.dec.under_subst : ‚àÄ x e v, closed_at v x ‚Üí closed_at e (x + 1) ‚Üí closed_at (subst x v e) x :=
  by
  intros x e v Hv He
  induction e with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . simp [if_pos HEq]; apply Hv
    . simp [if_neg HEq]; simp at He; omega
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply He
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    apply IH‚ÇÄ; apply He.left; constructor
    apply IH‚ÇÅ; apply He.right.left
    apply IH‚ÇÇ; apply He.right.right

lemma closed.under_closing : ‚àÄ e x i, closed_at e (x + 1) ‚Üî closed_at ({i ‚Ü§ x} e) x :=
  by
  intros e x i
  induction e generalizing i with
  | bvar| lit => simp
  | fvar y =>
    by_cases HEq : x = y
    . simp [HEq]
    . simp [if_neg HEq]; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hclosed; constructor
      apply (IH‚ÇÄ _).mp; apply Hclosed.left
      apply (IH‚ÇÅ _).mp; apply Hclosed.right
    . intro Hclosed; constructor
      apply (IH‚ÇÄ _).mpr; apply Hclosed.left
      apply (IH‚ÇÅ _).mpr; apply Hclosed.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    . intro Hclosed; constructor
      apply (IH‚ÇÄ _).mp; apply Hclosed.left; constructor
      apply (IH‚ÇÅ _).mp; apply Hclosed.right.left
      apply (IH‚ÇÇ _).mp; apply Hclosed.right.right
    . intro Hclosed; constructor
      apply (IH‚ÇÄ _).mpr; apply Hclosed.left; constructor
      apply (IH‚ÇÅ _).mpr; apply Hclosed.right.left
      apply (IH‚ÇÇ _).mpr; apply Hclosed.right.right

lemma closed.under_opening : ‚àÄ e x i, closed_at e x ‚Üí closed_at ({i ‚Ü¶ x} e) (x + 1) :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y => simp; omega
  | bvar j =>
    by_cases HEq : j = i
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclosed; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    intro Hclosed; constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right

lemma closed.under_shiftl : ‚àÄ x y e n, closed_at e x ‚Üí closed_at (shiftl y n e) (x + n) :=
  by
  intros x y e n Hclosed
  induction e with
  | bvar j => simp
  | fvar z =>
    by_cases HLe : y ‚â§ z
    . simp [if_pos HLe]; apply Hclosed
    . simp [if_neg HLe]; simp at Hclosed; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hclosed
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right

lemma closed.under_subst : ‚àÄ x e v y, closed_at v y ‚Üí closed_at e y ‚Üí closed_at (subst x v e) y :=
  by
  intros x e v y Hv He
  induction e generalizing y with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . simp [if_pos HEq]; apply Hv
    . simp [if_neg HEq]; apply He
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hv; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hv; apply He
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left; constructor
    apply IH‚ÇÅ; apply Hv; apply He.right.left
    apply IH‚ÇÇ; apply Hv; apply He.right.right

lemma closed.under_shiftr : ‚àÄ x e, closed_at e x ‚Üí closed_at (shiftr x e) x :=
  by
  intros x e Hclosed
  induction e with
  | bvar j => simp
  | fvar z =>
    by_cases Hxz : x < z
    . simp [if_pos Hxz]; simp at Hclosed; omega
    . simp [if_neg Hxz]; simp at Hclosed; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hclosed
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    apply IH‚ÇÄ; apply Hclosed.left; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left
    apply IH‚ÇÇ; apply Hclosed.right.right

lemma closed.dec.under_shiftr :
  ‚àÄ x y e, closed_at e (x + y + 1) ‚Üí y ‚àâ fv e ‚Üí closed_at (shiftr y e) (x + y) :=
  by
  intros x y e Hclosed HFv
  cases x
  case zero =>
    simp at *
    apply closed.under_shiftr
    apply closed.dec.not_in_fv
    apply Hclosed; apply HFv
  case succ x =>
    induction e with
    | bvar| lit => simp
    | fvar z =>
      by_cases HEq : y < z
      . simp [if_pos HEq]; simp at Hclosed; omega
      . simp [if_neg HEq]; simp at Hclosed; omega
    | lam _ IH
    | lift _ IH
    | lamùïî _ IH
    | code _ IH
    | reflect _ IH
    | run _ IH
    | fix‚ÇÅ _ IH
    | fix‚ÇÇ _ IH =>
      apply IH; apply HFv; apply Hclosed
    | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
    | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
    | lets _ _ IH‚ÇÄ IH‚ÇÅ
    | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
    | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
    | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
      simp at HFv; constructor
      apply IH‚ÇÄ; apply HFv.left; apply Hclosed.left
      apply IH‚ÇÅ; apply HFv.right; apply Hclosed.right
    | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
    | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
      simp at HFv; constructor
      apply IH‚ÇÄ; apply HFv.left.left; apply Hclosed.left; constructor
      apply IH‚ÇÅ; apply HFv.left.right; apply Hclosed.right.left
      apply IH‚ÇÇ; apply HFv.right; apply Hclosed.right.right

lemma closed.under_erase : ‚àÄ e x, closed_at e x ‚Üî closed_at ‚Äñe‚Äñ x :=
  by
  intros e x
  induction e with
  | fvar| lit| bvar => simp
  | code _ IH
  | reflect _ IH
  | lift _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp [IH‚ÇÄ, IH‚ÇÅ, IH‚ÇÇ]

lemma closed.under_msubst : ‚àÄ Œ≥ e, mwf Œ≥ ‚Üí closed_at e Œ≥.length ‚Üí closed (msubst Œ≥ e) :=
  by
  intros Œ≥ e HŒ≥ He
  induction Œ≥ generalizing e
  case nil => apply He
  case cons IH =>
    apply IH; apply HŒ≥.right
    apply closed.dec.under_subst; apply closed.inc
    apply HŒ≥.left.right; omega; apply He

lemma closed_impl_not_in_fv :
  ‚àÄ x y e,
    closed_at e x ‚Üí
    y ‚â• x ‚Üí
    y ‚àâ fv e :=
  by
  intros x y e Hclosed HGe HIn
  induction e with
  | bvar| lit => nomatch HIn
  | fvar => simp at *; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hclosed; apply HIn
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    cases HIn
    case inl H‚ÇÄ =>
      apply IH‚ÇÄ; apply Hclosed.left; apply H‚ÇÄ
    case inr H‚ÇÅ =>
      apply IH‚ÇÅ; apply Hclosed.right; apply H‚ÇÅ
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    cases HIn
    case inl HIn =>
      cases HIn
      case inl H‚ÇÄ =>
        apply IH‚ÇÄ; apply Hclosed.left; apply H‚ÇÄ
      case inr H‚ÇÅ =>
        apply IH‚ÇÅ; apply Hclosed.right.left; apply H‚ÇÅ
    case inr H‚ÇÇ =>
      apply IH‚ÇÇ; apply Hclosed.right.right; apply H‚ÇÇ

lemma closed_iff_fv_empty : ‚àÄ e, closed e ‚Üî fv e = ‚àÖ :=
  by
  intro e
  induction e with
  | bvar => simp
  | fvar => simp
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro HFv; simp at HFv
      simp; constructor
      apply IH‚ÇÄ.mp; apply HFv.left
      apply IH‚ÇÅ.mp; apply HFv.right
    . intro Hclosed; simp at Hclosed
      simp; constructor
      apply IH‚ÇÄ.mpr; apply Hclosed.left
      apply IH‚ÇÅ.mpr; apply Hclosed.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    . intro HFv; simp at HFv
      simp; constructor; constructor
      apply IH‚ÇÄ.mp; apply HFv.left
      apply IH‚ÇÅ.mp; apply HFv.right.left
      apply IH‚ÇÇ.mp; apply HFv.right.right
    . intro Hclosed; simp at Hclosed
      simp; constructor
      apply IH‚ÇÄ.mpr; apply Hclosed.left.left; constructor
      apply IH‚ÇÅ.mpr; apply Hclosed.left.right
      apply IH‚ÇÇ.mpr; apply Hclosed.right

lemma lc.inc: ‚àÄ e i j, lc_at e i ‚Üí i ‚â§ j ‚Üí lc_at e j :=
  by
  intros e i j Hclosed HLe
  induction e generalizing i j with
  | bvar => simp at *; omega
  | fvar| lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply Hclosed; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hclosed.left; omega
    apply IH‚ÇÅ; apply Hclosed.right; omega
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    apply IH‚ÇÄ; apply Hclosed.left; omega; constructor
    apply IH‚ÇÅ; apply Hclosed.right.left; omega
    apply IH‚ÇÇ; apply Hclosed.right.right; omega

lemma lc.under_opening : ‚àÄ i x e, lc_at ({i ‚Ü¶ x} e) i ‚Üî lc_at e (i + 1) :=
  by
  intros i x e
  induction e generalizing i with
  | bvar j =>
    by_cases HEq : j = i
    . simp [if_pos HEq]; omega
    . simp [if_neg HEq]; omega
  | fvar => simp
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hlc; constructor
      apply (IH‚ÇÄ _).mp; apply Hlc.left
      apply (IH‚ÇÅ _).mp; apply Hlc.right
    . intro Hlc; constructor
      apply (IH‚ÇÄ _).mpr; apply Hlc.left
      apply (IH‚ÇÅ _).mpr; apply Hlc.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    . intro Hlc; constructor
      apply (IH‚ÇÄ _).mp; apply Hlc.left; constructor
      apply (IH‚ÇÅ _).mp; apply Hlc.right.left
      apply (IH‚ÇÇ _).mp; apply Hlc.right.right
    . intro Hlc; constructor
      apply (IH‚ÇÄ _).mpr; apply Hlc.left; constructor
      apply (IH‚ÇÅ _).mpr; apply Hlc.right.left
      apply (IH‚ÇÇ _).mpr; apply Hlc.right.right

lemma lc.under_closing : ‚àÄ e x i j, j < i ‚Üí lc_at e i ‚Üí lc_at ({j ‚Ü§ x} e) i :=
  by
  intros e x i j Hlt
  induction e generalizing i j with
  | bvar| lit => simp
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp; omega
    . simp; rw [if_neg HEq]; simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hlc; constructor
    apply IH‚ÇÄ; omega; apply Hlc.left
    apply IH‚ÇÅ; omega; apply Hlc.right
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    intro Hlc; constructor
    apply IH‚ÇÄ; omega; apply Hlc.left; constructor
    apply IH‚ÇÅ; omega; apply Hlc.right.left
    apply IH‚ÇÇ; omega; apply Hlc.right.right

lemma lc.under_subst : ‚àÄ x e v i, lc_at v i ‚Üí lc_at e i ‚Üí lc_at (subst x v e) i :=
  by
  intros x e v i Hv He
  induction e generalizing i with
  | bvar => apply He
  | fvar y =>
    by_cases HEq : x = y
    . simp [if_pos HEq]; apply Hv
    . simp [if_neg HEq]
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    apply IH; apply lc.inc
    apply Hv; omega; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | lets _ _ IHb IH
  | letsùïî _ _ IHb IH =>
    constructor
    apply IHb; apply Hv; apply He.left
    apply IH; apply lc.inc
    apply Hv; omega; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply Hv; apply He
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left; constructor
    apply IH‚ÇÅ; apply Hv; apply He.right.left
    apply IH‚ÇÇ; apply Hv; apply He.right.right

lemma lc.under_msubst : ‚àÄ i Œ≥ e, mwf Œ≥ ‚Üí lc_at e i ‚Üí lc_at (msubst Œ≥ e) i :=
  by
  intros i Œ≥ e HŒ≥ He
  induction Œ≥ generalizing e
  case nil => apply He
  case cons IH =>
    apply IH; apply HŒ≥.right
    apply lc.under_subst; apply lc.inc
    apply HŒ≥.left.left; omega; apply He

lemma lc.under_erase : ‚àÄ e i, lc_at e i ‚Üî lc_at ‚Äñe‚Äñ i :=
  by
  intros e i
  induction e generalizing i with
  | fvar| lit| bvar => simp
  | code _ IH
  | reflect _ IH
  | lift _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH
  | fix‚ÇÅ _ IH
  | fix‚ÇÇ _ IH =>
    simp [IH]
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | binary‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp [IH‚ÇÄ, IH‚ÇÅ]
  | ifz‚ÇÅ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ
  | ifz‚ÇÇ _ _ _ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ =>
    simp [IH‚ÇÄ, IH‚ÇÅ, IH‚ÇÇ]
