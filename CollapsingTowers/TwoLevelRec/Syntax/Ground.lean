import CollapsingTowers.TwoLevelRec.Syntax.SyntacticTrans

@[simp]
def grounded (e : Expr) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar _ => true
  | .lam e => grounded e
  | .lift _ => false
  | .app‚ÇÅ f arg => grounded f ‚àß grounded arg
  | .app‚ÇÇ _ _ => false
  | .lit _ => true
  | .run _ => false
  | .code _ => false
  | .reflect _ => false
  | .lamùïî _ => false
  | .lets b e => grounded b ‚àß grounded e
  | .letsùïî _ _ => false
  | .fix‚ÇÅ e => grounded e
  | .fix‚ÇÇ _ => false

lemma erasable.lift : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.lift e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma erasable.run : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.run e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma erasable.code : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.code e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma erasable.reflect : ‚àÄ e‚ÇÄ e‚ÇÅ, ‚Äñe‚ÇÄ‚Äñ ‚â† Expr.reflect e‚ÇÅ :=
  by
  intros e‚ÇÄ e‚ÇÅ
  induction e‚ÇÄ <;> simp
  all_goals next IH => apply IH

lemma grounded_iff_erase_identity : ‚àÄ e, grounded e ‚Üî ‚Äñe‚Äñ = e :=
  by
  intros e
  induction e <;> simp
  case lam IH => apply IH
  case app‚ÇÅ IH‚ÇÄ IH‚ÇÅ => rw [IH‚ÇÄ, IH‚ÇÅ]
  case lift => apply erasable.lift
  case run => apply erasable.run
  case code => apply erasable.code
  case reflect => apply erasable.reflect
  case lets IH‚ÇÄ IH‚ÇÅ => rw [IH‚ÇÄ, IH‚ÇÅ]
  case fix‚ÇÅ IH => apply IH
