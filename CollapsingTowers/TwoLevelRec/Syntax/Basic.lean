import Mathlib.Order.Basic

inductive BinOp : Type where
  | add
  | mul
  | sub

@[simp]
def eval : BinOp ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
  | .add => Nat.add
  | .mul => Nat.mul
  | .sub => Nat.sub

inductive Expr : Type where
  | bvar (i : ‚Ñï)
  | fvar (x : ‚Ñï)
  | lam (e : Expr)
  | app‚ÇÅ (f : Expr) (arg : Expr)
  | app‚ÇÇ (f : Expr) (arg : Expr)
  | lit (n : ‚Ñï)
  | binary‚ÇÅ (op : BinOp) (l : Expr) (r : Expr)
  | binary‚ÇÇ (op : BinOp) (l : Expr) (r : Expr)
  | lift (e : Expr)
  | run (e : Expr)
  | code (e : Expr)
  | reflect (e : Expr)
  | lamùïî (e : Expr)
  | lets (b : Expr) (e : Expr)
  | letsùïî (b : Expr) (e : Expr)
  | fix‚ÇÅ (e : Expr)
  | fix‚ÇÇ (e : Expr)
  | ifz‚ÇÅ (c : Expr) (l : Expr) (r : Expr)
  | ifz‚ÇÇ (c : Expr) (l : Expr) (r : Expr)
