import CollapsingTowers.TwoLevelRec.LogicalEquiv.Defs

-- Œì ‚ä¢ e‚ÇÄ : œÑ ‚Üí
-- ‚ÄñŒì‚Äñ ‚ä® ‚Äñe‚ÇÄ‚Äñ ‚âàùëôùëúùëî ‚Äñe‚ÇÅ‚Äñ : ‚ÄñœÑ‚Äñ
-- ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- Œì ‚ä¢ B‚ü¶e‚ÇÄ‚üß : œÑ ‚Üí
-- ‚ÄñŒì‚Äñ ‚ä® ‚ÄñB‚ü¶e‚ÇÄ‚üß‚Äñ ‚âàùëôùëúùëî ‚ÄñB‚ü¶e‚ÇÅ‚üß‚Äñ : ‚ÄñœÑ‚Äñ

lemma consistency.under_ctxùîπ :
  ‚àÄ Œì B e‚ÇÄ e‚ÇÅ œÑ œÜ,
    ctxùîπ B ‚Üí
    (‚àÄ œÑ œÜ,
      typing Œì ùüô e‚ÇÄ œÑ œÜ ‚Üí
      log_equiv (erase_env Œì) ‚Äñe‚ÇÄ‚Äñ ‚Äñe‚ÇÅ‚Äñ (erase_ty œÑ)
    ) ‚Üí
    typing Œì ùüô B‚ü¶e‚ÇÄ‚üß œÑ œÜ ‚Üí
    log_equiv (erase_env Œì) ‚ÄñB‚ü¶e‚ÇÄ‚üß‚Äñ ‚ÄñB‚ü¶e‚ÇÅ‚üß‚Äñ (erase_ty œÑ) :=
  by
  intros Œì B e‚ÇÄ e‚ÇÅ œÑ œÜ HB IH HœÑ
  cases HB
  case appl‚ÇÅ =>
    cases HœÑ
    case app‚ÇÅ Harg HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.app‚ÇÅ
        . assumption
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Harg
  case appr‚ÇÅ =>
    cases HœÑ
    case app‚ÇÅ HX Hf =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.app‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hf
        . assumption
  case appl‚ÇÇ =>
    cases HœÑ
    case app‚ÇÇ HX Harg =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.app‚ÇÅ
        . assumption
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Harg
  case appr‚ÇÇ =>
    cases HœÑ
    case app‚ÇÇ Hf HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.app‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hf
        . assumption
  case binaryl‚ÇÅ =>
    cases HœÑ
    case binary‚ÇÅ HX Hr =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.binary‚ÇÅ
        . assumption
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hr
  case binaryr‚ÇÅ =>
    cases HœÑ
    case binary‚ÇÅ Hl HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.binary‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hl
        . assumption
  case binaryl‚ÇÇ HX Hr =>
    cases HœÑ
    case binary‚ÇÇ HX Hr =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.binary‚ÇÅ
        . assumption
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hr
  case binaryr‚ÇÇ =>
    cases HœÑ
    case binary‚ÇÇ Hl HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.binary‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hl
        . assumption
  case lift =>
    cases HœÑ
    case lift_lam HX => apply IH _ _ HX
    case lift_lit HX => apply IH _ _ HX
  case lets Hlc =>
    cases HœÑ
    case lets œÑùïí _ _ _ HX Hclosed He =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.lets
        . apply grounded_ty.under_erase œÑùïí
        . rw [‚Üê erase_env.length, ‚Üê closed.under_erase]
          apply Hclosed
        . rw [‚Üê erase_env.length, ‚Üê closed.under_erase]
          apply Hclosed
        . assumption
        . rw [‚Üê erase_env.length, ‚Üê erase_env, ‚Üê comm.erase_opening]
          apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ He
  case fix‚ÇÅ =>
    cases HœÑ
    case fix‚ÇÅ HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.fix‚ÇÅ; assumption
  case fix‚ÇÇ =>
    cases HœÑ
    case fix‚ÇÇ HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.fix‚ÇÅ; assumption
  case ifz‚ÇÅ =>
    cases HœÑ
    case ifz‚ÇÅ HX Hl Hr =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.ifz‚ÇÅ
        . assumption
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hl
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hr
  case ifz‚ÇÇ =>
    cases HœÑ
    case ifz‚ÇÇ HX Hl Hr =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor; all_goals
      . apply compatibility.ifz‚ÇÅ
        . assumption
        . apply log_approx.fundamental
          apply typing_reification.erase.safety _ _ _ _ Hl
        . apply log_approx.fundamental
          apply typing_reification.erase.safety _ _ _ _ Hr

-- Œì ‚ä¢ e‚ÇÄ : œÑ ‚Üí
-- ‚ÄñŒì‚Äñ ‚ä® ‚Äñe‚ÇÄ‚Äñ ‚âàùëôùëúùëî ‚Äñe‚ÇÅ‚Äñ : ‚ÄñœÑ‚Äñ
-- ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- Œì ‚ä¢ R‚ü¶e‚ÇÄ‚üß : œÑ ‚Üí
-- ‚ÄñŒì‚Äñ ‚ä® ‚ÄñR‚ü¶e‚ÇÄ‚üß‚Äñ ‚âàùëôùëúùëî ‚ÄñR‚ü¶e‚ÇÅ‚üß‚Äñ : ‚ÄñœÑ‚Äñ
lemma consistency.under_ctx‚Ñù :
  ‚àÄ intro Œì R e‚ÇÄ e‚ÇÅ œÑ œÜ,
    ctx‚Ñù intro Œì.length R ‚Üí
    lc e‚ÇÄ ‚Üí
    (‚àÄ Œî œÑ œÜ,
      Œî.length = Œì.length + intro ‚Üí
      typing Œî ùüô e‚ÇÄ œÑ œÜ ‚Üí
      log_equiv (erase_env Œî) ‚Äñe‚ÇÄ‚Äñ ‚Äñe‚ÇÅ‚Äñ (erase_ty œÑ)
    ) ‚Üí
    typing Œì ùüô R‚ü¶e‚ÇÄ‚üß œÑ œÜ ‚Üí
    log_equiv (erase_env Œì) ‚ÄñR‚ü¶e‚ÇÄ‚üß‚Äñ ‚ÄñR‚ü¶e‚ÇÅ‚üß‚Äñ (erase_ty œÑ) :=
  by
  intros intro Œì R e‚ÇÄ e‚ÇÅ œÑ œÜ HR Hlc IH HœÑ
  cases HR
  case lamùïî =>
    cases HœÑ
    case lamùïî Hwbt HX Hclosed =>
      cases HX
      all_goals next HX =>
        rw [‚Üê List.singleton_append, identity.opening_closing _ _ _ Hlc] at HX
        have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH (_ :: Œì) _ _ (by simp) HX
        have ‚ü®HœÑ‚ÇÄ, HœÑ‚ÇÅ, _‚ü© := IH‚ÇÄ
        have ‚ü®Hlc‚ÇÄ, Hclosed‚ÇÄ‚ü© := typing.wf _ _ _ _ _ HœÑ‚ÇÄ
        have ‚ü®Hlc‚ÇÅ, Hclosed‚ÇÅ‚ü© := typing.wf _ _ _ _ _ HœÑ‚ÇÅ
        simp [‚Üê lc.under_erase] at Hlc‚ÇÄ Hlc‚ÇÅ
        simp [‚Üê erase_env.length] at Hclosed‚ÇÄ Hclosed‚ÇÅ
        constructor; all_goals
        . apply compatibility.lam
          . apply grounded_ty.under_erase
          . rw [‚Üê erase_env.length, comm.erase_closing, ‚Üê closed.under_closing]
            assumption
          . rw [‚Üê erase_env.length, comm.erase_closing, ‚Üê closed.under_closing]
            assumption
          . rw [‚Üê erase_env.length, ‚Üê comm.erase_opening, ‚Üê comm.erase_opening]
            rw [identity.opening_closing _ _ _ Hlc‚ÇÄ, identity.opening_closing _ _ _ Hlc‚ÇÅ]
            assumption
  case letsùïî =>
    cases HœÑ
    case letsùïî œÑùïí œÑùïì _ Hwbt HœÑb HX Hclosed =>
      cases HX
      all_goals next HX =>
        rw [‚Üê List.singleton_append, identity.opening_closing _ _ _ Hlc] at HX
        have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH (_ :: Œì) _ _ (by simp) HX
        have ‚ü®HœÑ‚ÇÄ, HœÑ‚ÇÅ, _‚ü© := IH‚ÇÄ
        have ‚ü®Hlc‚ÇÄ, Hclosed‚ÇÄ‚ü© := typing.wf _ _ _ _ _ HœÑ‚ÇÄ
        have ‚ü®Hlc‚ÇÅ, Hclosed‚ÇÅ‚ü© := typing.wf _ _ _ _ _ HœÑ‚ÇÅ
        simp [‚Üê lc.under_erase] at Hlc‚ÇÄ Hlc‚ÇÅ
        simp [‚Üê erase_env.length] at Hclosed‚ÇÄ Hclosed‚ÇÅ
        constructor; all_goals
        . apply compatibility.lets
          . apply grounded_ty.under_erase œÑùïí
          . rw [‚Üê erase_env.length, comm.erase_closing, ‚Üê closed.under_closing]
            assumption
          . rw [‚Üê erase_env.length, comm.erase_closing, ‚Üê closed.under_closing]
            assumption
          . apply log_approx.fundamental
            apply typing.erase.safety; apply HœÑb
          . rw [‚Üê erase_env.length, ‚Üê comm.erase_opening, ‚Üê comm.erase_opening]
            rw [identity.opening_closing _ _ _ Hlc‚ÇÄ, identity.opening_closing _ _ _ Hlc‚ÇÅ]
            assumption
  case run =>
    cases HœÑ
    case run HœÑ =>
      cases HœÑ
      all_goals next HX =>
        apply IH Œì _ _ (by simp) HX
  case ifzl‚ÇÇ =>
    cases HœÑ
    case ifz‚ÇÇ Hc HX Hr =>
      cases HX
      all_goals next HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH Œì _ _ (by simp) HX
      constructor; all_goals
      . apply compatibility.ifz‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hc
        . assumption
        . apply log_approx.fundamental
          apply typing_reification.erase.safety _ _ _ _ Hr
  case ifzr‚ÇÇ =>
    cases HœÑ
    case ifz‚ÇÇ Hc Hl HX =>
      cases HX
      all_goals next HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH Œì _ _ (by simp) HX
      constructor; all_goals
      . apply compatibility.ifz‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase.safety _ _ _ _ _ Hc
        . apply log_approx.fundamental
          apply typing_reification.erase.safety _ _ _ _ Hl
        . assumption
