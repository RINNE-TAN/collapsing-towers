import CollapsingTowers.TwoLevelRec.LogicalEquiv.Defs
import CollapsingTowers.TwoLevelRec.Erasure.Defs

-- Œì ‚ä¢ e‚ÇÄ : œÑ ‚Üí
-- ‚ÄñŒì‚Äñ ‚ä® ‚Äñe‚ÇÄ‚Äñ ‚âàùëôùëúùëî ‚Äñe‚ÇÅ‚Äñ : ‚ÄñœÑ‚Äñ
-- ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- Œì ‚ä¢ B‚ü¶e‚ÇÄ‚üß : œÑ ‚Üí
-- ‚ÄñŒì‚Äñ ‚ä® ‚ÄñB‚ü¶e‚ÇÄ‚üß‚Äñ ‚âàùëôùëúùëî ‚ÄñB‚ü¶e‚ÇÅ‚üß‚Äñ : ‚ÄñœÑ‚Äñ
lemma consistency.under_ctxùîπ :
  ‚àÄ Œì B e‚ÇÄ e‚ÇÅ œÑ œÜ,
    ctxùîπ B ‚Üí
    (‚àÄ œÑ œÜ,
      typing Œì ùüô e‚ÇÄ œÑ œÜ ‚Üí
      log_equiv ‚ÄñŒì‚Äñùõæ ‚Äñe‚ÇÄ‚Äñ ‚Äñe‚ÇÅ‚Äñ ‚ÄñœÑ‚Äñùúè
    ) ‚Üí
    typing Œì ùüô B‚ü¶e‚ÇÄ‚üß œÑ œÜ ‚Üí
    log_equiv ‚ÄñŒì‚Äñùõæ ‚ÄñB‚ü¶e‚ÇÄ‚üß‚Äñ ‚ÄñB‚ü¶e‚ÇÅ‚üß‚Äñ ‚ÄñœÑ‚Äñùúè :=
  by
  intros Œì B e‚ÇÄ e‚ÇÅ œÑ œÜ HB IH HœÑ
  cases HB
  case appl‚ÇÅ =>
    cases HœÑ
    case app‚ÇÅ Harg HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.app‚ÇÅ
        . apply IH‚ÇÄ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Harg
      -- right approximation
      . apply compatibility.app‚ÇÅ
        . apply IH‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Harg
  case appr‚ÇÅ =>
    cases HœÑ
    case app‚ÇÅ HX Hf =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.app‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Hf
        . apply IH‚ÇÄ
      -- right approximation
      . apply compatibility.app‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Hf
        . apply IH‚ÇÅ
  case appl‚ÇÇ =>
    cases HœÑ
    case app‚ÇÇ HX Harg =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.app‚ÇÅ
        . apply IH‚ÇÄ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Harg
      -- right approximation
      . apply compatibility.app‚ÇÅ
        . apply IH‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Harg
  case appr‚ÇÇ =>
    cases HœÑ
    case app‚ÇÇ Hf HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.app‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Hf
        . apply IH‚ÇÄ
      -- right approximation
      . apply compatibility.app‚ÇÅ
        . apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ Hf
        . apply IH‚ÇÅ
  case lift =>
    cases HœÑ
    case lift_lam HX => apply IH _ _ HX
    case lift_lit HX => apply IH _ _ HX
  case lets Hlc =>
    cases HœÑ
    case lets œÑùïí _ _ _ HX Hclosed He =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.lets
        . apply ty.erase.wbt _ œÑùïí
        . rw [‚Üê env.erase.length, ‚Üê closed.under_erase]
          apply Hclosed
        . rw [‚Üê env.erase.length, ‚Üê closed.under_erase]
          apply Hclosed
        . apply IH‚ÇÄ
        . rw [‚Üê env.erase.length, ‚Üê env.erase, ‚Üê comm.erase_opening]
          apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ He
      -- right approximation
      . apply compatibility.lets
        . apply ty.erase.wbt _ œÑùïí
        . rw [‚Üê env.erase.length, ‚Üê closed.under_erase]
          apply Hclosed
        . rw [‚Üê env.erase.length, ‚Üê closed.under_erase]
          apply Hclosed
        . apply IH‚ÇÅ
        . rw [‚Üê env.erase.length, ‚Üê env.erase, ‚Üê comm.erase_opening]
          apply log_approx.fundamental
          apply typing.erase_safety _ _ _ _ _ He
  case fix‚ÇÅ =>
    cases HœÑ
    case fix‚ÇÅ HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.fix‚ÇÅ; apply IH‚ÇÄ
      -- right approximation
      . apply compatibility.fix‚ÇÅ; apply IH‚ÇÅ
  case fix‚ÇÇ =>
    cases HœÑ
    case fix‚ÇÇ HX =>
      have ‚ü®IH‚ÇÄ, IH‚ÇÅ‚ü© := IH _ _ HX
      constructor
      -- left approximation
      . apply compatibility.fix‚ÇÅ; apply IH‚ÇÄ
      -- right approximation
      . apply compatibility.fix‚ÇÅ; apply IH‚ÇÅ
