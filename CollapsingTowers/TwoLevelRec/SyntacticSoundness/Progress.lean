import CollapsingTowers.TwoLevelRec.SyntacticTyping.Defs
import CollapsingTowers.TwoLevelRec.OperationalSemantics.Defs

@[simp]
def dyn_env (Œì : TEnv) : Prop :=
  ‚àÄ x œÑ ùïä, binds x (œÑ, ùïä) Œì ‚Üí ùïä = ùüö

lemma dyn_env.extend :
  ‚àÄ Œì œÑ,
    dyn_env Œì ‚Üí
    dyn_env ((œÑ, ùüö) :: Œì) :=
  by
  intros Œì œÑ‚ÇÄ HDyn x œÑ‚ÇÅ ùïä Hbinds
  by_cases HEq : Œì.length = x
  . simp [if_pos HEq] at Hbinds
    simp [Hbinds]
  . simp [if_neg HEq] at Hbinds
    apply HDyn; apply Hbinds

theorem progress.strengthened :
  ‚àÄ Œì e‚ÇÄ œÑ œÜ,
    typing_reification Œì e‚ÇÄ œÑ œÜ ‚Üí
    dyn_env Œì ‚Üí
    (‚àÉ e‚ÇÅ, step_lvl Œì.length e‚ÇÄ e‚ÇÅ) ‚à® value e‚ÇÄ :=
  by
  intros Œì e‚ÇÄ œÑ œÜ HœÑ
  apply @typing_reification.rec
    (fun Œì ùïä e‚ÇÄ œÑ œÜ (H : typing Œì ùïä e‚ÇÄ œÑ œÜ) =>
      dyn_env Œì ‚Üí ùïä = ùüô ‚Üí (‚àÉ e‚ÇÅ, step_lvl Œì.length e‚ÇÄ e‚ÇÅ) ‚à® value e‚ÇÄ)
    (fun Œì e‚ÇÄ œÑ œÜ (H : typing_reification Œì e‚ÇÄ œÑ œÜ) =>
      dyn_env Œì ‚Üí (‚àÉ e‚ÇÅ, step_lvl Œì.length e‚ÇÄ e‚ÇÅ) ‚à® value e‚ÇÄ)
  <;> intros
  case fvar x _ HBinds Hwbt HDyn HEqùïä => simp [HDyn _ _ _ HBinds] at HEqùïä
  case lam H Hwbt Hclosed IH HDyn HEqùïä => right; apply value.lam; simp; rw [‚Üê lc.under_opening]; apply typing.regular _ _ _ _ _ H
  case lit => right; apply value.lit
  case code_fragment => right; apply value.code; simp
  case code_rep H IH HDyn HEqùïä => right; apply value.code; apply typing.regular _ _ _ _ _ H
  case lift_lam H IH HDyn HEqùïä =>
    left
    match IH HDyn HEqùïä with
    | .inl Hstep =>
      have ‚ü®_, Hstep‚ü© := Hstep
      apply step.congruence_under_ctxùîπ _ _ _ _ ctxùîπ.lift Hstep
    | .inr Hvalue =>
      cases Hvalue <;> try contradiction
      case lam e Hlc =>
        exists .lamùïî (codify 0 e)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . apply Hlc
        . apply head.lift_lam
  case app‚ÇÅ e‚ÇÄ e‚ÇÅ _ _ _ _ _ H‚ÇÄ H‚ÇÅ IH‚ÇÄ IH‚ÇÅ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä, IH‚ÇÅ HDyn HEqùïä with
    | .inl Hstep‚ÇÄ, _ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.appl‚ÇÅ _ _) Hstep‚ÇÄ
      apply typing.regular _ _ _ _ _ H‚ÇÅ
    | .inr Hvalue‚ÇÄ, .inl Hstep‚ÇÅ =>
      have ‚ü®_, Hstep‚ÇÅ‚ü© := Hstep‚ÇÅ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.appr‚ÇÅ _ _) Hstep‚ÇÅ
      apply Hvalue‚ÇÄ
    | .inr Hvalue‚ÇÄ, .inr Hvalue‚ÇÅ =>
      cases Hvalue‚ÇÄ <;> try contradiction
      case lam e‚ÇÄ Hlc‚ÇÄ =>
        exists opening 0 e‚ÇÅ e‚ÇÄ
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; apply Hlc‚ÇÄ; apply lc.value _ Hvalue‚ÇÅ
        . apply head.app‚ÇÅ; apply Hvalue‚ÇÅ
  case app‚ÇÇ e‚ÇÄ e‚ÇÅ _ _ _ _ H‚ÇÄ H‚ÇÅ IH‚ÇÄ IH‚ÇÅ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä, IH‚ÇÅ HDyn HEqùïä with
    | .inl Hstep‚ÇÄ, _ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.appl‚ÇÇ _ _) Hstep‚ÇÄ
      apply typing.regular _ _ _ _ _ H‚ÇÅ
    | .inr Hvalue‚ÇÄ, .inl Hstep‚ÇÅ =>
      have ‚ü®_, Hstep‚ÇÅ‚ü© := Hstep‚ÇÅ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.appr‚ÇÇ _ _) Hstep‚ÇÅ
      apply Hvalue‚ÇÄ
    | .inr Hvalue‚ÇÄ, .inr Hvalue‚ÇÅ =>
      cases Hvalue‚ÇÄ <;> try contradiction
      case code e‚ÇÄ Hlc‚ÇÄ =>
      cases Hvalue‚ÇÅ <;> try contradiction
      case code e‚ÇÅ Hlc‚ÇÅ =>
        exists .reflect (.app‚ÇÅ e‚ÇÄ e‚ÇÅ)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; apply Hlc‚ÇÄ; apply Hlc‚ÇÅ
        . apply head.app‚ÇÇ
  case lift_lit H IH HDyn HEqùïä =>
    left
    match IH HDyn HEqùïä with
    | .inl Hstep =>
      have ‚ü®_, Hstep‚ü© := Hstep
      apply step.congruence_under_ctxùîπ _ _ _ _ ctxùîπ.lift Hstep
    | .inr Hvalue =>
      cases Hvalue <;> try contradiction
      case lit n =>
        exists .reflect (.lit n)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . simp
        . apply head.lift_lit
  case binary‚ÇÅ op _ _ _ _ H‚ÇÄ H‚ÇÅ IH‚ÇÄ IH‚ÇÅ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä, IH‚ÇÅ HDyn HEqùïä with
    | .inl Hstep‚ÇÄ, _ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.binaryl‚ÇÅ _ _ _) Hstep‚ÇÄ
      apply typing.regular _ _ _ _ _ H‚ÇÅ
    | .inr Hvalue‚ÇÄ, .inl Hstep‚ÇÅ =>
      have ‚ü®_, Hstep‚ÇÅ‚ü© := Hstep‚ÇÅ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.binaryr‚ÇÅ _ _ _) Hstep‚ÇÅ
      apply Hvalue‚ÇÄ
    | .inr Hvalue‚ÇÄ, .inr Hvalue‚ÇÅ =>
      cases Hvalue‚ÇÄ <;> try contradiction
      case lit n‚ÇÄ =>
      cases Hvalue‚ÇÅ <;> try contradiction
      case lit n‚ÇÅ =>
        exists .lit (eval op n‚ÇÄ n‚ÇÅ)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; simp; simp
        . apply head.binary‚ÇÅ
  case binary‚ÇÇ op _ _ _ _ H‚ÇÄ H‚ÇÅ IH‚ÇÄ IH‚ÇÅ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä, IH‚ÇÅ HDyn HEqùïä with
    | .inl Hstep‚ÇÄ, _ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.binaryl‚ÇÇ _ _ _) Hstep‚ÇÄ
      apply typing.regular _ _ _ _ _ H‚ÇÅ
    | .inr Hvalue‚ÇÄ, .inl Hstep‚ÇÅ =>
      have ‚ü®_, Hstep‚ÇÅ‚ü© := Hstep‚ÇÅ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.binaryr‚ÇÇ _ _ _) Hstep‚ÇÅ
      apply Hvalue‚ÇÄ
    | .inr Hvalue‚ÇÄ, .inr Hvalue‚ÇÅ =>
      cases Hvalue‚ÇÄ <;> try contradiction
      case code e‚ÇÄ Hlc‚ÇÄ =>
      cases Hvalue‚ÇÅ <;> try contradiction
      case code e‚ÇÅ Hlc‚ÇÅ =>
        exists .reflect (.binary‚ÇÅ op e‚ÇÄ e‚ÇÅ)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; apply Hlc‚ÇÄ; apply Hlc‚ÇÅ
        . apply head.binary‚ÇÇ
  case reflect e _ H _ _ _ =>
    left
    exists .letsùïî e (.code (.bvar 0))
    apply step_lvl.reflect _ _ _ ctx‚Ñô.hole ctxùîº.hole
    apply typing.regular _ _ _ _ _ H
  case lamùïî Œì e _ _ _ H Hwbt Hclosed IH HDyn HEqùïä =>
    left
    rw [‚Üê identity.closing_opening 0 _ _ Hclosed]
    match IH (dyn_env.extend _ _ HDyn) with
    | .inl Hstep =>
      have ‚ü®_, Hstep‚ü© := Hstep
      constructor
      apply step.congruence_under_ctx‚Ñù _ _ _ _ _ ctx‚Ñù.lamùïî Hstep
    | .inr Hvalue =>
      generalize HEqe : ({0 ‚Ü¶ Œì.length} e) = e‚Çí
      rw [HEqe] at Hvalue H
      cases Hvalue <;> try contradiction
      case code e Hlc =>
        exists .reflect (.lam ({0 ‚Ü§ Œì.length} e))
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . apply lc.under_closing; omega
          apply lc.inc; apply Hlc; omega
        . apply head.lamùïî
  case lets e‚ÇÄ e‚ÇÅ _ _ _ _ H‚ÇÄ H‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä with
    | .inl Hstep‚ÇÄ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.lets _ _) Hstep‚ÇÄ
      rw [‚Üê lc.under_opening]; apply typing.regular _ _ _ _ _ H‚ÇÅ
    | .inr Hvalue‚ÇÄ =>
      exists opening 0 e‚ÇÄ e‚ÇÅ
      apply step_lvl.pure _ _ _ ctxùïÑ.hole
      . constructor
        . apply lc.value _ Hvalue‚ÇÄ
        . rw [‚Üê lc.under_opening]; apply typing.regular _ _ _ _ _ H‚ÇÅ
      . apply head.lets; apply Hvalue‚ÇÄ
  case letsùïî Œì b e _ _ _ H‚ÇÄ H‚ÇÅ HwellBHwbtnds Hclosed _ IH‚ÇÅ HDyn HEqùïä =>
    left
    rw [‚Üê identity.closing_opening 0 _ _ Hclosed]
    match IH‚ÇÅ (dyn_env.extend _ _ HDyn) with
    | .inl Hstep‚ÇÅ =>
      have ‚ü®_, Hstep‚ÇÅ‚ü© := Hstep‚ÇÅ
      constructor
      apply step.congruence_under_ctx‚Ñù _ _ _ _ _ (ctx‚Ñù.letsùïî _ _) Hstep‚ÇÅ
      apply typing.regular _ _ _ _ _ H‚ÇÄ
    | .inr Hvalue‚ÇÅ =>
      generalize HEqe : ({0 ‚Ü¶ Œì.length} e) = e‚Çí
      rw [HEqe] at Hvalue‚ÇÅ H‚ÇÅ
      cases Hvalue‚ÇÅ <;> try contradiction
      case code e‚ÇÅ Hlc‚ÇÅ =>
        exists .code (.lets b ({0 ‚Ü§ Œì.length} e‚ÇÅ))
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor
          . apply typing.regular _ _ _ _ _ H‚ÇÄ
          . apply lc.under_closing; omega
            apply lc.inc; apply Hlc‚ÇÅ; omega
        . apply head.letsùïî
  case run H Hclosed IH HDyn HEqùïä =>
    left
    match IH HDyn with
    | .inl Hstep =>
      have ‚ü®_, Hstep‚ü© := Hstep
      constructor
      apply step.congruence_under_ctx‚Ñù _ _ _ _ _ ctx‚Ñù.run Hstep
    | .inr Hvalue =>
      cases Hvalue <;> try contradiction
      case code e Hlc =>
        exists e
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . apply Hlc
        . apply head.run
  case fix‚ÇÅ f _ _ _ _ _ _ _ IH HDyn HEqùïä =>
    left
    match IH HDyn HEqùïä with
    | .inl Hstep =>
      have ‚ü®_, Hstep‚ü© := Hstep
      apply step.congruence_under_ctxùîπ _ _ _ _ ctxùîπ.fix‚ÇÅ Hstep
    | .inr Hvalue =>
      exists .lam (.app‚ÇÅ (.app‚ÇÅ f (.fix‚ÇÅ f)) (.bvar 0))
      apply step_lvl.pure _ _ _ ctxùïÑ.hole
      . apply lc.value _ Hvalue
      . apply head.fix‚ÇÅ; apply Hvalue
  case fix‚ÇÇ H IH HDyn HEqùïä =>
    left
    match IH HDyn HEqùïä with
    | .inl Hstep =>
      have ‚ü®_, Hstep‚ü© := Hstep
      apply step.congruence_under_ctxùîπ _ _ _ _ ctxùîπ.fix‚ÇÇ Hstep
    | .inr Hvalue =>
      cases Hvalue <;> try contradiction
      case code e Hlc =>
        exists .reflect (.fix‚ÇÅ e)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . apply Hlc
        . apply head.fix‚ÇÇ
  case ifz‚ÇÅ l r _ _ _ _ H‚ÇÄ H‚ÇÅ H‚ÇÇ IH‚ÇÄ _ _ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä with
    | .inl Hstep‚ÇÄ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.ifz‚ÇÅ _ _ _ _) Hstep‚ÇÄ
      apply typing.regular _ _ _ _ _ H‚ÇÅ
      apply typing.regular _ _ _ _ _ H‚ÇÇ
    | .inr Hvalue =>
      cases Hvalue <;> try contradiction
      case lit c =>
      cases c
      case zero =>
        exists l
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; simp
          constructor; apply typing.regular _ _ _ _ _ H‚ÇÅ; apply typing.regular _ _ _ _ _ H‚ÇÇ
        . apply head.ifz‚ÇÅ_then
      case succ =>
        exists r
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; simp
          constructor; apply typing.regular _ _ _ _ _ H‚ÇÅ; apply typing.regular _ _ _ _ _ H‚ÇÇ
        . apply head.ifz‚ÇÅ_else
  case ifz‚ÇÇ H‚ÇÄ H‚ÇÅ H‚ÇÇ IH‚ÇÄ IH‚ÇÅ IH‚ÇÇ HDyn HEqùïä =>
    left
    match IH‚ÇÄ HDyn HEqùïä, IH‚ÇÅ HDyn, IH‚ÇÇ HDyn with
    | .inl Hstep‚ÇÄ, _, _ =>
      have ‚ü®_, Hstep‚ÇÄ‚ü© := Hstep‚ÇÄ
      apply step.congruence_under_ctxùîπ _ _ _ _ (ctxùîπ.ifz‚ÇÇ _ _ _ _) Hstep‚ÇÄ
      apply typing_reification.regular _ _ _ _ H‚ÇÅ
      apply typing_reification.regular _ _ _ _ H‚ÇÇ
    | .inr Hvalue‚ÇÄ, .inl Hstep‚ÇÅ, _ =>
      have ‚ü®_, Hstep‚ÇÅ‚ü© := Hstep‚ÇÅ
      constructor
      apply step.congruence_under_ctx‚Ñù _ _ _ _ _ (ctx‚Ñù.ifzl‚ÇÇ _ _ _ _) Hstep‚ÇÅ
      apply Hvalue‚ÇÄ
      apply typing_reification.regular _ _ _ _ H‚ÇÇ
    | .inr Hvalue‚ÇÄ, .inr Hvalue‚ÇÅ, .inl Hstep‚ÇÇ =>
      have ‚ü®_, Hstep‚ÇÇ‚ü© := Hstep‚ÇÇ
      constructor
      apply step.congruence_under_ctx‚Ñù _ _ _ _ _ (ctx‚Ñù.ifzr‚ÇÇ _ _ _ _) Hstep‚ÇÇ
      apply Hvalue‚ÇÄ; apply Hvalue‚ÇÅ
    | .inr Hvalue‚ÇÄ, .inr Hvalue‚ÇÅ, .inr Hvalue‚ÇÇ =>
      cases Hvalue‚ÇÄ <;> try contradiction
      case code e‚ÇÄ Hlc‚ÇÄ =>
      cases Hvalue‚ÇÅ <;> try contradiction
      case code e‚ÇÅ Hlc‚ÇÅ =>
      cases Hvalue‚ÇÇ <;> try contradiction
      case code e‚ÇÇ Hlc‚ÇÇ =>
        exists .reflect (.ifz‚ÇÅ e‚ÇÄ e‚ÇÅ e‚ÇÇ)
        apply step_lvl.pure _ _ _ ctxùïÑ.hole
        . constructor; apply Hlc‚ÇÄ
          constructor; apply Hlc‚ÇÅ
          apply Hlc‚ÇÇ
        . apply head.ifz‚ÇÇ
  case pure IH HDyn => apply IH HDyn rfl
  case reify IH HDyn => apply IH HDyn rfl
  apply HœÑ

theorem progress :
  ‚àÄ e‚ÇÄ œÑ œÜ,
    typing_reification ‚¶∞ e‚ÇÄ œÑ œÜ ‚Üí
    (‚àÉ e‚ÇÅ, (e‚ÇÄ ‚áù e‚ÇÅ)) ‚à® value e‚ÇÄ :=
  by
  intros _ _ _ HœÑ
  apply progress.strengthened ‚¶∞ _ _ _ HœÑ (by simp)
