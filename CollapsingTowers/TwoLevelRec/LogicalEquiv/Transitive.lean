import CollapsingTowers.TwoLevelRec.LogicalEquiv.Fundamental

lemma log_rel_value.refl.zero_case :
  ‚àÄ v‚ÇÄ v‚ÇÅ œÑ,
    log_rel_value 0 v‚ÇÄ v‚ÇÅ œÑ ‚Üí
    log_rel_value 0 v‚ÇÄ v‚ÇÄ œÑ ‚àß
    log_rel_value 0 v‚ÇÅ v‚ÇÅ œÑ :=
  by
  intros v‚ÇÄ v‚ÇÅ œÑ Hsem_value
  cases œÑ
  case nat =>
    cases v‚ÇÄ <;> cases v‚ÇÅ <;> simp at Hsem_value
    constructor; simp; simp
  case arrow œÜ =>
    cases v‚ÇÄ <;> cases v‚ÇÅ <;> cases œÜ <;> simp at Hsem_value
    constructor
    . rw [log_rel_value]
      constructor; apply Hsem_value.left
      constructor; apply Hsem_value.left
      intro z Hindexz argv‚ÇÄ argv‚ÇÅ Hsem_value_arg
      rw [log_rel_expr]
      intro j Hindexj; omega
    . rw [log_rel_value]
      constructor; apply Hsem_value.right
      constructor; apply Hsem_value.right
      intro z Hindexz argv‚ÇÄ argv‚ÇÅ Hsem_value_arg
      rw [log_rel_expr]
      intro j Hindexj; omega
  all_goals simp at Hsem_value

lemma log_rel_value.refl :
  ‚àÄ k v‚ÇÄ v‚ÇÅ œÑ,
    log_rel_value k ‚Äñv‚ÇÄ‚Äñ ‚Äñv‚ÇÅ‚Äñ ‚ÄñœÑ‚Äñùúè ‚Üí
    log_rel_value k ‚Äñv‚ÇÄ‚Äñ ‚Äñv‚ÇÄ‚Äñ ‚ÄñœÑ‚Äñùúè ‚àß
    log_rel_value k ‚Äñv‚ÇÅ‚Äñ ‚Äñv‚ÇÅ‚Äñ ‚ÄñœÑ‚Äñùúè :=
  by
  intros k v‚ÇÄ v‚ÇÅ œÑ Hsem_value
  cases k
  case zero =>
    apply log_rel_value.refl.zero_case
    apply Hsem_value
  case succ k =>
    have ‚ü®Hvalue‚ÇÄ, Hvalue‚ÇÅ‚ü© := log_rel_value.syntactic.value _ _ _ _ Hsem_value
    have ‚ü®HœÑ‚ÇÄ, HœÑ‚ÇÅ‚ü© := log_rel_value.syntactic.typing _ _ _ _ Hsem_value
    have ‚ü®_, _, H‚ÇÄ‚ü© := typing.fundamental [] _ _ _ _ HœÑ‚ÇÄ
    have ‚ü®_, _, H‚ÇÅ‚ü© := typing.fundamental [] _ _ _ _ HœÑ‚ÇÅ
    have Hsem_expr‚ÇÄ := H‚ÇÄ (k + 1) _ _ (log_rel_env.nil _)
    have Hsem_expr‚ÇÅ := H‚ÇÅ (k + 1) _ _ (log_rel_env.nil _)
    rw [log_rel_expr] at Hsem_expr‚ÇÄ Hsem_expr‚ÇÅ
    have ‚ü®r‚ÇÄ, Hstepr‚ÇÄ, Hsem_value‚ÇÄ‚ü© := Hsem_expr‚ÇÄ 0 (by omega) _ Hvalue‚ÇÄ (pure_stepn_indexed.refl _)
    have ‚ü®r‚ÇÅ, Hstepr‚ÇÅ, Hsem_value‚ÇÅ‚ü© := Hsem_expr‚ÇÅ 0 (by omega) _ Hvalue‚ÇÅ (pure_stepn_indexed.refl _)
    have HEqv‚ÇÄ := pure_stepn.value_impl_termination _ _ Hvalue‚ÇÄ Hstepr‚ÇÄ
    have HEqv‚ÇÅ := pure_stepn.value_impl_termination _ _ Hvalue‚ÇÅ Hstepr‚ÇÅ
    rw [‚Üê HEqv‚ÇÄ] at Hsem_value‚ÇÄ
    rw [‚Üê HEqv‚ÇÅ] at Hsem_value‚ÇÅ
    constructor; apply Hsem_value‚ÇÄ; apply Hsem_value‚ÇÅ
