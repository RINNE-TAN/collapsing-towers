import CollapsingTowers.TwoLevelRec.LogicalEquiv.Fundamental
mutual
lemma log_rel_value.trans (k : Nat) (v‚ÇÄ v‚ÇÅ v‚ÇÇ : Expr) (œÑ : Ty) :
    log_rel_value k v‚ÇÄ v‚ÇÅ œÑ ‚Üí
    (‚àÄ k, log_rel_value k v‚ÇÅ v‚ÇÇ œÑ) ‚Üí
    log_rel_value k v‚ÇÄ v‚ÇÇ œÑ :=
    match œÑ with
    | .nat =>
      by
      intros Hsem_value‚ÇÄ Hsem_value‚ÇÅ
      cases v‚ÇÄ <;> try simp at Hsem_value‚ÇÄ
      cases v‚ÇÅ <;> try simp at Hsem_value‚ÇÄ
      cases v‚ÇÇ <;> try simp at Hsem_value‚ÇÅ
      simp; omega
    | .arrow œÑùïí œÑùïì œÜ =>
      by
      intros Hsem_value‚ÇÄ Hsem_value‚ÇÅ
      cases v‚ÇÄ <;> try simp at Hsem_value‚ÇÄ
      case lam e‚ÇÄ =>
      cases v‚ÇÅ <;> try simp at Hsem_value‚ÇÄ
      case lam e‚ÇÅ =>
      cases v‚ÇÇ <;> try simp at Hsem_value‚ÇÅ
      case lam e‚ÇÇ =>
      cases œÜ <;> simp only [log_rel_value] at Hsem_value‚ÇÄ Hsem_value‚ÇÅ <;> try contradiction
      simp only [log_rel_value]
      have ‚ü®HœÑ‚ÇÄ, HœÑ‚ÇÅ, Hsem_expr‚ÇÄ‚ü© := Hsem_value‚ÇÄ
      have ‚ü®HœÑ‚ÇÅ, HœÑ‚ÇÇ, _‚ü© := Hsem_value‚ÇÅ 0
      constructor; apply HœÑ‚ÇÄ
      constructor; apply HœÑ‚ÇÇ
      intros j Hindexj argv‚ÇÄ argv‚ÇÅ Hsem_value_arg‚ÇÄ
      have ‚ü®HvalueArg‚ÇÄ, HvalueArg‚ÇÅ‚ü© := log_rel_value.syntactic.value _ _ _ _ Hsem_value_arg‚ÇÄ
      have ‚ü®HœÑArg‚ÇÄ, HœÑArg‚ÇÅ‚ü© := log_rel_value.syntactic.typing _ _ _ _ Hsem_value_arg‚ÇÄ
      apply log_rel_expr.trans; apply Hsem_expr‚ÇÄ
      apply Hindexj; apply Hsem_value_arg‚ÇÄ
      intros k
      cases k
      case zero => simp
      case succ k =>
        have ‚ü®HœÑ‚ÇÅ, HœÑ‚ÇÇ, Hsem_expr‚ÇÅ‚ü© := Hsem_value‚ÇÅ (k + 1)
        apply Hsem_expr‚ÇÅ; omega
        have ‚ü®_, _, Hsem_expr_argv‚ÇÅ‚ü© := typing.fundamental _ _ _ HœÑArg‚ÇÅ
        simp only [log_rel_expr] at Hsem_expr_argv‚ÇÅ
        have ‚ü®argv‚ÇÇ, Hstep, Hsem_value_arg‚ÇÅ‚ü© := Hsem_expr_argv‚ÇÅ (k + 1) _ _ (log_rel_env.nil _) 0 (by omega) _ HvalueArg‚ÇÅ (stepn_indexed.refl _)
        rw [‚Üê stepn.value_impl_termination _ _ HvalueArg‚ÇÅ Hstep] at Hsem_value_arg‚ÇÅ
        apply Hsem_value_arg‚ÇÅ
    | .fragment _ => by simp
    | .rep _ => by simp

termination_by (œÑ, k)
decreasing_by apply Prod.Lex.left; simp; omega

lemma log_rel_expr.trans :
  ‚àÄ k e‚ÇÄ e‚ÇÅ e‚ÇÇ œÑ,
    log_rel_expr k e‚ÇÄ e‚ÇÅ œÑ ‚Üí
    (‚àÄ k, log_rel_expr k e‚ÇÅ e‚ÇÇ œÑ) ‚Üí
    log_rel_expr k e‚ÇÄ e‚ÇÇ œÑ :=
  by
  intros k e‚ÇÄ e‚ÇÅ e‚ÇÇ œÑ Hsem_expr‚ÇÄ Hsem_expr‚ÇÅ
  cases k
  case zero => simp
  case succ k =>
    simp only [log_rel_expr] at Hsem_expr‚ÇÄ Hsem_expr‚ÇÅ
    simp only [log_rel_expr]
    intros i‚ÇÄ Hindexi‚ÇÄ v‚ÇÄ Hvalue‚ÇÄ Hstep‚ÇÄ
    have ‚ü®v‚ÇÅ, Hstep‚ÇÅ, Hsem_value‚ÇÄ‚ü© := Hsem_expr‚ÇÄ _ Hindexi‚ÇÄ _ Hvalue‚ÇÄ Hstep‚ÇÄ
    have ‚ü®Hvalue‚ÇÄ, Hvalue‚ÇÅ‚ü© := log_rel_value.syntactic.value _ _ _ _ Hsem_value‚ÇÄ
    have ‚ü®i‚ÇÅ, Hstep‚ÇÅ‚ü© := stepn_impl_stepn_indexed _ _ Hstep‚ÇÅ
    have ‚ü®v‚ÇÇ, Hstep‚ÇÇ, Hsem_value‚ÇÅ‚ü© := Hsem_expr‚ÇÅ (i‚ÇÅ + 1) i‚ÇÅ (by omega) _ Hvalue‚ÇÅ Hstep‚ÇÅ
    have ‚ü®Hvalue‚ÇÅ, Hvalue‚ÇÇ‚ü© := log_rel_value.syntactic.value _ _ _ _ Hsem_value‚ÇÅ
    exists v‚ÇÇ
    constructor; apply Hstep‚ÇÇ
    apply log_rel_value.trans; apply Hsem_value‚ÇÄ
    intros k
    have ‚ü®v‚ÇÉ, Hstep‚ÇÉ, Hsem_value‚ÇÇ‚ü© := Hsem_expr‚ÇÅ (k + i‚ÇÅ + 1) i‚ÇÅ (by omega) _ Hvalue‚ÇÅ Hstep‚ÇÅ
    have ‚ü®Hvalue‚ÇÅ, Hvalue‚ÇÉ‚ü© := log_rel_value.syntactic.value _ _ _ _ Hsem_value‚ÇÇ
    rw [stepn.unique_normal_forms _ _ _ Hstep‚ÇÇ Hstep‚ÇÉ Hvalue‚ÇÇ Hvalue‚ÇÉ]
    apply log_rel_value.antimono
    apply Hsem_value‚ÇÇ; omega

termination_by k _ _ _ œÑ => (œÑ, k + 1)
decreasing_by apply Prod.Lex.right; omega
end
