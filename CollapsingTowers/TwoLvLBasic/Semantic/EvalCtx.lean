import CollapsingTowers.TwoLvLBasic.Syntax.Defs
import CollapsingTowers.TwoLvLBasic.Semantic.Value

abbrev Ctx :=
  Expr ‚Üí Expr

notation:max a "‚ü¶" b "‚üß" => a b

lemma ctx_comp : (f g : Ctx) ‚Üí ‚àÄ e, f (g e) = (f ‚àò g) e := by simp

lemma ctx_swap : (f : Ctx) ‚Üí ‚àÄ e, f (id e) = id (f e) := by simp

inductive ctxùîπ : Ctx ‚Üí Prop where
  | appl‚ÇÅ : ‚àÄ arg, lc arg ‚Üí ctxùîπ (fun X => .app‚ÇÅ X arg)
  | appr‚ÇÅ : ‚àÄ v, value v ‚Üí ctxùîπ (fun X => .app‚ÇÅ v X)
  | appl‚ÇÇ : ‚àÄ arg, lc arg ‚Üí ctxùîπ (fun X => .app‚ÇÇ X arg)
  | appr‚ÇÇ : ‚àÄ v, value v ‚Üí ctxùîπ (fun X => .app‚ÇÇ v X)
  | lift : ctxùîπ (fun X => .lift X)
  | lets : ‚àÄ e, lc_at e 1 ‚Üí ctxùîπ (fun X => .lets X e)

inductive ctx‚Ñù : ‚Ñï ‚Üí ‚Ñï ‚Üí Ctx ‚Üí Prop where
  | lamùïî : ctx‚Ñù 1 lvl (fun X => .lamùïî ({0 ‚Ü§ lvl} X))
  | letùïî : ‚àÄ b, lc b ‚Üí ctx‚Ñù 1 lvl (fun X => .letsùïî b ({0 ‚Ü§ lvl} X))
  | run : ctx‚Ñù 0 lvl (fun X => .run X)

inductive ctxùïÑ : ‚Ñï ‚Üí Ctx ‚Üí Prop where
  | hole : ctxùïÑ lvl id
  | consùîπ : ‚àÄ B M, ctxùîπ B ‚Üí ctxùïÑ lvl M ‚Üí ctxùïÑ lvl (B ‚àò M)
  | cons‚Ñù : ‚àÄ R M, ctx‚Ñù intro lvl R ‚Üí ctxùïÑ (lvl + intro) M ‚Üí ctxùïÑ lvl (R ‚àò M)

inductive ctxùîº : Ctx ‚Üí Prop where
  | hole : ctxùîº id
  | consùîπ : ‚àÄ B E, ctxùîπ B ‚Üí ctxùîº E ‚Üí ctxùîº (B ‚àò E)

inductive ctx‚Ñö : ‚Ñï ‚Üí Ctx ‚Üí Prop where
  | hole‚Ñù : ‚àÄ R, ctx‚Ñù intro lvl R ‚Üí ctx‚Ñö lvl R
  | consùîπ : ‚àÄ B Q, ctxùîπ B ‚Üí ctx‚Ñö lvl Q ‚Üí ctx‚Ñö lvl (B ‚àò Q)
  | cons‚Ñù : ‚àÄ R Q, ctx‚Ñù intro lvl R ‚Üí ctx‚Ñö (lvl + intro) Q ‚Üí ctx‚Ñö lvl (R ‚àò Q)

inductive ctx‚Ñô : ‚Ñï ‚Üí Ctx ‚Üí Prop where
  | hole : ctx‚Ñô lvl id
  | cons‚Ñö : ‚àÄ Q, ctx‚Ñö lvl Q ‚Üí ctx‚Ñô lvl Q

mutual
  inductive ctx‚Ñô' : ‚Ñï ‚Üí Ctx ‚Üí Prop where
    | hole : ctx‚Ñô' lvl id
    | consùîπ : ‚àÄ B Q, ctxùîπ B ‚Üí ctx‚Ñö' lvl Q ‚Üí ctx‚Ñô' lvl (B ‚àò Q)
    | cons‚Ñù : ‚àÄ R P, ctx‚Ñù intro lvl R ‚Üí ctx‚Ñô' (lvl + intro) P ‚Üí ctx‚Ñô' lvl (R ‚àò P)
  inductive ctx‚Ñö' : ‚Ñï ‚Üí Ctx ‚Üí Prop where
    | consùîπ : ‚àÄ B Q, ctxùîπ B ‚Üí ctx‚Ñö' lvl Q ‚Üí ctx‚Ñö' lvl (B ‚àò Q)
    | cons‚Ñù : ‚àÄ R P, ctx‚Ñù intro lvl R ‚Üí ctx‚Ñô' (lvl + intro) P ‚Üí ctx‚Ñö' lvl (R ‚àò P)
end

lemma lc.under_ctxùîπ : ‚àÄ B e i, ctxùîπ B ‚Üí lc_at e i ‚Üí lc_at B‚ü¶e‚üß i :=
  by
  intros _ _ _ HB Hlc
  induction HB with
  | appl‚ÇÅ _ IH
  | appl‚ÇÇ _ IH
  | lets _ IH =>
    constructor; apply Hlc
    apply lc.inc; apply IH; omega
  | appr‚ÇÅ _ Hvalue
  | appr‚ÇÇ _ Hvalue =>
    constructor
    apply lc.inc; apply value_impl_lc
    apply Hvalue; omega
    apply Hlc
  | lift => apply Hlc

lemma lc.under_ctx‚Ñù : ‚àÄ R e i intro lvl, ctx‚Ñù intro lvl R ‚Üí lc_at e i ‚Üí lc_at R‚ü¶e‚üß i :=
  by
  intros _ _ _ _ _ HR Hlc
  cases HR with
  | lamùïî =>
    apply lc.under_closing; omega
    apply lc.inc; apply Hlc; omega
  | letùïî _ Hlcb =>
    constructor
    apply lc.inc; apply Hlcb; omega
    apply lc.under_closing; omega
    apply lc.inc; apply Hlc; omega
  | run =>
    apply Hlc

lemma lc.under_ctxùïÑ : ‚àÄ M e i lvl, ctxùïÑ lvl M ‚Üí lc_at e i ‚Üí lc_at M‚ü¶e‚üß i :=
  by
  intros _ _ _ _ HM Hlc
  induction HM with
  | hole => apply Hlc
  | consùîπ _ _ HB _ IHlc =>
    simp; apply lc.under_ctxùîπ
    apply HB; apply IHlc
  | cons‚Ñù _ _ HR _ IHlc =>
    simp; apply lc.under_ctx‚Ñù
    apply HR; apply IHlc

lemma lc.under_ctx‚Ñö : ‚àÄ Q e i lvl, ctx‚Ñö lvl Q ‚Üí lc_at e i ‚Üí lc_at Q‚ü¶e‚üß i :=
  by
  intros _ _ _ _ HQ Hlc
  induction HQ with
  | hole‚Ñù _ HR => apply lc.under_ctx‚Ñù; apply HR; apply Hlc
  | consùîπ _ _ HB _ IHlc =>
    simp; apply lc.under_ctxùîπ
    apply HB; apply IHlc
  | cons‚Ñù _ _ HR _ IHlc =>
    simp; apply lc.under_ctx‚Ñù
    apply HR; apply IHlc
