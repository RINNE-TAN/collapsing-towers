import CollapsingTowers.TwoLvLBasic.Syntax.SyntacticTrans
import CollapsingTowers.TwoLvLBasic.Syntax.Fv

-- closedness condition for free variables
@[simp]
def closed_at (e : Expr) (x : ‚Ñï) : Prop :=
  match e with
  | .bvar _ => true
  | .fvar y => y < x
  | .lam e => closed_at e x
  | .lift e => closed_at e x
  | .app‚ÇÅ f arg => closed_at f x ‚àß closed_at arg x
  | .app‚ÇÇ f arg => closed_at f x ‚àß closed_at arg x
  | .lit _ => true
  | .run e => closed_at e x
  | .code e => closed_at e x
  | .reflect e => closed_at e x
  | .lamùïî e => closed_at e x
  | .lets b e => closed_at b x ‚àß closed_at e x
  | .letsùïî b e => closed_at b x ‚àß closed_at e x

@[simp]
def closed e := closed_at e 0

lemma closed.fv_not_in_dec :
  ‚àÄ e x,
    closed_at e (x + 1) ‚Üí
    x ‚àâ fv e ‚Üí
    closed_at e x :=
  by
  intros e x Hclosedd HFv
  induction e with
  | bvar j => simp
  | fvar y => simp at *; omega
  | lit => simp
  | lift _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH
  | lam _ IH
  | lamùïî _ IH =>
    apply IH; apply Hclosedd; apply HFv
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp at HFv; constructor
    apply IH‚ÇÄ; apply Hclosedd.left; apply HFv.left
    apply IH‚ÇÅ; apply Hclosedd.right; apply HFv.right

lemma closed.inc : ‚àÄ x y e, closed_at e x ‚Üí x ‚â§ y ‚Üí closed_at e y :=
  by
  intros x y e Hclosed Hxy
  induction e with
  | bvar j => simp
  | fvar z => simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosed

lemma closed.under_closing : ‚àÄ e x i, closed_at e (x + 1) ‚Üî closed_at ({i ‚Ü§ x} e) x :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y =>
    by_cases HEq : x = y
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp; omega
  | bvar => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    . intro Hclosed; constructor
      apply (IH‚ÇÄ _).mp; apply Hclosed.left
      apply (IH‚ÇÅ _).mp; apply Hclosed.right
    . intro Hclosed; constructor
      apply (IH‚ÇÄ _).mpr; apply Hclosed.left
      apply (IH‚ÇÅ _).mpr; apply Hclosed.right
  | lit => simp

lemma closed.under_opening : ‚àÄ e x i, closed_at e x ‚Üí closed_at ({i ‚Ü¶ x} e) (x + 1) :=
  by
  intros e x i
  induction e generalizing i with
  | fvar y => simp; omega
  | bvar j =>
    by_cases HEq : j = i
    . rw [HEq]; simp
    . simp; rw [if_neg HEq]; simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    intro Hclosed; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp

lemma closed.under_shiftl :
    ‚àÄ x y e n, closed_at e x ‚Üí closed_at (shiftl_at y n e) (x + n) :=
  by
  intros x y e n Hclosed
  induction e with
  | bvar j => simp
  | fvar z =>
    by_cases HLe : y ‚â§ z
    . simp; rw [if_pos HLe]; simp; apply Hclosed
    . simp; rw [if_neg HLe]; simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosed

lemma closed.under_subst : ‚àÄ x e v y, closed_at v y ‚Üí closed_at e y ‚Üí closed_at (subst x v e) y :=
  by
  intros x e v y Hv He
  induction e generalizing y with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; apply He
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply Hv; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply Hv; apply He.left
    apply IH‚ÇÅ; apply Hv; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hv; apply He
  | lit => simp

lemma closed.under_subst_dec : ‚àÄ x e v, closed_at v x ‚Üí closed_at e (x + 1) ‚Üí closed_at (subst x v e) x :=
  by
  intros x e v Hv He
  induction e with
  | bvar => apply He
  | fvar z =>
    by_cases HEq : x = z
    . rw [‚Üê HEq]; simp; apply Hv
    . simp; rw [if_neg HEq]; simp at *; omega
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH =>
    apply IH; apply He
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    constructor
    apply IH‚ÇÄ; apply He.left
    apply IH‚ÇÅ; apply He.right
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply He
  | lit => simp

lemma closed.under_shiftr : ‚àÄ x e, closed_at e x ‚Üí closed_at (shiftr_at x e) x :=
  by
  intros x e Hclosed
  induction e with
  | bvar j => simp
  | fvar z =>
    by_cases Hxz : x < z
    . simp; rw [if_pos Hxz]; simp at *; omega
    . simp; rw [if_neg Hxz]; simp at *; omega
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    simp; constructor
    apply IH‚ÇÄ; apply Hclosed.left
    apply IH‚ÇÅ; apply Hclosed.right
  | lit => simp
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    simp; apply IH; apply Hclosed

lemma closed.under_shiftr_dec :
  ‚àÄ x y e, closed_at e (x + y + 1) ‚Üí y ‚àâ fv e ‚Üí closed_at (shiftr_at y e) (x + y) :=
  by
  intros x y e Hclosed HFv
  cases x
  case zero =>
    simp at *
    apply closed.under_shiftr
    apply closed.fv_not_in_dec
    apply Hclosed; apply HFv
  case succ x =>
    induction e with
    | bvar j => simp
    | fvar z =>
      by_cases Hyz : y < z
      . simp; rw [if_pos Hyz]; simp at *; omega
      . simp; rw [if_neg Hyz]; simp at *; omega
    | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
    | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
    | lets _ _ IH‚ÇÄ IH‚ÇÅ
    | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
      simp at HFv
      simp; constructor
      apply IH‚ÇÄ; apply HFv.left; apply Hclosed.left
      apply IH‚ÇÅ; apply HFv.right; apply Hclosed.right
    | lit => simp
    | lam _ IH
    | lift _ IH
    | lamùïî _ IH
    | code _ IH
    | reflect _ IH
    | run _ IH =>
      apply IH; apply HFv; apply Hclosed

lemma closed.impl_fv :
  ‚àÄ x y e,
    closed_at e x ‚Üí
    y ‚â• x ‚Üí
    y ‚àâ fv e :=
  by
  intros x y e Hclosed HGe HIn
  induction e with
  | bvar => nomatch HIn
  | fvar z =>
    simp at *
    omega
  | lit => nomatch HIn
  | lam _ IH
  | lift _ IH
  | lamùïî _ IH
  | code _ IH
  | reflect _ IH
  | run _ IH =>
    apply IH; apply Hclosed; apply HIn
  | app‚ÇÅ _ _ IH‚ÇÄ IH‚ÇÅ
  | app‚ÇÇ _ _ IH‚ÇÄ IH‚ÇÅ
  | lets _ _ IH‚ÇÄ IH‚ÇÅ
  | letsùïî _ _ IH‚ÇÄ IH‚ÇÅ =>
    cases HIn
    case inl H‚ÇÄ =>
      apply IH‚ÇÄ; apply Hclosed.left; apply H‚ÇÄ
    case inr H‚ÇÅ =>
      apply IH‚ÇÅ; apply Hclosed.right; apply H‚ÇÅ
