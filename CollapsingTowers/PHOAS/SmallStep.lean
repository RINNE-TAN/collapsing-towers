
import CollapsingTowers.PHOAS.Basic
def squash : Expr‚ÇÄ (Expr‚ÇÄ ùïç) -> Expr‚ÇÄ ùïç
  | .var‚ÇÄ x => x
  | .lam‚ÇÄ e => .lam‚ÇÄ (fun x => squash (e (.var‚ÇÄ x)))
  | .app‚ÇÄ f arg => .app‚ÇÄ (squash f) (squash arg)
  | .unit‚ÇÄ => .unit‚ÇÄ

def subst (e : {ùïç : Type} -> ùïç -> Expr‚ÇÄ ùïç) (s : Expr) : Expr :=
  squash (e s)

abbrev Ctx :=
  Expr -> Expr

notation:max a "‚ü¶" b "‚üß" => a b

inductive ctxùîπ : Ctx -> Prop where
  | appL : ‚àÄ arg, ctxùîπ (fun X => app X arg)
  | appR : ‚àÄ v, value v -> ctxùîπ (fun X => app v X)

inductive ctxùïÑ : Ctx -> Prop where
  | hole : ctxùïÑ id
  | ùîπ : ‚àÄ B M, ctxùîπ B -> ctxùïÑ M -> ctxùïÑ (B ‚àò M)

inductive step : Expr -> Expr -> Prop where
  | appŒ≤ : ‚àÄ M v e, ctxùïÑ M -> value v -> step M‚ü¶app (lam e) v‚üß M‚ü¶subst e v‚üß
